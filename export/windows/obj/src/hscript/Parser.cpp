// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_hscript_Token
#include <haxe/ds/GenericCell_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_hscript_Token
#include <haxe/ds/GenericStack_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_StringInput
#include <haxe/io/StringInput.h>
#endif
#ifndef INCLUDED_hscript_CType
#include <hscript/CType.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_FieldAccess
#include <hscript/FieldAccess.h>
#endif
#ifndef INCLUDED_hscript_FieldKind
#include <hscript/FieldKind.h>
#endif
#ifndef INCLUDED_hscript_ModuleDecl
#include <hscript/ModuleDecl.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_hscript_Token
#include <hscript/Token.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_45_new,"hscript.Parser","new",0x4b9f158c,"hscript.Parser.new","hscript/Parser.hx",45,0x98735743)
static const ::String _hx_array_data_e9f29f9a_4[] = {
	HX_("%",25,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_5[] = {
	HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_6[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_7[] = {
	HX_("<<",80,34,00,00),HX_(">>",40,36,00,00),HX_(">>>",fe,41,2f,00),
};
static const ::String _hx_array_data_e9f29f9a_8[] = {
	HX_("|",7c,00,00,00),HX_("&",26,00,00,00),HX_("^",5e,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_9[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),
};
static const ::String _hx_array_data_e9f29f9a_10[] = {
	HX_("...",ee,0f,23,00),
};
static const ::String _hx_array_data_e9f29f9a_11[] = {
	HX_("&&",40,21,00,00),
};
static const ::String _hx_array_data_e9f29f9a_12[] = {
	HX_("||",80,6c,00,00),
};
static const ::String _hx_array_data_e9f29f9a_13[] = {
	HX_("=",3d,00,00,00),HX_("+=",b2,25,00,00),HX_("-=",70,27,00,00),HX_("*=",d3,24,00,00),HX_("/=",2e,29,00,00),HX_("%=",78,20,00,00),HX_("<<=",bd,bb,2d,00),HX_(">>=",fd,41,2f,00),HX_(">>>=",7f,7c,2a,29),HX_("|=",41,6c,00,00),HX_("&=",57,21,00,00),HX_("^=",1f,52,00,00),HX_("=>",61,35,00,00),
};
static const ::String _hx_array_data_e9f29f9a_14[] = {
	HX_("!",21,00,00,00),HX_("++",a0,25,00,00),HX_("--",60,27,00,00),HX_("-",2d,00,00,00),HX_("~",7e,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_148_error,"hscript.Parser","error",0x9bb1b3f4,"hscript.Parser.error","hscript/Parser.hx",148,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_153_invalidChar,"hscript.Parser","invalidChar",0x0ae4fe99,"hscript.Parser.invalidChar","hscript/Parser.hx",153,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_156_initParser,"hscript.Parser","initParser",0xe350f063,"hscript.Parser.initParser","hscript/Parser.hx",156,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_181_parseString,"hscript.Parser","parseString",0xed832690,"hscript.Parser.parseString","hscript/Parser.hx",181,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_184_parse,"hscript.Parser","parse",0xe5dd785f,"hscript.Parser.parse","hscript/Parser.hx",184,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_198_unexpected,"hscript.Parser","unexpected",0xb7770e25,"hscript.Parser.unexpected","hscript/Parser.hx",198,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_208_push,"hscript.Parser","push",0xe0f2532e,"hscript.Parser.push","hscript/Parser.hx",208,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_212_ensure,"hscript.Parser","ensure",0x52df3412,"hscript.Parser.ensure","hscript/Parser.hx",212,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_217_ensureToken,"hscript.Parser","ensureToken",0x4d49bd87,"hscript.Parser.ensureToken","hscript/Parser.hx",217,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_222_maybe,"hscript.Parser","maybe",0x2baefbd4,"hscript.Parser.maybe","hscript/Parser.hx",222,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_230_getIdent,"hscript.Parser","getIdent",0x33becdce,"hscript.Parser.getIdent","hscript/Parser.hx",230,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_244_expr,"hscript.Parser","expr",0xd9af3e89,"hscript.Parser.expr","hscript/Parser.hx",244,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_252_pmin,"hscript.Parser","pmin",0xe0ec3876,"hscript.Parser.pmin","hscript/Parser.hx",252,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_260_pmax,"hscript.Parser","pmax",0xe0ec3188,"hscript.Parser.pmax","hscript/Parser.hx",260,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_271_mk,"hscript.Parser","mk",0xd828e3b2,"hscript.Parser.mk","hscript/Parser.hx",271,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_276_isBlock,"hscript.Parser","isBlock",0x99f5642f,"hscript.Parser.isBlock","hscript/Parser.hx",276,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_293_parseFullExpr,"hscript.Parser","parseFullExpr",0x2c8eb1e3,"hscript.Parser.parseFullExpr","hscript/Parser.hx",293,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_313_parseObject,"hscript.Parser","parseObject",0xf1927c7e,"hscript.Parser.parseObject","hscript/Parser.hx",313,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_347_parseExpr,"hscript.Parser","parseExpr",0x8f01bd34,"hscript.Parser.parseExpr","hscript/Parser.hx",347,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_453_parseMetaArgs,"hscript.Parser","parseMetaArgs",0xfe617641,"hscript.Parser.parseMetaArgs","hscript/Parser.hx",453,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_477_mapCompr,"hscript.Parser","mapCompr",0xde0e1f9b,"hscript.Parser.mapCompr","hscript/Parser.hx",477,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_498_makeUnop,"hscript.Parser","makeUnop",0x60b6401c,"hscript.Parser.makeUnop","hscript/Parser.hx",498,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_506_makeBinop,"hscript.Parser","makeBinop",0x4ad5ff06,"hscript.Parser.makeBinop","hscript/Parser.hx",506,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_526_parseStructure,"hscript.Parser","parseStructure",0x237837d4,"hscript.Parser.parseStructure","hscript/Parser.hx",526,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_708_parseExprNext,"hscript.Parser","parseExprNext",0x83d61847,"hscript.Parser.parseExprNext","hscript/Parser.hx",708,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_740_parseFunctionDecl,"hscript.Parser","parseFunctionDecl",0xcc13eaa1,"hscript.Parser.parseFunctionDecl","hscript/Parser.hx",740,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_789_parsePath,"hscript.Parser","parsePath",0x9635a5a4,"hscript.Parser.parsePath","hscript/Parser.hx",789,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_802_parseType,"hscript.Parser","parseType",0x98ecb2b9,"hscript.Parser.parseType","hscript/Parser.hx",802,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_878_parseTypeNext,"hscript.Parser","parseTypeNext",0x8b2ab44c,"hscript.Parser.parseTypeNext","hscript/Parser.hx",878,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_900_parseExprList,"hscript.Parser","parseExprList",0x8286afb2,"hscript.Parser.parseExprList","hscript/Parser.hx",900,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_921_parseModule,"hscript.Parser","parseModule",0x9d26326b,"hscript.Parser.parseModule","hscript/Parser.hx",921,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_936_parseMetadata,"hscript.Parser","parseMetadata",0x157712ee,"hscript.Parser.parseMetadata","hscript/Parser.hx",936,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_951_parseParams,"hscript.Parser","parseParams",0xc9cdf905,"hscript.Parser.parseParams","hscript/Parser.hx",951,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_957_parseModuleDecl,"hscript.Parser","parseModuleDecl",0xfa46c075,"hscript.Parser.parseModuleDecl","hscript/Parser.hx",957,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1050_parseField,"hscript.Parser","parseField",0x1bf7d3db,"hscript.Parser.parseField","hscript/Parser.hx",1050,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1123_incPos,"hscript.Parser","incPos",0xe19d25aa,"hscript.Parser.incPos","hscript/Parser.hx",1123,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1131_readChar,"hscript.Parser","readChar",0x8625b4a0,"hscript.Parser.readChar","hscript/Parser.hx",1131,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1134_readString,"hscript.Parser","readString",0xfc2f051b,"hscript.Parser.readString","hscript/Parser.hx",1134,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1212_token,"hscript.Parser","token",0x3cb36b25,"hscript.Parser.token","hscript/Parser.hx",1212,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1443_preprocValue,"hscript.Parser","preprocValue",0xbabba0cc,"hscript.Parser.preprocValue","hscript/Parser.hx",1443,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1448_parsePreproCond,"hscript.Parser","parsePreproCond",0x44c5e42b,"hscript.Parser.parsePreproCond","hscript/Parser.hx",1448,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1464_evalPreproCond,"hscript.Parser","evalPreproCond",0x4859d7fc,"hscript.Parser.evalPreproCond","hscript/Parser.hx",1464,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1482_preprocess,"hscript.Parser","preprocess",0x83c9d500,"hscript.Parser.preprocess","hscript/Parser.hx",1482,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1514_skipTokens,"hscript.Parser","skipTokens",0xeb6e038d,"hscript.Parser.skipTokens","hscript/Parser.hx",1514,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1529_tokenComment,"hscript.Parser","tokenComment",0xb86c15ba,"hscript.Parser.tokenComment","hscript/Parser.hx",1529,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1572_constString,"hscript.Parser","constString",0x0a4693c0,"hscript.Parser.constString","hscript/Parser.hx",1572,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1583_tokenString,"hscript.Parser","tokenString",0x05f471d6,"hscript.Parser.tokenString","hscript/Parser.hx",1583,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_97_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",97,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_98_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",98,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_99_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",99,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_100_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",100,0x98735743)
namespace hscript{

void Parser_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_45_new)
HXLINE(  86)		this->uid = (int)0;
HXLINE(  64)		this->preprocesorValues =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 111)		this->line = (int)1;
HXLINE( 112)		this->opChars = HX_("+*/-=!><&|^%~",e2,ec,c4,dc);
HXLINE( 113)		this->identChars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_",e0,b5,3b,15);
HXLINE( 114)		::Array< ::Dynamic> priorities = ::Array_obj< ::Dynamic>::__new(10)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_4,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_5,2))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_6,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_7,3))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_8,3))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_9,6))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_10,1))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_11,1))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_12,1))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_13,13));
HXLINE( 127)		this->opPriority =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 128)		this->opRightAssoc =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 129)		this->unops =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 135)		{
HXLINE( 135)			int _g1 = (int)0;
HXDLIN( 135)			int _g = priorities->length;
HXDLIN( 135)			while((_g1 < _g)){
HXLINE( 135)				_g1 = (_g1 + (int)1);
HXDLIN( 135)				int i = (_g1 - (int)1);
HXLINE( 136)				{
HXLINE( 136)					int _g2 = (int)0;
HXDLIN( 136)					::Array< ::String > _g3 = priorities->__get(i).StaticCast< ::Array< ::String > >();
HXDLIN( 136)					while((_g2 < _g3->length)){
HXLINE( 136)						::String x = _g3->__get(_g2);
HXDLIN( 136)						_g2 = (_g2 + (int)1);
HXLINE( 137)						this->opPriority->set(x,i);
HXLINE( 138)						if ((i == (int)9)) {
HXLINE( 138)							this->opRightAssoc->set(x,true);
            						}
            					}
            				}
            			}
            		}
HXLINE( 140)		{
HXLINE( 140)			int _g4 = (int)0;
HXDLIN( 140)			::Array< ::String > _g11 = ::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_14,5);
HXDLIN( 140)			while((_g4 < _g11->length)){
HXLINE( 140)				::String x1 = _g11->__get(_g4);
HXDLIN( 140)				_g4 = (_g4 + (int)1);
HXLINE( 141)				{
HXLINE( 141)					bool _hx_tmp;
HXDLIN( 141)					if ((x1 != HX_("++",a0,25,00,00))) {
HXLINE( 141)						_hx_tmp = (x1 == HX_("--",60,27,00,00));
            					}
            					else {
HXLINE( 141)						_hx_tmp = true;
            					}
HXDLIN( 141)					this->unops->set(x1,_hx_tmp);
            				}
            			}
            		}
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f5e8b32;
}

void Parser_obj::error( ::hscript::Error err,int pmin,int pmax){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_148_error)
HXDLIN( 148)		HX_STACK_DO_THROW(err);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,error,(void))

void Parser_obj::invalidChar(int c){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_153_invalidChar)
HXDLIN( 153)		HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidChar(c));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,invalidChar,(void))

void Parser_obj::initParser(::String origin){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_156_initParser)
HXLINE( 158)		this->preprocStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 166)		this->tokens =  ::haxe::ds::GenericStack_hscript_Token_obj::__alloc( HX_CTX );
HXLINE( 170)		this->_hx_char = (int)-1;
HXLINE( 171)		this->ops = ::Array_obj< bool >::__new();
HXLINE( 172)		this->idents = ::Array_obj< bool >::__new();
HXLINE( 173)		this->uid = (int)0;
HXLINE( 174)		{
HXLINE( 174)			int _g1 = (int)0;
HXDLIN( 174)			int _g = this->opChars.length;
HXDLIN( 174)			while((_g1 < _g)){
HXLINE( 174)				_g1 = (_g1 + (int)1);
HXDLIN( 174)				int i = (_g1 - (int)1);
HXLINE( 175)				::Array< bool > _hx_tmp = this->ops;
HXDLIN( 175)				_hx_tmp[this->opChars.charCodeAt(i)] = true;
            			}
            		}
HXLINE( 176)		{
HXLINE( 176)			int _g11 = (int)0;
HXDLIN( 176)			int _g2 = this->identChars.length;
HXDLIN( 176)			while((_g11 < _g2)){
HXLINE( 176)				_g11 = (_g11 + (int)1);
HXDLIN( 176)				int i1 = (_g11 - (int)1);
HXLINE( 177)				::Array< bool > _hx_tmp1 = this->idents;
HXDLIN( 177)				_hx_tmp1[this->identChars.charCodeAt(i1)] = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,initParser,(void))

 ::hscript::Expr Parser_obj::parseString(::String s,::String __o_origin){
::String origin = __o_origin.Default(HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"));
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_181_parseString)
HXDLIN( 181)		return this->parse( ::haxe::io::StringInput_obj::__alloc( HX_CTX ,s),origin);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseString,return )

 ::hscript::Expr Parser_obj::parse( ::haxe::io::Input s,::String __o_origin){
::String origin = __o_origin.Default(HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"));
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_184_parse)
HXLINE( 185)		this->initParser(origin);
HXLINE( 186)		this->input = s;
HXLINE( 187)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 188)		while(true){
HXLINE( 189)			 ::hscript::Token tk = this->token();
HXLINE( 190)			if (hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE( 190)				goto _hx_goto_21;
            			}
HXLINE( 191)			{
HXLINE( 191)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 191)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 192)			this->parseFullExpr(a);
            		}
            		_hx_goto_21:;
HXLINE( 194)		if ((a->length == (int)1)) {
HXLINE( 194)			return a->__get((int)0).StaticCast<  ::hscript::Expr >();
            		}
            		else {
HXLINE( 194)			return ::hscript::Expr_obj::EBlock(a);
            		}
HXDLIN( 194)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parse,return )

 ::Dynamic Parser_obj::unexpected( ::hscript::Token tk){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_198_unexpected)
HXDLIN( 198)		HX_STACK_DO_THROW(::hscript::Error_obj::EUnexpected(this->tokenString(tk)));
HXDLIN( 198)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,unexpected,return )

void Parser_obj::push( ::hscript::Token tk){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_208_push)
HXDLIN( 208)		 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 208)		_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,push,(void))

void Parser_obj::ensure( ::hscript::Token tk){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_212_ensure)
HXLINE( 213)		 ::hscript::Token t = this->token();
HXLINE( 214)		if (hx::IsNotEq( t,tk )) {
HXLINE( 214)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensure,(void))

void Parser_obj::ensureToken( ::hscript::Token tk){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_217_ensureToken)
HXLINE( 218)		 ::hscript::Token t = this->token();
HXLINE( 219)		if (!(::Type_obj::enumEq(t,tk))) {
HXLINE( 219)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensureToken,(void))

bool Parser_obj::maybe( ::hscript::Token tk){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_222_maybe)
HXLINE( 223)		 ::hscript::Token t = this->token();
HXLINE( 224)		if (::Type_obj::enumEq(t,tk)) {
HXLINE( 225)			return true;
            		}
HXLINE( 226)		{
HXLINE( 226)			 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 226)			_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            		}
HXLINE( 227)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,maybe,return )

::String Parser_obj::getIdent(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_230_getIdent)
HXLINE( 231)		 ::hscript::Token tk = this->token();
HXLINE( 232)		if ((_hx_getEnumValueIndex(tk) == (int)2)) {
HXLINE( 233)			::String id = tk->_hx_getString(0);
HXDLIN( 233)			return id;
            		}
            		else {
HXLINE( 235)			this->unexpected(tk);
HXLINE( 236)			return null();
            		}
HXLINE( 232)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,getIdent,return )

 ::hscript::Expr Parser_obj::expr( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_244_expr)
HXDLIN( 244)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,expr,return )

int Parser_obj::pmin( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_252_pmin)
HXDLIN( 252)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmin,return )

int Parser_obj::pmax( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_260_pmax)
HXDLIN( 260)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmax,return )

 ::hscript::Expr Parser_obj::mk( ::hscript::Expr e, ::Dynamic pmin, ::Dynamic pmax){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_271_mk)
HXDLIN( 271)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,mk,return )

bool Parser_obj::isBlock( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_276_isBlock)
HXDLIN( 276)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)2: {
HXLINE( 279)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 279)				 ::hscript::CType t = e->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN( 279)				if (hx::IsNotNull( e1 )) {
HXLINE( 279)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 279)					if (hx::IsNotNull( t )) {
HXLINE( 279)						if (hx::IsNull( t )) {
HXLINE( 279)							return false;
            						}
            						else {
HXLINE( 279)							if ((_hx_getEnumValueIndex(t) == (int)2)) {
HXLINE( 279)								return true;
            							}
            							else {
HXLINE( 279)								return false;
            							}
            						}
            					}
            					else {
HXLINE( 279)						return false;
            					}
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 281)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 281)				return this->isBlock(e2);
            			}
            			break;
            			case (int)7: {
HXLINE( 282)				 ::hscript::Expr e3 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 282)				bool prefix = e->_hx_getBool(1);
HXDLIN( 282)				if (!(prefix)) {
HXLINE( 282)					return this->isBlock(e3);
            				}
            				else {
HXLINE( 282)					return false;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 280)				 ::hscript::Expr e21 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 280)				 ::hscript::Expr e11 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 280)				if (hx::IsNotNull( e21 )) {
HXLINE( 280)					return this->isBlock(e21);
            				}
            				else {
HXLINE( 280)					return this->isBlock(e11);
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 283)				 ::hscript::Expr e4 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 283)				return this->isBlock(e4);
            			}
            			break;
            			case (int)11: {
HXLINE( 285)				 ::hscript::Expr e5 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 285)				return this->isBlock(e5);
            			}
            			break;
            			case (int)14: {
HXLINE( 278)				 ::hscript::Expr e6 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 278)				return this->isBlock(e6);
            			}
            			break;
            			case (int)15: {
HXLINE( 286)				 ::hscript::Expr e7 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 286)				if (hx::IsNotNull( e7 )) {
HXLINE( 286)					return this->isBlock(e7);
            				}
            				else {
HXLINE( 286)					return false;
            				}
            			}
            			break;
            			case (int)20: {
HXLINE( 287)				 ::hscript::Expr e8 = e->_hx_getObject(3).StaticCast<  ::hscript::Expr >();
HXDLIN( 287)				return this->isBlock(e8);
            			}
            			break;
            			case (int)4: case (int)21: case (int)23: {
HXLINE( 277)				return true;
            			}
            			break;
            			case (int)24: {
HXLINE( 284)				 ::hscript::Expr e9 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 284)				return this->isBlock(e9);
            			}
            			break;
            			case (int)25: {
HXLINE( 288)				 ::hscript::Expr e10 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 288)				return this->isBlock(e10);
            			}
            			break;
            			default:{
HXLINE( 289)				return false;
            			}
            		}
HXLINE( 276)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isBlock,return )

void Parser_obj::parseFullExpr(::Array< ::Dynamic> exprs){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_293_parseFullExpr)
HXLINE( 294)		 ::hscript::Expr e = this->parseExpr();
HXLINE( 295)		exprs->push(e);
HXLINE( 297)		 ::hscript::Token tk = this->token();
HXLINE( 299)		while(true){
HXLINE( 299)			bool _hx_tmp;
HXDLIN( 299)			if (hx::IsEq( tk,::hscript::Token_obj::TComma_dyn() )) {
HXLINE( 299)				if ((_hx_getEnumValueIndex(e) == (int)2)) {
HXLINE( 299)					_hx_tmp = true;
            				}
            				else {
HXLINE( 299)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 299)				_hx_tmp = false;
            			}
HXDLIN( 299)			if (!(_hx_tmp)) {
HXLINE( 299)				goto _hx_goto_34;
            			}
HXLINE( 300)			e = this->parseStructure(HX_("var",e7,de,59,00));
HXLINE( 301)			exprs->push(e);
HXLINE( 302)			tk = this->token();
            		}
            		_hx_goto_34:;
HXLINE( 305)		bool _hx_tmp1;
HXDLIN( 305)		if (hx::IsNotEq( tk,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 305)			_hx_tmp1 = hx::IsNotEq( tk,::hscript::Token_obj::TEof_dyn() );
            		}
            		else {
HXLINE( 305)			_hx_tmp1 = false;
            		}
HXDLIN( 305)		if (_hx_tmp1) {
HXLINE( 306)			if (this->isBlock(e)) {
HXLINE( 307)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 307)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
            			else {
HXLINE( 309)				this->unexpected(tk);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseFullExpr,(void))

 ::hscript::Expr Parser_obj::parseObject( ::Dynamic p1){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_313_parseObject)
HXLINE( 315)		::Array< ::Dynamic> fl = ::Array_obj< ::Dynamic>::__new();
HXLINE( 316)		while(true){
HXLINE( 317)			 ::hscript::Token tk = this->token();
HXLINE( 318)			::String id = null();
HXLINE( 319)			switch((int)(_hx_getEnumValueIndex(tk))){
            				case (int)1: {
HXLINE( 321)					 ::hscript::Const c = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN( 321)					{
HXLINE( 322)						if (!(this->allowJSON)) {
HXLINE( 323)							this->unexpected(tk);
            						}
HXLINE( 324)						if ((_hx_getEnumValueIndex(c) == (int)2)) {
HXLINE( 325)							::String s = c->_hx_getString(0);
HXDLIN( 325)							id = s;
            						}
            						else {
HXLINE( 326)							this->unexpected(tk);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 320)					::String i = tk->_hx_getString(0);
HXDLIN( 320)					id = i;
            				}
            				break;
            				case (int)7: {
HXLINE( 329)					goto _hx_goto_36;
            				}
            				break;
            				default:{
HXLINE( 331)					this->unexpected(tk);
            				}
            			}
HXLINE( 333)			{
HXLINE( 333)				 ::hscript::Token t = this->token();
HXDLIN( 333)				if (hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 333)					this->unexpected(t);
            				}
            			}
HXLINE( 334)			fl->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("e",65,00,00,00),this->parseExpr())
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 335)			tk = this->token();
HXLINE( 336)			switch((int)(_hx_getEnumValueIndex(tk))){
            				case (int)7: {
HXLINE( 338)					goto _hx_goto_36;
            				}
            				break;
            				case (int)9: {
            				}
            				break;
            				default:{
HXLINE( 341)					this->unexpected(tk);
            				}
            			}
            		}
            		_hx_goto_36:;
HXLINE( 344)		return this->parseExprNext(::hscript::Expr_obj::EObject(fl));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseObject,return )

 ::hscript::Expr Parser_obj::parseExpr(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_347_parseExpr)
HXLINE( 348)		 ::hscript::Token tk = this->token();
HXLINE( 352)		switch((int)(_hx_getEnumValueIndex(tk))){
            			case (int)1: {
HXLINE( 358)				 ::hscript::Const c = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXLINE( 359)				return this->parseExprNext(::hscript::Expr_obj::EConst(c));
            			}
            			break;
            			case (int)2: {
HXLINE( 353)				::String id = tk->_hx_getString(0);
HXLINE( 354)				 ::hscript::Expr e = this->parseStructure(id);
HXLINE( 355)				if (hx::IsNull( e )) {
HXLINE( 356)					e = ::hscript::Expr_obj::EIdent(id);
            				}
HXLINE( 357)				return this->parseExprNext(e);
            			}
            			break;
            			case (int)3: {
HXLINE( 407)				::String op = tk->_hx_getString(0);
HXLINE( 408)				if (::haxe::IMap_obj::exists(this->unops,op)) {
HXLINE( 409)					int start = (int)0;
HXLINE( 410)					 ::hscript::Expr e1 = this->parseExpr();
HXLINE( 411)					if ((op == HX_("-",2d,00,00,00))) {
HXLINE( 412)						if ((_hx_getEnumValueIndex(e1) == (int)0)) {
HXLINE( 412)							switch((int)(_hx_getEnumValueIndex(e1->_hx_getObject(0).StaticCast<  ::hscript::Const >()))){
            								case (int)0: {
HXLINE( 413)									int i = e1->_hx_getObject(0).StaticCast<  ::hscript::Const >()->_hx_getInt(0);
HXLINE( 414)									return ::hscript::Expr_obj::EConst(::hscript::Const_obj::CInt(-(i)));
            								}
            								break;
            								case (int)1: {
HXLINE( 415)									Float f = e1->_hx_getObject(0).StaticCast<  ::hscript::Const >()->_hx_getFloat(0);
HXLINE( 416)									return ::hscript::Expr_obj::EConst(::hscript::Const_obj::CFloat(-(f)));
            								}
            								break;
            								default:{
            								}
            							}
            						}
            					}
HXLINE( 419)					return this->makeUnop(op,e1);
            				}
HXLINE( 421)				return this->unexpected(tk);
            			}
            			break;
            			case (int)4: {
HXLINE( 361)				 ::hscript::Expr e2 = this->parseExpr();
HXLINE( 362)				{
HXLINE( 362)					 ::hscript::Token t = this->token();
HXDLIN( 362)					if (hx::IsNotEq( t,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 362)						this->unexpected(t);
            					}
            				}
HXLINE( 363)				return this->parseExprNext(::hscript::Expr_obj::EParent(e2));
            			}
            			break;
            			case (int)6: {
HXLINE( 365)				tk = this->token();
HXLINE( 366)				switch((int)(_hx_getEnumValueIndex(tk))){
            					case (int)1: {
HXLINE( 378)						 ::hscript::Const c1 = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXLINE( 379)						if (this->allowJSON) {
HXLINE( 380)							if ((_hx_getEnumValueIndex(c1) == (int)2)) {
HXLINE( 382)								 ::hscript::Token tk2 = this->token();
HXLINE( 383)								{
HXLINE( 383)									 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 383)									_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk2,_this->head);
            								}
HXLINE( 384)								{
HXLINE( 384)									 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 384)									_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this1->head);
            								}
HXLINE( 385)								if ((_hx_getEnumValueIndex(tk2) == (int)14)) {
HXLINE( 387)									return this->parseExprNext(this->parseObject((int)0));
            								}
            							}
            							else {
HXLINE( 391)								 ::haxe::ds::GenericStack_hscript_Token _this2 = this->tokens;
HXDLIN( 391)								_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this2->head);
            							}
            						}
            						else {
HXLINE( 394)							 ::haxe::ds::GenericStack_hscript_Token _this3 = this->tokens;
HXDLIN( 394)							_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this3->head);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 370)						 ::hscript::Token tk21 = this->token();
HXLINE( 371)						{
HXLINE( 371)							 ::haxe::ds::GenericStack_hscript_Token _this4 = this->tokens;
HXDLIN( 371)							_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk21,_this4->head);
            						}
HXLINE( 372)						{
HXLINE( 372)							 ::haxe::ds::GenericStack_hscript_Token _this5 = this->tokens;
HXDLIN( 372)							_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this5->head);
            						}
HXLINE( 373)						if ((_hx_getEnumValueIndex(tk21) == (int)14)) {
HXLINE( 375)							return this->parseExprNext(this->parseObject((int)0));
            						}
            					}
            					break;
            					case (int)7: {
HXLINE( 368)						return this->parseExprNext(::hscript::Expr_obj::EObject(::Array_obj< ::Dynamic>::__new(0)));
            					}
            					break;
            					default:{
HXLINE( 396)						 ::haxe::ds::GenericStack_hscript_Token _this6 = this->tokens;
HXDLIN( 396)						_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this6->head);
            					}
            				}
HXLINE( 398)				::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 399)				while(true){
HXLINE( 400)					this->parseFullExpr(a);
HXLINE( 401)					tk = this->token();
HXLINE( 402)					if (hx::IsEq( tk,::hscript::Token_obj::TBrClose_dyn() )) {
HXLINE( 403)						goto _hx_goto_38;
            					}
HXLINE( 404)					{
HXLINE( 404)						 ::haxe::ds::GenericStack_hscript_Token _this7 = this->tokens;
HXDLIN( 404)						_this7->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this7->head);
            					}
            				}
            				_hx_goto_38:;
HXLINE( 406)				return ::hscript::Expr_obj::EBlock(a);
            			}
            			break;
            			case (int)11: {
HXLINE( 423)				::Array< ::Dynamic> a1 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 424)				tk = this->token();
HXLINE( 425)				while(hx::IsNotEq( tk,::hscript::Token_obj::TBkClose_dyn() )){
HXLINE( 426)					{
HXLINE( 426)						 ::haxe::ds::GenericStack_hscript_Token _this8 = this->tokens;
HXDLIN( 426)						_this8->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this8->head);
            					}
HXLINE( 427)					a1->push(this->parseExpr());
HXLINE( 428)					tk = this->token();
HXLINE( 429)					if (hx::IsEq( tk,::hscript::Token_obj::TComma_dyn() )) {
HXLINE( 430)						tk = this->token();
            					}
            				}
HXLINE( 432)				if ((a1->length == (int)1)) {
HXLINE( 433)					 ::hscript::Expr _g = a1->__get((int)0).StaticCast<  ::hscript::Expr >();
HXDLIN( 433)					switch((int)(_hx_getEnumValueIndex(_g))){
            						case (int)10: case (int)11: case (int)24: {
HXLINE( 435)							::String tmp = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 437)							 ::hscript::Expr e3 = ::hscript::Expr_obj::EVar(tmp,null(),::hscript::Expr_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 436)							 ::hscript::Expr e4 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,e3)->init(1,this->mapCompr(tmp,a1->__get((int)0).StaticCast<  ::hscript::Expr >()))->init(2,::hscript::Expr_obj::EIdent(tmp)));
HXLINE( 441)							return this->parseExprNext(e4);
            						}
            						break;
            						default:{
            						}
            					}
            				}
HXLINE( 444)				return this->parseExprNext(::hscript::Expr_obj::EArrayDecl(a1));
            			}
            			break;
            			case (int)15: {
HXLINE( 445)				::String id1 = tk->_hx_getString(0);
HXDLIN( 445)				if (this->allowMetadata) {
HXLINE( 446)					::Array< ::Dynamic> args = this->parseMetaArgs();
HXLINE( 447)					return ::hscript::Expr_obj::EMeta(id1,args,this->parseExpr());
            				}
            				else {
HXLINE( 449)					return this->unexpected(tk);
            				}
            			}
            			break;
            			default:{
HXLINE( 449)				return this->unexpected(tk);
            			}
            		}
HXLINE( 352)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseExpr,return )

::Array< ::Dynamic> Parser_obj::parseMetaArgs(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_453_parseMetaArgs)
HXLINE( 454)		 ::hscript::Token tk = this->token();
HXLINE( 455)		if (hx::IsNotEq( tk,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 456)			{
HXLINE( 456)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 456)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 457)			return null();
            		}
HXLINE( 459)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 460)		tk = this->token();
HXLINE( 461)		if (hx::IsNotEq( tk,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 462)			{
HXLINE( 462)				 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 462)				_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this1->head);
            			}
HXLINE( 463)			while(true){
HXLINE( 464)				args->push(this->parseExpr());
HXLINE( 465)				{
HXLINE( 465)					 ::hscript::Token _g = this->token();
HXDLIN( 465)					switch((int)(_hx_getEnumValueIndex(_g))){
            						case (int)5: {
HXLINE( 468)							goto _hx_goto_41;
            						}
            						break;
            						case (int)9: {
            						}
            						break;
            						default:{
HXLINE( 469)							 ::hscript::Token tk1 = _g;
HXLINE( 470)							this->unexpected(tk1);
            						}
            					}
            				}
            			}
            			_hx_goto_41:;
            		}
HXLINE( 474)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseMetaArgs,return )

 ::hscript::Expr Parser_obj::mapCompr(::String tmp, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_477_mapCompr)
HXLINE( 478)		 ::hscript::Expr edef;
HXDLIN( 478)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)3: {
HXLINE( 489)				 ::hscript::Expr e2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 478)				edef = ::hscript::Expr_obj::EParent(this->mapCompr(tmp,e2));
            			}
            			break;
            			case (int)4: {
HXLINE( 478)				if ((e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->length == (int)1)) {
HXLINE( 487)					 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->__get((int)0).StaticCast<  ::hscript::Expr >();
HXLINE( 478)					edef = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,this->mapCompr(tmp,e1)));
            				}
            				else {
HXLINE( 478)					edef = ::hscript::Expr_obj::ECall(::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),HX_("push",da,11,61,4a)),::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 485)				 ::hscript::Expr e21 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 485)				 ::hscript::Expr e11 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 485)				 ::hscript::Expr cond = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 485)				if (hx::IsNull( e21 )) {
HXLINE( 478)					edef = ::hscript::Expr_obj::EIf(cond,this->mapCompr(tmp,e11),null());
            				}
            				else {
HXLINE( 478)					edef = ::hscript::Expr_obj::ECall(::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),HX_("push",da,11,61,4a)),::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 481)				 ::hscript::Expr e22 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 481)				 ::hscript::Expr cond1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 478)				edef = ::hscript::Expr_obj::EWhile(cond1,this->mapCompr(tmp,e22));
            			}
            			break;
            			case (int)11: {
HXLINE( 479)				 ::hscript::Expr e23 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 479)				 ::hscript::Expr it = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 479)				::String v = e->_hx_getString(0);
HXLINE( 478)				edef = ::hscript::Expr_obj::EFor(v,it,this->mapCompr(tmp,e23));
            			}
            			break;
            			case (int)24: {
HXLINE( 483)				 ::hscript::Expr e24 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 483)				 ::hscript::Expr cond2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 478)				edef = ::hscript::Expr_obj::EDoWhile(cond2,this->mapCompr(tmp,e24));
            			}
            			break;
            			default:{
HXLINE( 478)				edef = ::hscript::Expr_obj::ECall(::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),HX_("push",da,11,61,4a)),::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            			}
            		}
HXLINE( 494)		return edef;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,mapCompr,return )

 ::hscript::Expr Parser_obj::makeUnop(::String op, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_498_makeUnop)
HXDLIN( 498)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)6: {
HXLINE( 499)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 499)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 499)				::String bop = e->_hx_getString(0);
HXDLIN( 499)				return ::hscript::Expr_obj::EBinop(bop,this->makeUnop(op,e1),e2);
            			}
            			break;
            			case (int)22: {
HXLINE( 500)				 ::hscript::Expr e3 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 500)				 ::hscript::Expr e21 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 500)				 ::hscript::Expr e11 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 500)				return ::hscript::Expr_obj::ETernary(this->makeUnop(op,e11),e21,e3);
            			}
            			break;
            			default:{
HXLINE( 501)				return ::hscript::Expr_obj::EUnop(op,true,e);
            			}
            		}
HXLINE( 498)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,makeUnop,return )

 ::hscript::Expr Parser_obj::makeBinop(::String op, ::hscript::Expr e1, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_506_makeBinop)
HXDLIN( 506)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)6: {
HXLINE( 507)				 ::hscript::Expr e3 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 507)				 ::hscript::Expr e2 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 507)				::String op2 = e->_hx_getString(0);
HXLINE( 508)				bool _hx_tmp;
HXDLIN( 508)				 ::Dynamic _hx_tmp1 = ::haxe::IMap_obj::get(this->opPriority,op);
HXDLIN( 508)				if (hx::IsLessEq( _hx_tmp1,::haxe::IMap_obj::get(this->opPriority,op2) )) {
HXLINE( 508)					_hx_tmp = !(::haxe::IMap_obj::exists(this->opRightAssoc,op));
            				}
            				else {
HXLINE( 508)					_hx_tmp = false;
            				}
HXDLIN( 508)				if (_hx_tmp) {
HXLINE( 509)					return ::hscript::Expr_obj::EBinop(op2,this->makeBinop(op,e1,e2),e3);
            				}
            				else {
HXLINE( 511)					return ::hscript::Expr_obj::EBinop(op,e1,e);
            				}
            			}
            			break;
            			case (int)22: {
HXLINE( 512)				 ::hscript::Expr e4 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 512)				 ::hscript::Expr e31 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 512)				 ::hscript::Expr e21 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 513)				if (::haxe::IMap_obj::exists(this->opRightAssoc,op)) {
HXLINE( 514)					return ::hscript::Expr_obj::EBinop(op,e1,e);
            				}
            				else {
HXLINE( 516)					return ::hscript::Expr_obj::ETernary(this->makeBinop(op,e1,e21),e31,e4);
            				}
            			}
            			break;
            			default:{
HXLINE( 518)				return ::hscript::Expr_obj::EBinop(op,e1,e);
            			}
            		}
HXLINE( 506)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,makeBinop,return )

 ::hscript::Expr Parser_obj::parseStructure(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_526_parseStructure)
HXDLIN( 526)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("break",bf,24,ec,b8)) ){
HXLINE( 582)			return ::hscript::Expr_obj::EBreak_dyn();
HXDLIN( 582)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
HXLINE( 583)			return ::hscript::Expr_obj::EContinue_dyn();
HXDLIN( 583)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("do",8b,57,00,00)) ){
HXLINE( 565)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 566)			 ::hscript::Token tk = this->token();
HXLINE( 567)			if ((_hx_getEnumValueIndex(tk) == (int)2)) {
HXLINE( 567)				if ((tk->_hx_getString(0) != HX_("while",b1,43,bd,c9))) {
HXLINE( 570)					this->unexpected(tk);
            				}
            			}
            			else {
HXLINE( 570)				this->unexpected(tk);
            			}
HXLINE( 572)			 ::hscript::Expr econd = this->parseExpr();
HXLINE( 573)			return ::hscript::Expr_obj::EDoWhile(econd,e);
HXLINE( 564)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
HXLINE( 584)			return this->unexpected(::hscript::Token_obj::TId(id));
HXDLIN( 584)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("for",09,c7,4d,00)) ){
HXLINE( 575)			{
HXLINE( 575)				 ::hscript::Token t = this->token();
HXDLIN( 575)				if (hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 575)					this->unexpected(t);
            				}
            			}
HXLINE( 576)			::String vname = this->getIdent();
HXLINE( 577)			{
HXLINE( 577)				 ::hscript::Token t1 = this->token();
HXDLIN( 577)				if (!(::Type_obj::enumEq(t1,::hscript::Token_obj::TId(HX_("in",e5,5b,00,00))))) {
HXLINE( 577)					this->unexpected(t1);
            				}
            			}
HXLINE( 578)			 ::hscript::Expr eiter = this->parseExpr();
HXLINE( 579)			{
HXLINE( 579)				 ::hscript::Token t2 = this->token();
HXDLIN( 579)				if (hx::IsNotEq( t2,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 579)					this->unexpected(t2);
            				}
            			}
HXLINE( 580)			 ::hscript::Expr e1 = this->parseExpr();
HXLINE( 581)			return ::hscript::Expr_obj::EFor(vname,eiter,e1);
HXLINE( 574)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE( 589)			 ::hscript::Token tk1 = this->token();
HXLINE( 590)			::String name = null();
HXLINE( 591)			if ((_hx_getEnumValueIndex(tk1) == (int)2)) {
HXLINE( 592)				::String id1 = tk1->_hx_getString(0);
HXDLIN( 592)				name = id1;
            			}
            			else {
HXLINE( 593)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 593)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk1,_this->head);
            			}
HXLINE( 595)			 ::Dynamic inf = this->parseFunctionDecl();
HXLINE( 596)			 ::hscript::Expr e2 = inf->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic);
HXDLIN( 596)			 ::Dynamic pmax = (int)0;
HXDLIN( 596)			return ::hscript::Expr_obj::EFunction( ::Dynamic(inf->__Field(HX_("args",5d,8d,74,40),hx::paccDynamic)), ::Dynamic(inf->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic)),name, ::Dynamic(inf->__Field(HX_("ret",61,d9,56,00),hx::paccDynamic)));
HXLINE( 588)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE( 528)			{
HXLINE( 528)				 ::hscript::Token t3 = this->token();
HXDLIN( 528)				if (hx::IsNotEq( t3,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 528)					this->unexpected(t3);
            				}
            			}
HXLINE( 529)			 ::hscript::Expr cond = this->parseExpr();
HXLINE( 530)			{
HXLINE( 530)				 ::hscript::Token t4 = this->token();
HXDLIN( 530)				if (hx::IsNotEq( t4,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 530)					this->unexpected(t4);
            				}
            			}
HXLINE( 531)			 ::hscript::Expr e11 = this->parseExpr();
HXLINE( 532)			 ::hscript::Expr e21 = null();
HXLINE( 533)			bool semic = false;
HXLINE( 534)			 ::hscript::Token tk2 = this->token();
HXLINE( 535)			if (hx::IsEq( tk2,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 536)				semic = true;
HXLINE( 537)				tk2 = this->token();
            			}
HXLINE( 539)			if (::Type_obj::enumEq(tk2,::hscript::Token_obj::TId(HX_("else",b9,e4,14,43)))) {
HXLINE( 540)				e21 = this->parseExpr();
            			}
            			else {
HXLINE( 542)				{
HXLINE( 542)					 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 542)					_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk2,_this1->head);
            				}
HXLINE( 543)				if (semic) {
HXLINE( 543)					 ::haxe::ds::GenericStack_hscript_Token _this2 = this->tokens;
HXDLIN( 543)					_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,::hscript::Token_obj::TSemicolon_dyn(),_this2->head);
            				}
            			}
HXLINE( 545)			return ::hscript::Expr_obj::EIf(cond,e11,e21);
HXLINE( 527)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("inline",59,ca,3f,99)) ){
HXLINE( 586)			if (!(this->maybe(::hscript::Token_obj::TId(HX_("function",18,ab,52,14))))) {
HXLINE( 586)				this->unexpected(::hscript::Token_obj::TId(HX_("inline",59,ca,3f,99)));
            			}
HXLINE( 587)			return this->parseStructure(HX_("function",18,ab,52,14));
HXLINE( 585)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("new",60,d0,53,00)) ){
HXLINE( 603)			::Array< ::String > a = ::Array_obj< ::String >::__new();
HXLINE( 604)			a->push(this->getIdent());
HXLINE( 605)			bool next = true;
HXLINE( 606)			while(next){
HXLINE( 607)				 ::hscript::Token tk3 = this->token();
HXLINE( 608)				switch((int)(_hx_getEnumValueIndex(tk3))){
            					case (int)4: {
HXLINE( 612)						next = false;
            					}
            					break;
            					case (int)8: {
HXLINE( 610)						a->push(this->getIdent());
            					}
            					break;
            					default:{
HXLINE( 614)						this->unexpected(tk3);
            					}
            				}
            			}
HXLINE( 617)			::Array< ::Dynamic> args = this->parseExprList(::hscript::Token_obj::TPClose_dyn());
HXLINE( 618)			return ::hscript::Expr_obj::ENew(a->join(HX_(".",2e,00,00,00)),args);
HXLINE( 602)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("return",b0,a4,2d,09)) ){
HXLINE( 598)			 ::hscript::Token tk4 = this->token();
HXLINE( 599)			{
HXLINE( 599)				 ::haxe::ds::GenericStack_hscript_Token _this3 = this->tokens;
HXDLIN( 599)				_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk4,_this3->head);
            			}
HXLINE( 600)			 ::hscript::Expr e3;
HXDLIN( 600)			if (hx::IsEq( tk4,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 600)				e3 = null();
            			}
            			else {
HXLINE( 600)				e3 = this->parseExpr();
            			}
HXLINE( 601)			return ::hscript::Expr_obj::EReturn(e3);
HXLINE( 597)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("switch",f4,49,79,c5)) ){
HXLINE( 637)			 ::hscript::Expr e4 = this->parseExpr();
HXLINE( 638)			 ::hscript::Expr def = null();
HXDLIN( 638)			::Array< ::Dynamic> cases = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 639)			{
HXLINE( 639)				 ::hscript::Token t5 = this->token();
HXDLIN( 639)				if (hx::IsNotEq( t5,::hscript::Token_obj::TBrOpen_dyn() )) {
HXLINE( 639)					this->unexpected(t5);
            				}
            			}
HXLINE( 640)			while(true){
HXLINE( 641)				 ::hscript::Token tk5 = this->token();
HXLINE( 642)				switch((int)(_hx_getEnumValueIndex(tk5))){
            					case (int)2: {
HXLINE( 642)						::String _hx_switch_1 = tk5->_hx_getString(0);
            						if (  (_hx_switch_1==HX_("case",b0,1e,ba,41)) ){
HXLINE( 644)							 ::Dynamic c =  ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("expr",35,fd,1d,43),null())
            								->setFixed(1,HX_("values",e2,03,b7,4f),::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 645)							cases->push(c);
HXLINE( 646)							while(true){
HXLINE( 647)								 ::hscript::Expr e5 = this->parseExpr();
HXLINE( 648)								( (::Array< ::Dynamic>)(c->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->push(e5);
HXLINE( 649)								tk5 = this->token();
HXLINE( 650)								switch((int)(_hx_getEnumValueIndex(tk5))){
            									case (int)9: {
            									}
            									break;
            									case (int)14: {
HXLINE( 654)										goto _hx_goto_50;
            									}
            									break;
            									default:{
HXLINE( 656)										this->unexpected(tk5);
            									}
            								}
            							}
            							_hx_goto_50:;
HXLINE( 659)							::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 660)							while(true){
HXLINE( 661)								tk5 = this->token();
HXLINE( 662)								{
HXLINE( 662)									 ::haxe::ds::GenericStack_hscript_Token _this4 = this->tokens;
HXDLIN( 662)									_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk5,_this4->head);
            								}
HXLINE( 663)								switch((int)(_hx_getEnumValueIndex(tk5))){
            									case (int)2: {
HXLINE( 663)										::String _hx_switch_2 = tk5->_hx_getString(0);
            										if (  (_hx_switch_2==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_2==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 665)											goto _hx_goto_51;
HXDLIN( 665)											goto _hx_goto_52;
            										}
            										/* default */{
HXLINE( 667)											this->parseFullExpr(exprs);
            										}
            										_hx_goto_52:;
            									}
            									break;
            									case (int)7: {
HXLINE( 665)										goto _hx_goto_51;
            									}
            									break;
            									default:{
HXLINE( 667)										this->parseFullExpr(exprs);
            									}
            								}
            							}
            							_hx_goto_51:;
HXLINE( 670)							 ::hscript::Expr _hx_tmp;
HXDLIN( 670)							if ((exprs->length == (int)1)) {
HXLINE( 670)								_hx_tmp = exprs->__get((int)0).StaticCast<  ::hscript::Expr >();
            							}
            							else {
HXLINE( 672)								if ((exprs->length == (int)0)) {
HXLINE( 670)									_hx_tmp = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
            								}
            								else {
HXLINE( 675)									 ::hscript::Expr e6 = exprs->__get((exprs->length - (int)1)).StaticCast<  ::hscript::Expr >();
HXDLIN( 675)									 ::Dynamic pmax1 = (int)0;
HXLINE( 670)									_hx_tmp = ::hscript::Expr_obj::EBlock(exprs);
            								}
            							}
HXDLIN( 670)							c->__SetField(HX_("expr",35,fd,1d,43),_hx_tmp,hx::paccDynamic);
HXLINE( 643)							goto _hx_goto_49;
            						}
            						if (  (_hx_switch_1==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 677)							if (hx::IsNotNull( def )) {
HXLINE( 677)								this->unexpected(tk5);
            							}
HXLINE( 678)							{
HXLINE( 678)								 ::hscript::Token t6 = this->token();
HXDLIN( 678)								if (hx::IsNotEq( t6,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 678)									this->unexpected(t6);
            								}
            							}
HXLINE( 679)							::Array< ::Dynamic> exprs1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 680)							while(true){
HXLINE( 681)								tk5 = this->token();
HXLINE( 682)								{
HXLINE( 682)									 ::haxe::ds::GenericStack_hscript_Token _this5 = this->tokens;
HXDLIN( 682)									_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk5,_this5->head);
            								}
HXLINE( 683)								switch((int)(_hx_getEnumValueIndex(tk5))){
            									case (int)2: {
HXLINE( 683)										::String _hx_switch_3 = tk5->_hx_getString(0);
            										if (  (_hx_switch_3==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_3==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 685)											goto _hx_goto_53;
HXDLIN( 685)											goto _hx_goto_54;
            										}
            										/* default */{
HXLINE( 687)											this->parseFullExpr(exprs1);
            										}
            										_hx_goto_54:;
            									}
            									break;
            									case (int)7: {
HXLINE( 685)										goto _hx_goto_53;
            									}
            									break;
            									default:{
HXLINE( 687)										this->parseFullExpr(exprs1);
            									}
            								}
            							}
            							_hx_goto_53:;
HXLINE( 690)							if ((exprs1->length == (int)1)) {
HXLINE( 691)								def = exprs1->__get((int)0).StaticCast<  ::hscript::Expr >();
            							}
            							else {
HXLINE( 692)								if ((exprs1->length == (int)0)) {
HXLINE( 693)									def = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
            								}
            								else {
HXLINE( 695)									 ::hscript::Expr e7 = exprs1->__get((exprs1->length - (int)1)).StaticCast<  ::hscript::Expr >();
HXDLIN( 695)									 ::Dynamic pmax2 = (int)0;
HXDLIN( 695)									def = ::hscript::Expr_obj::EBlock(exprs1);
            								}
            							}
HXLINE( 676)							goto _hx_goto_49;
            						}
            						/* default */{
HXLINE( 699)							this->unexpected(tk5);
            						}
            						_hx_goto_49:;
            					}
            					break;
            					case (int)7: {
HXLINE( 697)						goto _hx_goto_48;
            					}
            					break;
            					default:{
HXLINE( 699)						this->unexpected(tk5);
            					}
            				}
            			}
            			_hx_goto_48:;
HXLINE( 702)			return ::hscript::Expr_obj::ESwitch(e4,cases,def);
HXLINE( 636)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("throw",26,5d,90,0f)) ){
HXLINE( 620)			 ::hscript::Expr e8 = this->parseExpr();
HXLINE( 621)			return ::hscript::Expr_obj::EThrow(e8);
HXLINE( 619)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("try",3b,69,58,00)) ){
HXLINE( 623)			 ::hscript::Expr e9 = this->parseExpr();
HXLINE( 624)			{
HXLINE( 624)				 ::hscript::Token t7 = this->token();
HXDLIN( 624)				if (!(::Type_obj::enumEq(t7,::hscript::Token_obj::TId(HX_("catch",3b,7c,21,41))))) {
HXLINE( 624)					this->unexpected(t7);
            				}
            			}
HXLINE( 625)			{
HXLINE( 625)				 ::hscript::Token t8 = this->token();
HXDLIN( 625)				if (hx::IsNotEq( t8,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 625)					this->unexpected(t8);
            				}
            			}
HXLINE( 626)			::String vname1 = this->getIdent();
HXLINE( 627)			{
HXLINE( 627)				 ::hscript::Token t9 = this->token();
HXDLIN( 627)				if (hx::IsNotEq( t9,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 627)					this->unexpected(t9);
            				}
            			}
HXLINE( 628)			 ::hscript::CType t10 = null();
HXLINE( 629)			if (this->allowTypes) {
HXLINE( 630)				t10 = this->parseType();
            			}
            			else {
HXLINE( 632)				 ::hscript::Token t11 = this->token();
HXDLIN( 632)				if (!(::Type_obj::enumEq(t11,::hscript::Token_obj::TId(HX_("Dynamic",5f,c7,66,03))))) {
HXLINE( 632)					this->unexpected(t11);
            				}
            			}
HXLINE( 633)			{
HXLINE( 633)				 ::hscript::Token t12 = this->token();
HXDLIN( 633)				if (hx::IsNotEq( t12,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 633)					this->unexpected(t12);
            				}
            			}
HXLINE( 634)			 ::hscript::Expr ec = this->parseExpr();
HXLINE( 635)			return ::hscript::Expr_obj::ETry(e9,vname1,t10,ec);
HXLINE( 622)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE( 547)			::String ident = this->getIdent();
HXLINE( 548)			 ::hscript::Token tk6 = this->token();
HXLINE( 549)			 ::hscript::CType t13 = null();
HXLINE( 550)			bool _hx_tmp1;
HXDLIN( 550)			if (hx::IsEq( tk6,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 550)				_hx_tmp1 = this->allowTypes;
            			}
            			else {
HXLINE( 550)				_hx_tmp1 = false;
            			}
HXDLIN( 550)			if (_hx_tmp1) {
HXLINE( 551)				t13 = this->parseType();
HXLINE( 552)				tk6 = this->token();
            			}
HXLINE( 554)			 ::hscript::Expr e10 = null();
HXLINE( 555)			if (::Type_obj::enumEq(tk6,::hscript::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE( 556)				e10 = this->parseExpr();
            			}
            			else {
HXLINE( 558)				 ::haxe::ds::GenericStack_hscript_Token _this6 = this->tokens;
HXDLIN( 558)				_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk6,_this6->head);
            			}
HXLINE( 559)			return ::hscript::Expr_obj::EVar(ident,t13,e10);
HXLINE( 546)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==HX_("while",b1,43,bd,c9)) ){
HXLINE( 561)			 ::hscript::Expr econd1 = this->parseExpr();
HXLINE( 562)			 ::hscript::Expr e12 = this->parseExpr();
HXLINE( 563)			return ::hscript::Expr_obj::EWhile(econd1,e12);
HXLINE( 560)			goto _hx_goto_46;
            		}
            		/* default */{
HXLINE( 704)			return null();
            		}
            		_hx_goto_46:;
HXLINE( 526)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseStructure,return )

 ::hscript::Expr Parser_obj::parseExprNext( ::hscript::Expr e1){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_708_parseExprNext)
HXLINE( 709)		 ::hscript::Token tk = this->token();
HXLINE( 710)		switch((int)(_hx_getEnumValueIndex(tk))){
            			case (int)3: {
HXLINE( 711)				::String op = tk->_hx_getString(0);
HXLINE( 712)				if (( (bool)(::haxe::IMap_obj::get(this->unops,op)) )) {
HXLINE( 713)					bool _hx_tmp;
HXDLIN( 713)					if (!(this->isBlock(e1))) {
HXLINE( 713)						if ((_hx_getEnumValueIndex(e1) == (int)3)) {
HXLINE( 713)							_hx_tmp = true;
            						}
            						else {
HXLINE( 713)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 713)						_hx_tmp = true;
            					}
HXDLIN( 713)					if (_hx_tmp) {
HXLINE( 714)						{
HXLINE( 714)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 714)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            						}
HXLINE( 715)						return e1;
            					}
HXLINE( 717)					return this->parseExprNext(::hscript::Expr_obj::EUnop(op,false,e1));
            				}
HXLINE( 719)				return this->makeBinop(op,e1,this->parseExpr());
            			}
            			break;
            			case (int)4: {
HXLINE( 724)				return this->parseExprNext(::hscript::Expr_obj::ECall(e1,this->parseExprList(::hscript::Token_obj::TPClose_dyn())));
            			}
            			break;
            			case (int)8: {
HXLINE( 721)				::String field = this->getIdent();
HXLINE( 722)				return this->parseExprNext(::hscript::Expr_obj::EField(e1,field));
            			}
            			break;
            			case (int)11: {
HXLINE( 726)				 ::hscript::Expr e2 = this->parseExpr();
HXLINE( 727)				{
HXLINE( 727)					 ::hscript::Token t = this->token();
HXDLIN( 727)					if (hx::IsNotEq( t,::hscript::Token_obj::TBkClose_dyn() )) {
HXLINE( 727)						this->unexpected(t);
            					}
            				}
HXLINE( 728)				return this->parseExprNext(::hscript::Expr_obj::EArray(e1,e2));
            			}
            			break;
            			case (int)13: {
HXLINE( 730)				 ::hscript::Expr e21 = this->parseExpr();
HXLINE( 731)				{
HXLINE( 731)					 ::hscript::Token t1 = this->token();
HXDLIN( 731)					if (hx::IsNotEq( t1,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 731)						this->unexpected(t1);
            					}
            				}
HXLINE( 732)				 ::hscript::Expr e3 = this->parseExpr();
HXLINE( 733)				return ::hscript::Expr_obj::ETernary(e1,e21,e3);
            			}
            			break;
            			default:{
HXLINE( 735)				{
HXLINE( 735)					 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 735)					_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this1->head);
            				}
HXLINE( 736)				return e1;
            			}
            		}
HXLINE( 710)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprNext,return )

 ::Dynamic Parser_obj::parseFunctionDecl(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_740_parseFunctionDecl)
HXLINE( 741)		{
HXLINE( 741)			 ::hscript::Token t = this->token();
HXDLIN( 741)			if (hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 741)				this->unexpected(t);
            			}
            		}
HXLINE( 742)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE( 743)		 ::hscript::Token tk = this->token();
HXLINE( 744)		if (hx::IsNotEq( tk,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 745)			bool done = false;
HXLINE( 746)			while(!(done)){
HXLINE( 747)				::String name = null();
HXDLIN( 747)				bool opt = false;
HXLINE( 748)				if ((_hx_getEnumValueIndex(tk) == (int)13)) {
HXLINE( 750)					opt = true;
HXLINE( 751)					tk = this->token();
            				}
HXLINE( 754)				if ((_hx_getEnumValueIndex(tk) == (int)2)) {
HXLINE( 755)					::String id = tk->_hx_getString(0);
HXDLIN( 755)					name = id;
            				}
            				else {
HXLINE( 756)					this->unexpected(tk);
            				}
HXLINE( 758)				 ::Dynamic arg =  ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("name",4b,72,ff,48),name));
HXLINE( 759)				args->push(arg);
HXLINE( 760)				if (opt) {
HXLINE( 760)					arg->__SetField(HX_("opt",33,9c,54,00),true,hx::paccDynamic);
            				}
HXLINE( 761)				if (this->allowTypes) {
HXLINE( 762)					if (this->maybe(::hscript::Token_obj::TDoubleDot_dyn())) {
HXLINE( 763)						arg->__SetField(HX_("t",74,00,00,00),this->parseType(),hx::paccDynamic);
            					}
HXLINE( 764)					if (this->maybe(::hscript::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE( 765)						arg->__SetField(HX_("value",71,7f,b8,31),this->parseExpr(),hx::paccDynamic);
            					}
            				}
HXLINE( 767)				tk = this->token();
HXLINE( 768)				switch((int)(_hx_getEnumValueIndex(tk))){
            					case (int)5: {
HXLINE( 772)						done = true;
            					}
            					break;
            					case (int)9: {
HXLINE( 770)						tk = this->token();
            					}
            					break;
            					default:{
HXLINE( 774)						this->unexpected(tk);
            					}
            				}
            			}
            		}
HXLINE( 778)		 ::hscript::CType ret = null();
HXLINE( 779)		if (this->allowTypes) {
HXLINE( 780)			tk = this->token();
HXLINE( 781)			if (hx::IsNotEq( tk,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 782)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 782)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
            			else {
HXLINE( 784)				ret = this->parseType();
            			}
            		}
HXLINE( 786)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("ret",61,d9,56,00),ret)
            			->setFixed(1,HX_("args",5d,8d,74,40),args)
            			->setFixed(2,HX_("body",a2,7a,1b,41),this->parseExpr()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFunctionDecl,return )

::Array< ::String > Parser_obj::parsePath(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_789_parsePath)
HXLINE( 790)		::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent());
HXLINE( 791)		while(true){
HXLINE( 792)			 ::hscript::Token t = this->token();
HXLINE( 793)			if (hx::IsNotEq( t,::hscript::Token_obj::TDot_dyn() )) {
HXLINE( 794)				{
HXLINE( 794)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 794)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            				}
HXLINE( 795)				goto _hx_goto_59;
            			}
HXLINE( 797)			path->push(this->getIdent());
            		}
            		_hx_goto_59:;
HXLINE( 799)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parsePath,return )

 ::hscript::CType Parser_obj::parseType(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_802_parseType)
HXLINE( 803)		 ::hscript::Token t = this->token();
HXLINE( 804)		switch((int)(_hx_getEnumValueIndex(t))){
            			case (int)2: {
HXLINE( 805)				::String v = t->_hx_getString(0);
HXLINE( 806)				{
HXLINE( 806)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 806)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            				}
HXLINE( 807)				::Array< ::String > path = this->parsePath();
HXLINE( 808)				::Array< ::Dynamic> params = null();
HXLINE( 809)				t = this->token();
HXLINE( 810)				if ((_hx_getEnumValueIndex(t) == (int)3)) {
HXLINE( 811)					::String op = t->_hx_getString(0);
HXLINE( 812)					if ((op == HX_("<",3c,00,00,00))) {
HXLINE( 813)						params = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 814)						while(true){
HXLINE( 815)							params->push(this->parseType());
HXLINE( 816)							t = this->token();
HXLINE( 817)							switch((int)(_hx_getEnumValueIndex(t))){
            								case (int)3: {
HXLINE( 819)									::String op1 = t->_hx_getString(0);
HXDLIN( 819)									{
HXLINE( 820)										if ((op1 == HX_(">",3e,00,00,00))) {
HXLINE( 820)											goto _hx_goto_61;
            										}
HXLINE( 821)										if (hx::IsEq( op1.charCodeAt((int)0),(int)62 )) {
HXLINE( 825)											{
HXLINE( 825)												 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 825)												 ::hscript::Token item = ::hscript::Token_obj::TOp(op1.substr((int)1,null()));
HXDLIN( 825)												_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,item,_this1->head);
            											}
HXLINE( 827)											goto _hx_goto_61;
            										}
            									}
            								}
            								break;
            								case (int)9: {
HXLINE( 818)									continue;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 831)							this->unexpected(t);
            						}
            						_hx_goto_61:;
            					}
            					else {
HXLINE( 834)						 ::haxe::ds::GenericStack_hscript_Token _this2 = this->tokens;
HXDLIN( 834)						_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this2->head);
            					}
            				}
            				else {
HXLINE( 836)					 ::haxe::ds::GenericStack_hscript_Token _this3 = this->tokens;
HXDLIN( 836)					_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this3->head);
            				}
HXLINE( 838)				return this->parseTypeNext(::hscript::CType_obj::CTPath(path,params));
            			}
            			break;
            			case (int)4: {
HXLINE( 840)				 ::hscript::CType t1 = this->parseType();
HXLINE( 841)				{
HXLINE( 841)					 ::hscript::Token t2 = this->token();
HXDLIN( 841)					if (hx::IsNotEq( t2,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 841)						this->unexpected(t2);
            					}
            				}
HXLINE( 842)				return this->parseTypeNext(::hscript::CType_obj::CTParent(t1));
            			}
            			break;
            			case (int)6: {
HXLINE( 844)				::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 845)				::Array< ::Dynamic> meta = null();
HXLINE( 846)				while(true){
HXLINE( 847)					t = this->token();
HXLINE( 848)					switch((int)(_hx_getEnumValueIndex(t))){
            						case (int)2: {
HXLINE( 848)							if ((t->_hx_getString(0) == HX_("var",e7,de,59,00))) {
HXLINE( 851)								::String name = this->getIdent();
HXLINE( 852)								{
HXLINE( 852)									 ::hscript::Token t3 = this->token();
HXDLIN( 852)									if (hx::IsNotEq( t3,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 852)										this->unexpected(t3);
            									}
            								}
HXLINE( 853)								fields->push( ::Dynamic(hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),this->parseType())
            									->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            									->setFixed(2,HX_("name",4b,72,ff,48),name)));
HXLINE( 854)								meta = null();
HXLINE( 855)								{
HXLINE( 855)									 ::hscript::Token t4 = this->token();
HXDLIN( 855)									if (hx::IsNotEq( t4,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 855)										this->unexpected(t4);
            									}
            								}
            							}
            							else {
HXLINE( 856)								::String name1 = t->_hx_getString(0);
HXDLIN( 856)								{
HXLINE( 857)									{
HXLINE( 857)										 ::hscript::Token t5 = this->token();
HXDLIN( 857)										if (hx::IsNotEq( t5,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 857)											this->unexpected(t5);
            										}
            									}
HXLINE( 858)									fields->push( ::Dynamic(hx::Anon_obj::Create(3)
            										->setFixed(0,HX_("t",74,00,00,00),this->parseType())
            										->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            										->setFixed(2,HX_("name",4b,72,ff,48),name1)));
HXLINE( 859)									t = this->token();
HXLINE( 860)									switch((int)(_hx_getEnumValueIndex(t))){
            										case (int)7: {
HXLINE( 862)											goto _hx_goto_62;
            										}
            										break;
            										case (int)9: {
            										}
            										break;
            										default:{
HXLINE( 863)											this->unexpected(t);
            										}
            									}
            								}
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 849)							goto _hx_goto_62;
            						}
            						break;
            						case (int)15: {
HXLINE( 865)							::String name2 = t->_hx_getString(0);
HXDLIN( 865)							{
HXLINE( 866)								if (hx::IsNull( meta )) {
HXLINE( 866)									meta = ::Array_obj< ::Dynamic>::__new(0);
            								}
HXLINE( 867)								meta->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("params",46,fb,7a,ed),this->parseMetaArgs())
            									->setFixed(1,HX_("name",4b,72,ff,48),name2)));
            							}
            						}
            						break;
            						default:{
HXLINE( 869)							this->unexpected(t);
            						}
            					}
            				}
            				_hx_goto_62:;
HXLINE( 872)				return this->parseTypeNext(::hscript::CType_obj::CTAnon(fields));
            			}
            			break;
            			default:{
HXLINE( 874)				return this->unexpected(t);
            			}
            		}
HXLINE( 804)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseType,return )

 ::hscript::CType Parser_obj::parseTypeNext( ::hscript::CType t){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_878_parseTypeNext)
HXLINE( 879)		 ::hscript::Token tk = this->token();
HXLINE( 880)		if ((_hx_getEnumValueIndex(tk) == (int)3)) {
HXLINE( 881)			::String op = tk->_hx_getString(0);
HXLINE( 882)			if ((op != HX_("->",71,27,00,00))) {
HXLINE( 883)				{
HXLINE( 883)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 883)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE( 884)				return t;
            			}
            		}
            		else {
HXLINE( 887)			{
HXLINE( 887)				 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 887)				_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this1->head);
            			}
HXLINE( 888)			return t;
            		}
HXLINE( 890)		 ::hscript::CType t2 = this->parseType();
HXLINE( 891)		if ((_hx_getEnumValueIndex(t2) == (int)1)) {
HXLINE( 892)			::Array< ::Dynamic> args = t2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 893)			args->unshift(t);
HXLINE( 894)			return t2;
            		}
            		else {
HXLINE( 896)			return ::hscript::CType_obj::CTFun(::Array_obj< ::Dynamic>::__new(1)->init(0,t),t2);
            		}
HXLINE( 891)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseTypeNext,return )

::Array< ::Dynamic> Parser_obj::parseExprList( ::hscript::Token etk){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_900_parseExprList)
HXLINE( 901)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE( 902)		 ::hscript::Token tk = this->token();
HXLINE( 903)		if (hx::IsEq( tk,etk )) {
HXLINE( 904)			return args;
            		}
HXLINE( 905)		{
HXLINE( 905)			 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 905)			_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            		}
HXLINE( 906)		while(true){
HXLINE( 907)			args->push(this->parseExpr());
HXLINE( 908)			tk = this->token();
HXLINE( 909)			if ((_hx_getEnumValueIndex(tk) != (int)9)) {
HXLINE( 912)				if (hx::IsEq( tk,etk )) {
HXLINE( 912)					goto _hx_goto_65;
            				}
HXLINE( 913)				this->unexpected(tk);
            			}
            		}
            		_hx_goto_65:;
HXLINE( 916)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprList,return )

::Array< ::Dynamic> Parser_obj::parseModule(::String content,::String __o_origin){
::String origin = __o_origin.Default(HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"));
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_921_parseModule)
HXLINE( 922)		this->initParser(origin);
HXLINE( 923)		this->input =  ::haxe::io::StringInput_obj::__alloc( HX_CTX ,content);
HXLINE( 924)		this->allowTypes = true;
HXLINE( 925)		this->allowMetadata = true;
HXLINE( 926)		::Array< ::Dynamic> decls = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 927)		while(true){
HXLINE( 928)			 ::hscript::Token tk = this->token();
HXLINE( 929)			if (hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE( 929)				goto _hx_goto_67;
            			}
HXLINE( 930)			{
HXLINE( 930)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 930)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 931)			decls->push(this->parseModuleDecl());
            		}
            		_hx_goto_67:;
HXLINE( 933)		return decls;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseModule,return )

::Array< ::Dynamic> Parser_obj::parseMetadata(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_936_parseMetadata)
HXLINE( 937)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 938)		while(true){
HXLINE( 939)			 ::hscript::Token tk = this->token();
HXLINE( 940)			if ((_hx_getEnumValueIndex(tk) == (int)15)) {
HXLINE( 941)				::String name = tk->_hx_getString(0);
HXLINE( 942)				meta->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("params",46,fb,7a,ed),this->parseMetaArgs())
            					->setFixed(1,HX_("name",4b,72,ff,48),name)));
            			}
            			else {
HXLINE( 944)				{
HXLINE( 944)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 944)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE( 945)				goto _hx_goto_69;
            			}
            		}
            		_hx_goto_69:;
HXLINE( 948)		return meta;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseMetadata,return )

 ::Dynamic Parser_obj::parseParams(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_951_parseParams)
HXLINE( 952)		if (this->maybe(::hscript::Token_obj::TOp(HX_("<",3c,00,00,00)))) {
HXLINE( 953)			HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidOp(HX_("Unsupported class type parameters",9d,ae,a3,50)));
            		}
HXLINE( 954)		return  ::Dynamic(hx::Anon_obj::Create(0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseParams,return )

 ::hscript::ModuleDecl Parser_obj::parseModuleDecl(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_957_parseModuleDecl)
HXLINE( 958)		::Array< ::Dynamic> meta = this->parseMetadata();
HXLINE( 959)		::String ident = this->getIdent();
HXLINE( 960)		bool isPrivate = false;
HXDLIN( 960)		bool isExtern = false;
HXLINE( 961)		while(true){
HXLINE( 962)			::String _hx_switch_0 = ident;
            			if (  (_hx_switch_0==HX_("extern",60,d5,1a,c7)) ){
HXLINE( 966)				isExtern = true;
HXDLIN( 966)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("private",03,2d,6f,89)) ){
HXLINE( 964)				isPrivate = true;
HXDLIN( 964)				goto _hx_goto_73;
            			}
            			/* default */{
HXLINE( 968)				goto _hx_goto_72;
            			}
            			_hx_goto_73:;
HXLINE( 970)			ident = this->getIdent();
            		}
            		_hx_goto_72:;
HXLINE( 972)		::String _hx_switch_1 = ident;
            		if (  (_hx_switch_1==HX_("class",38,78,58,48)) ){
HXLINE( 999)			::String name = this->getIdent();
HXLINE(1000)			 ::Dynamic params = this->parseParams();
HXLINE(1001)			 ::hscript::CType extend = null();
HXLINE(1002)			::Array< ::Dynamic> implement = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1004)			while(true){
HXLINE(1005)				 ::hscript::Token t = this->token();
HXLINE(1006)				if ((_hx_getEnumValueIndex(t) == (int)2)) {
HXLINE(1006)					::String _hx_switch_2 = t->_hx_getString(0);
            					if (  (_hx_switch_2==HX_("extends",59,cd,5c,70)) ){
HXLINE(1008)						extend = this->parseType();
HXDLIN(1008)						goto _hx_goto_76;
            					}
            					if (  (_hx_switch_2==HX_("implements",70,fd,43,a8)) ){
HXLINE(1010)						implement->push(this->parseType());
HXDLIN(1010)						goto _hx_goto_76;
            					}
            					/* default */{
HXLINE(1012)						{
HXLINE(1012)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1012)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            						}
HXLINE(1013)						goto _hx_goto_75;
            					}
            					_hx_goto_76:;
            				}
            				else {
HXLINE(1012)					{
HXLINE(1012)						 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN(1012)						_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this1->head);
            					}
HXLINE(1013)					goto _hx_goto_75;
            				}
            			}
            			_hx_goto_75:;
HXLINE(1017)			::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1018)			{
HXLINE(1018)				 ::hscript::Token t1 = this->token();
HXDLIN(1018)				if (hx::IsNotEq( t1,::hscript::Token_obj::TBrOpen_dyn() )) {
HXLINE(1018)					this->unexpected(t1);
            				}
            			}
HXLINE(1019)			while(!(this->maybe(::hscript::Token_obj::TBrClose_dyn()))){
HXLINE(1020)				fields->push(this->parseField());
            			}
HXLINE(1022)			return ::hscript::ModuleDecl_obj::DClass( ::Dynamic(hx::Anon_obj::Create(8)
            				->setFixed(0,HX_("fields",79,8e,8e,80),fields)
            				->setFixed(1,HX_("isPrivate",39,aa,6d,8d),isPrivate)
            				->setFixed(2,HX_("implement",a3,71,3f,af),implement)
            				->setFixed(3,HX_("extend",da,d1,1a,c7),extend)
            				->setFixed(4,HX_("params",46,fb,7a,ed),params)
            				->setFixed(5,HX_("isExtern",ea,70,84,1f),isExtern)
            				->setFixed(6,HX_("meta",c5,4a,59,48),meta)
            				->setFixed(7,HX_("name",4b,72,ff,48),name)));
HXLINE( 998)			goto _hx_goto_74;
            		}
            		if (  (_hx_switch_1==HX_("import",65,a1,82,08)) ){
HXLINE( 978)			::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent());
HXLINE( 979)			bool star = false;
HXLINE( 980)			while(true){
HXLINE( 981)				 ::hscript::Token t2 = this->token();
HXLINE( 982)				if (hx::IsNotEq( t2,::hscript::Token_obj::TDot_dyn() )) {
HXLINE( 983)					{
HXLINE( 983)						 ::haxe::ds::GenericStack_hscript_Token _this2 = this->tokens;
HXDLIN( 983)						_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t2,_this2->head);
            					}
HXLINE( 984)					goto _hx_goto_78;
            				}
HXLINE( 986)				t2 = this->token();
HXLINE( 987)				switch((int)(_hx_getEnumValueIndex(t2))){
            					case (int)2: {
HXLINE( 988)						::String id = t2->_hx_getString(0);
HXLINE( 989)						path->push(id);
            					}
            					break;
            					case (int)3: {
HXLINE( 987)						if ((t2->_hx_getString(0) == HX_("*",2a,00,00,00))) {
HXLINE( 991)							star = true;
            						}
            						else {
HXLINE( 993)							this->unexpected(t2);
            						}
            					}
            					break;
            					default:{
HXLINE( 993)						this->unexpected(t2);
            					}
            				}
            			}
            			_hx_goto_78:;
HXLINE( 996)			{
HXLINE( 996)				 ::hscript::Token t3 = this->token();
HXDLIN( 996)				if (hx::IsNotEq( t3,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 996)					this->unexpected(t3);
            				}
            			}
HXLINE( 997)			return ::hscript::ModuleDecl_obj::DImport(path,star);
HXLINE( 977)			goto _hx_goto_74;
            		}
            		if (  (_hx_switch_1==HX_("package",86,2b,b1,41)) ){
HXLINE( 974)			::Array< ::String > path1 = this->parsePath();
HXLINE( 975)			{
HXLINE( 975)				 ::hscript::Token t4 = this->token();
HXDLIN( 975)				if (hx::IsNotEq( t4,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 975)					this->unexpected(t4);
            				}
            			}
HXLINE( 976)			return ::hscript::ModuleDecl_obj::DPackage(path1);
HXLINE( 973)			goto _hx_goto_74;
            		}
            		if (  (_hx_switch_1==HX_("typedef",4b,37,d8,f8)) ){
HXLINE(1033)			::String name1 = this->getIdent();
HXLINE(1034)			 ::Dynamic params1 = this->parseParams();
HXLINE(1035)			{
HXLINE(1035)				 ::hscript::Token t5 = this->token();
HXDLIN(1035)				if (!(::Type_obj::enumEq(t5,::hscript::Token_obj::TOp(HX_("=",3d,00,00,00))))) {
HXLINE(1035)					this->unexpected(t5);
            				}
            			}
HXLINE(1036)			 ::hscript::CType t6 = this->parseType();
HXLINE(1037)			return ::hscript::ModuleDecl_obj::DTypedef( ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("isPrivate",39,aa,6d,8d),isPrivate)
            				->setFixed(1,HX_("params",46,fb,7a,ed),params1)
            				->setFixed(2,HX_("t",74,00,00,00),t6)
            				->setFixed(3,HX_("meta",c5,4a,59,48),meta)
            				->setFixed(4,HX_("name",4b,72,ff,48),name1)));
HXLINE(1032)			goto _hx_goto_74;
            		}
            		/* default */{
HXLINE(1045)			this->unexpected(::hscript::Token_obj::TId(ident));
            		}
            		_hx_goto_74:;
HXLINE(1047)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseModuleDecl,return )

 ::Dynamic Parser_obj::parseField(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1050_parseField)
HXLINE(1051)		::Array< ::Dynamic> meta = this->parseMetadata();
HXLINE(1052)		::Array< ::Dynamic> access = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1053)		while(true){
HXLINE(1054)			::String id = this->getIdent();
HXLINE(1055)			::String _hx_switch_0 = id;
            			if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE(1069)				::String name = this->getIdent();
HXLINE(1070)				 ::Dynamic inf = this->parseFunctionDecl();
HXLINE(1071)				return  ::Dynamic(hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("access",a4,95,06,0b),access)
            					->setFixed(1,HX_("kind",54,e1,09,47),::hscript::FieldKind_obj::KFunction( ::Dynamic(hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("ret",61,d9,56,00), ::Dynamic(inf->__Field(HX_("ret",61,d9,56,00),hx::paccDynamic)))
            						->setFixed(1,HX_("args",5d,8d,74,40), ::Dynamic(inf->__Field(HX_("args",5d,8d,74,40),hx::paccDynamic)))
            						->setFixed(2,HX_("expr",35,fd,1d,43), ::Dynamic(inf->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic))))))
            					->setFixed(2,HX_("meta",c5,4a,59,48),meta)
            					->setFixed(3,HX_("name",4b,72,ff,48),name));
HXLINE(1068)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("inline",59,ca,3f,99)) ){
HXLINE(1063)				access->push(::hscript::FieldAccess_obj::AInline_dyn());
HXDLIN(1063)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("macro",0c,70,16,03)) ){
HXLINE(1067)				access->push(::hscript::FieldAccess_obj::AMacro_dyn());
HXDLIN(1067)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("override",4c,22,28,49)) ){
HXLINE(1057)				access->push(::hscript::FieldAccess_obj::AOverride_dyn());
HXDLIN(1057)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("private",03,2d,6f,89)) ){
HXLINE(1061)				access->push(::hscript::FieldAccess_obj::APrivate_dyn());
HXDLIN(1061)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("public",a9,80,f3,66)) ){
HXLINE(1059)				access->push(::hscript::FieldAccess_obj::APublic_dyn());
HXDLIN(1059)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("static",ae,dc,fb,05)) ){
HXLINE(1065)				access->push(::hscript::FieldAccess_obj::AStatic_dyn());
HXDLIN(1065)				goto _hx_goto_81;
            			}
            			if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE(1082)				::String name1 = this->getIdent();
HXLINE(1083)				::String get = null();
HXDLIN(1083)				::String set = null();
HXLINE(1084)				if (this->maybe(::hscript::Token_obj::TPOpen_dyn())) {
HXLINE(1085)					get = this->getIdent();
HXLINE(1086)					{
HXLINE(1086)						 ::hscript::Token t = this->token();
HXDLIN(1086)						if (hx::IsNotEq( t,::hscript::Token_obj::TComma_dyn() )) {
HXLINE(1086)							this->unexpected(t);
            						}
            					}
HXLINE(1087)					set = this->getIdent();
HXLINE(1088)					{
HXLINE(1088)						 ::hscript::Token t1 = this->token();
HXDLIN(1088)						if (hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE(1088)							this->unexpected(t1);
            						}
            					}
            				}
HXLINE(1090)				 ::hscript::CType type;
HXDLIN(1090)				if (this->maybe(::hscript::Token_obj::TDoubleDot_dyn())) {
HXLINE(1090)					type = this->parseType();
            				}
            				else {
HXLINE(1090)					type = null();
            				}
HXLINE(1091)				 ::hscript::Expr expr;
HXDLIN(1091)				if (this->maybe(::hscript::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE(1091)					expr = this->parseExpr();
            				}
            				else {
HXLINE(1091)					expr = null();
            				}
HXLINE(1093)				if (hx::IsNotNull( expr )) {
HXLINE(1094)					if (this->isBlock(expr)) {
HXLINE(1095)						this->maybe(::hscript::Token_obj::TSemicolon_dyn());
            					}
            					else {
HXLINE(1097)						 ::hscript::Token t2 = this->token();
HXDLIN(1097)						if (hx::IsNotEq( t2,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE(1097)							this->unexpected(t2);
            						}
            					}
            				}
            				else {
HXLINE(1098)					bool _hx_tmp;
HXDLIN(1098)					if (hx::IsNotNull( type )) {
HXLINE(1098)						if ((_hx_getEnumValueIndex(type) == (int)2)) {
HXLINE(1098)							_hx_tmp = true;
            						}
            						else {
HXLINE(1098)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE(1098)						_hx_tmp = false;
            					}
HXDLIN(1098)					if (_hx_tmp) {
HXLINE(1099)						this->maybe(::hscript::Token_obj::TSemicolon_dyn());
            					}
            					else {
HXLINE(1101)						 ::hscript::Token t3 = this->token();
HXDLIN(1101)						if (hx::IsNotEq( t3,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE(1101)							this->unexpected(t3);
            						}
            					}
            				}
HXLINE(1103)				return  ::Dynamic(hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("access",a4,95,06,0b),access)
            					->setFixed(1,HX_("kind",54,e1,09,47),::hscript::FieldKind_obj::KVar( ::Dynamic(hx::Anon_obj::Create(4)
            						->setFixed(0,HX_("get",96,80,4e,00),get)
            						->setFixed(1,HX_("set",a2,9b,57,00),set)
            						->setFixed(2,HX_("expr",35,fd,1d,43),expr)
            						->setFixed(3,HX_("type",ba,f2,08,4d),type))))
            					->setFixed(2,HX_("meta",c5,4a,59,48),meta)
            					->setFixed(3,HX_("name",4b,72,ff,48),name1));
HXLINE(1081)				goto _hx_goto_81;
            			}
            			/* default */{
HXLINE(1115)				this->unexpected(::hscript::Token_obj::TId(id));
            			}
            			_hx_goto_81:;
            		}
HXLINE(1053)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseField,return )

void Parser_obj::incPos(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1123_incPos)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,incPos,(void))

int Parser_obj::readChar(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1131_readChar)
HXDLIN(1131)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXDLIN(1131)			return this->input->readByte();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXDLIN(1131)				return (int)0;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(1131)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readChar,return )

::String Parser_obj::readString(int until){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1134_readString)
HXLINE(1135)		int c = (int)0;
HXLINE(1136)		 ::haxe::io::BytesOutput b =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE(1137)		bool esc = false;
HXLINE(1138)		int old = this->line;
HXLINE(1139)		 ::haxe::io::Input s = this->input;
HXLINE(1143)		while(true){
HXLINE(1144)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1146)				c = s->readByte();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE(1148)					this->line = old;
HXLINE(1149)					HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedString_dyn());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1151)			if (esc) {
HXLINE(1152)				esc = false;
HXLINE(1153)				switch((int)(c)){
            					case (int)34: case (int)39: case (int)92: {
HXLINE(1157)						b->writeByte(c);
            					}
            					break;
            					case (int)47: {
HXLINE(1158)						if (this->allowJSON) {
HXLINE(1158)							b->writeByte(c);
            						}
            						else {
HXLINE(1158)							this->invalidChar(c);
            						}
            					}
            					break;
            					case (int)110: {
HXLINE(1154)						b->writeByte((int)10);
            					}
            					break;
            					case (int)114: {
HXLINE(1155)						b->writeByte((int)13);
            					}
            					break;
            					case (int)116: {
HXLINE(1156)						b->writeByte((int)9);
            					}
            					break;
            					case (int)117: {
HXLINE(1160)						if (!(this->allowJSON)) {
HXLINE(1160)							this->invalidChar(c);
            						}
HXLINE(1161)						::String code = null();
HXLINE(1162)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1167)							code = s->readString((int)4);
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e1 = _hx_e;
HXLINE(1169)								this->line = old;
HXLINE(1170)								HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedString_dyn());
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE(1172)						int k = (int)0;
HXLINE(1173)						{
HXLINE(1173)							int _g = (int)0;
HXDLIN(1173)							while((_g < (int)4)){
HXLINE(1173)								_g = (_g + (int)1);
HXDLIN(1173)								int i = (_g - (int)1);
HXLINE(1174)								k = ((int)k << (int)(int)4);
HXLINE(1175)								 ::Dynamic _hx_char = code.charCodeAt(i);
HXLINE(1176)								if (hx::IsNull( _hx_char )) {
HXLINE(1184)									this->invalidChar(_hx_char);
            								}
            								else {
HXLINE(1176)									 ::Dynamic _hx_switch_0 = _hx_char;
            									if (  (_hx_switch_0==(int)48) ||  (_hx_switch_0==(int)49) ||  (_hx_switch_0==(int)50) ||  (_hx_switch_0==(int)51) ||  (_hx_switch_0==(int)52) ||  (_hx_switch_0==(int)53) ||  (_hx_switch_0==(int)54) ||  (_hx_switch_0==(int)55) ||  (_hx_switch_0==(int)56) ||  (_hx_switch_0==(int)57) ){
HXLINE(1178)										k = (k + (_hx_char - (int)48));
HXDLIN(1178)										goto _hx_goto_87;
            									}
            									if (  (_hx_switch_0==(int)65) ||  (_hx_switch_0==(int)66) ||  (_hx_switch_0==(int)67) ||  (_hx_switch_0==(int)68) ||  (_hx_switch_0==(int)69) ||  (_hx_switch_0==(int)70) ){
HXLINE(1180)										k = (k + (_hx_char - (int)55));
HXDLIN(1180)										goto _hx_goto_87;
            									}
            									if (  (_hx_switch_0==(int)97) ||  (_hx_switch_0==(int)98) ||  (_hx_switch_0==(int)99) ||  (_hx_switch_0==(int)100) ||  (_hx_switch_0==(int)101) ||  (_hx_switch_0==(int)102) ){
HXLINE(1182)										k = (k + (_hx_char - (int)87));
HXDLIN(1182)										goto _hx_goto_87;
            									}
            									/* default */{
HXLINE(1184)										this->invalidChar(_hx_char);
            									}
            									_hx_goto_87:;
            								}
            							}
            						}
HXLINE(1188)						if ((k <= (int)127)) {
HXLINE(1189)							b->writeByte(k);
            						}
            						else {
HXLINE(1190)							if ((k <= (int)2047)) {
HXLINE(1191)								b->writeByte(((int)(int)192 | (int)((int)k >> (int)(int)6)));
HXLINE(1192)								b->writeByte(((int)(int)128 | (int)((int)k & (int)(int)63)));
            							}
            							else {
HXLINE(1194)								b->writeByte(((int)(int)224 | (int)((int)k >> (int)(int)12)));
HXLINE(1195)								b->writeByte(((int)(int)128 | (int)((int)((int)k >> (int)(int)6) & (int)(int)63)));
HXLINE(1196)								b->writeByte(((int)(int)128 | (int)((int)k & (int)(int)63)));
            							}
            						}
            					}
            					break;
            					default:{
HXLINE(1198)						this->invalidChar(c);
            					}
            				}
            			}
            			else {
HXLINE(1200)				if ((c == (int)92)) {
HXLINE(1201)					esc = true;
            				}
            				else {
HXLINE(1202)					if ((c == until)) {
HXLINE(1203)						goto _hx_goto_85;
            					}
            					else {
HXLINE(1205)						if ((c == (int)10)) {
HXLINE(1205)							this->line++;
            						}
HXLINE(1206)						b->writeByte(c);
            					}
            				}
            			}
            		}
            		_hx_goto_85:;
HXLINE(1209)		return b->getBytes()->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,readString,return )

 ::hscript::Token Parser_obj::token(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1212_token)
HXLINE(1230)		if (hx::IsNotNull( this->tokens->head )) {
HXLINE(1231)			 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1231)			 ::haxe::ds::GenericCell_hscript_Token k = _this->head;
HXDLIN(1231)			if (hx::IsNull( k )) {
HXLINE(1231)				return null();
            			}
            			else {
HXLINE(1231)				_this->head = k->next;
HXDLIN(1231)				return k->elt;
            			}
            		}
HXLINE(1233)		int _hx_char;
HXLINE(1234)		if ((this->_hx_char < (int)0)) {
HXLINE(1235)			_hx_char = this->readChar();
            		}
            		else {
HXLINE(1237)			_hx_char = this->_hx_char;
HXLINE(1238)			this->_hx_char = (int)-1;
            		}
HXLINE(1240)		while(true){
HXLINE(1241)			switch((int)(_hx_char)){
            				case (int)0: {
HXLINE(1242)					return ::hscript::Token_obj::TEof_dyn();
            				}
            				break;
            				case (int)10: {
HXLINE(1247)					this->line++;
            				}
            				break;
            				case (int)9: case (int)13: case (int)32: {
            				}
            				break;
            				case (int)35: {
HXLINE(1395)					_hx_char = this->readChar();
HXLINE(1396)					if (this->idents->__get(_hx_char)) {
HXLINE(1397)						::String id = ::String::fromCharCode(_hx_char);
HXLINE(1398)						while(true){
HXLINE(1399)							_hx_char = this->readChar();
HXLINE(1400)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1401)								this->_hx_char = _hx_char;
HXLINE(1402)								return this->preprocess(id);
            							}
HXLINE(1404)							id = (id + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1407)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)34: case (int)39: {
HXLINE(1369)					return ::hscript::Token_obj::TConst(::hscript::Const_obj::CString(this->readString(_hx_char)));
            				}
            				break;
            				case (int)40: {
HXLINE(1336)					return ::hscript::Token_obj::TPOpen_dyn();
            				}
            				break;
            				case (int)41: {
HXLINE(1337)					return ::hscript::Token_obj::TPClose_dyn();
            				}
            				break;
            				case (int)44: {
HXLINE(1338)					return ::hscript::Token_obj::TComma_dyn();
            				}
            				break;
            				case (int)46: {
HXLINE(1340)					_hx_char = this->readChar();
HXLINE(1341)					switch((int)(_hx_char)){
            						case (int)46: {
HXLINE(1357)							_hx_char = this->readChar();
HXLINE(1358)							if ((_hx_char != (int)46)) {
HXLINE(1359)								this->invalidChar(_hx_char);
            							}
HXLINE(1360)							return ::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00));
            						}
            						break;
            						case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1343)							int n = (_hx_char - (int)48);
HXLINE(1344)							int exp = (int)1;
HXLINE(1345)							while(true){
HXLINE(1346)								_hx_char = this->readChar();
HXLINE(1347)								exp = (exp * (int)10);
HXLINE(1348)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1350)										n = ((n * (int)10) + (_hx_char - (int)48));
            									}
            									break;
            									default:{
HXLINE(1352)										this->_hx_char = _hx_char;
HXLINE(1353)										return ::hscript::Token_obj::TConst(::hscript::Const_obj::CFloat(((Float)n / (Float)exp)));
            									}
            								}
            							}
            						}
            						break;
            						default:{
HXLINE(1362)							this->_hx_char = _hx_char;
HXLINE(1363)							return ::hscript::Token_obj::TDot_dyn();
            						}
            					}
            				}
            				break;
            				case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1252)					Float n1 = ((_hx_char - (int)48) * ((Float)1.0));
HXLINE(1253)					Float exp1 = ((Float)0.);
HXLINE(1254)					while(true){
HXLINE(1255)						_hx_char = this->readChar();
HXLINE(1256)						exp1 = (exp1 * (int)10);
HXLINE(1257)						switch((int)(_hx_char)){
            							case (int)46: {
HXLINE(1278)								if ((exp1 > (int)0)) {
HXLINE(1280)									bool _hx_tmp;
HXDLIN(1280)									if ((exp1 == (int)10)) {
HXLINE(1280)										_hx_tmp = (this->readChar() == (int)46);
            									}
            									else {
HXLINE(1280)										_hx_tmp = false;
            									}
HXDLIN(1280)									if (_hx_tmp) {
HXLINE(1281)										{
HXLINE(1281)											 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN(1281)											_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00)),_this1->head);
            										}
HXLINE(1282)										int i = ::Std_obj::_hx_int(n1);
HXLINE(1283)										 ::hscript::Const _hx_tmp1;
HXDLIN(1283)										if ((i == n1)) {
HXLINE(1283)											_hx_tmp1 = ::hscript::Const_obj::CInt(i);
            										}
            										else {
HXLINE(1283)											_hx_tmp1 = ::hscript::Const_obj::CFloat(n1);
            										}
HXDLIN(1283)										return ::hscript::Token_obj::TConst(_hx_tmp1);
            									}
HXLINE(1285)									this->invalidChar(_hx_char);
            								}
HXLINE(1287)								exp1 = ((Float)1.);
            							}
            							break;
            							case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1259)								n1 = ((n1 * (int)10) + (_hx_char - (int)48));
            							}
            							break;
            							case (int)69: case (int)101: {
HXLINE(1261)								 ::hscript::Token tk = this->token();
HXLINE(1262)								 ::Dynamic pow = null();
HXLINE(1263)								switch((int)(_hx_getEnumValueIndex(tk))){
            									case (int)1: {
HXLINE(1263)										if ((_hx_getEnumValueIndex(tk->_hx_getObject(0).StaticCast<  ::hscript::Const >()) == (int)0)) {
HXLINE(1264)											int e = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >()->_hx_getInt(0);
HXDLIN(1264)											pow = e;
            										}
            										else {
HXLINE(1272)											 ::haxe::ds::GenericStack_hscript_Token _this2 = this->tokens;
HXDLIN(1272)											_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this2->head);
            										}
            									}
            									break;
            									case (int)3: {
HXLINE(1263)										if ((tk->_hx_getString(0) == HX_("-",2d,00,00,00))) {
HXLINE(1266)											tk = this->token();
HXLINE(1267)											if ((_hx_getEnumValueIndex(tk) == (int)1)) {
HXLINE(1267)												if ((_hx_getEnumValueIndex(tk->_hx_getObject(0).StaticCast<  ::hscript::Const >()) == (int)0)) {
HXLINE(1268)													int e1 = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >()->_hx_getInt(0);
HXDLIN(1268)													pow = -(e1);
            												}
            												else {
HXLINE(1269)													 ::haxe::ds::GenericStack_hscript_Token _this3 = this->tokens;
HXDLIN(1269)													_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this3->head);
            												}
            											}
            											else {
HXLINE(1269)												 ::haxe::ds::GenericStack_hscript_Token _this4 = this->tokens;
HXDLIN(1269)												_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this4->head);
            											}
            										}
            										else {
HXLINE(1272)											 ::haxe::ds::GenericStack_hscript_Token _this5 = this->tokens;
HXDLIN(1272)											_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this5->head);
            										}
            									}
            									break;
            									default:{
HXLINE(1272)										 ::haxe::ds::GenericStack_hscript_Token _this6 = this->tokens;
HXDLIN(1272)										_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this6->head);
            									}
            								}
HXLINE(1274)								if (hx::IsNull( pow )) {
HXLINE(1275)									this->invalidChar(_hx_char);
            								}
HXLINE(1276)								return ::hscript::Token_obj::TConst(::hscript::Const_obj::CFloat(((((Float)::Math_obj::pow((int)10,pow) / (Float)exp1) * n1) * (int)10)));
            							}
            							break;
            							case (int)120: {
HXLINE(1289)								bool _hx_tmp2;
HXDLIN(1289)								if (!((n1 > (int)0))) {
HXLINE(1289)									_hx_tmp2 = (exp1 > (int)0);
            								}
            								else {
HXLINE(1289)									_hx_tmp2 = true;
            								}
HXDLIN(1289)								if (_hx_tmp2) {
HXLINE(1290)									this->invalidChar(_hx_char);
            								}
HXLINE(1293)								int n2 = (int)0;
HXLINE(1294)								while(true){
HXLINE(1295)									_hx_char = this->readChar();
HXLINE(1296)									switch((int)(_hx_char)){
            										case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1298)											n2 = ((((int)n2 << (int)(int)4) + _hx_char) - (int)48);
            										}
            										break;
            										case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE(1300)											n2 = (((int)n2 << (int)(int)4) + (_hx_char - (int)55));
            										}
            										break;
            										case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE(1302)											n2 = (((int)n2 << (int)(int)4) + (_hx_char - (int)87));
            										}
            										break;
            										default:{
HXLINE(1304)											this->_hx_char = _hx_char;
HXLINE(1305)											return ::hscript::Token_obj::TConst(::hscript::Const_obj::CInt(n2));
            										}
            									}
            								}
            							}
            							break;
            							default:{
HXLINE(1330)								this->_hx_char = _hx_char;
HXLINE(1331)								int i1 = ::Std_obj::_hx_int(n1);
HXLINE(1332)								 ::hscript::Const _hx_tmp3;
HXDLIN(1332)								if ((exp1 > (int)0)) {
HXLINE(1332)									_hx_tmp3 = ::hscript::Const_obj::CFloat(((Float)(n1 * (int)10) / (Float)exp1));
            								}
            								else {
HXLINE(1332)									if ((i1 == n1)) {
HXLINE(1332)										_hx_tmp3 = ::hscript::Const_obj::CInt(i1);
            									}
            									else {
HXLINE(1332)										_hx_tmp3 = ::hscript::Const_obj::CFloat(n1);
            									}
            								}
HXDLIN(1332)								return ::hscript::Token_obj::TConst(_hx_tmp3);
            							}
            						}
            					}
            				}
            				break;
            				case (int)58: {
HXLINE(1371)					return ::hscript::Token_obj::TDoubleDot_dyn();
            				}
            				break;
            				case (int)59: {
HXLINE(1335)					return ::hscript::Token_obj::TSemicolon_dyn();
            				}
            				break;
            				case (int)61: {
HXLINE(1373)					_hx_char = this->readChar();
HXLINE(1374)					if ((_hx_char == (int)61)) {
HXLINE(1375)						return ::hscript::Token_obj::TOp(HX_("==",60,35,00,00));
            					}
            					else {
HXLINE(1376)						if ((_hx_char == (int)62)) {
HXLINE(1377)							return ::hscript::Token_obj::TOp(HX_("=>",61,35,00,00));
            						}
            					}
HXLINE(1378)					this->_hx_char = _hx_char;
HXLINE(1379)					return ::hscript::Token_obj::TOp(HX_("=",3d,00,00,00));
            				}
            				break;
            				case (int)63: {
HXLINE(1370)					return ::hscript::Token_obj::TQuestion_dyn();
            				}
            				break;
            				case (int)64: {
HXLINE(1381)					_hx_char = this->readChar();
HXLINE(1382)					bool _hx_tmp4;
HXDLIN(1382)					if (!(this->idents->__get(_hx_char))) {
HXLINE(1382)						_hx_tmp4 = (_hx_char == (int)58);
            					}
            					else {
HXLINE(1382)						_hx_tmp4 = true;
            					}
HXDLIN(1382)					if (_hx_tmp4) {
HXLINE(1383)						::String id1 = ::String::fromCharCode(_hx_char);
HXLINE(1384)						while(true){
HXLINE(1385)							_hx_char = this->readChar();
HXLINE(1386)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1387)								this->_hx_char = _hx_char;
HXLINE(1388)								return ::hscript::Token_obj::TMeta(id1);
            							}
HXLINE(1390)							id1 = (id1 + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1393)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)91: {
HXLINE(1367)					return ::hscript::Token_obj::TBkOpen_dyn();
            				}
            				break;
            				case (int)93: {
HXLINE(1368)					return ::hscript::Token_obj::TBkClose_dyn();
            				}
            				break;
            				case (int)123: {
HXLINE(1365)					return ::hscript::Token_obj::TBrOpen_dyn();
            				}
            				break;
            				case (int)125: {
HXLINE(1366)					return ::hscript::Token_obj::TBrClose_dyn();
            				}
            				break;
            				default:{
HXLINE(1409)					if (this->ops->__get(_hx_char)) {
HXLINE(1410)						::String op = ::String::fromCharCode(_hx_char);
HXLINE(1411)						int prev = (int)-1;
HXLINE(1412)						while(true){
HXLINE(1413)							_hx_char = this->readChar();
HXLINE(1414)							bool _hx_tmp5;
HXDLIN(1414)							if (!(!(this->ops->__get(_hx_char)))) {
HXLINE(1414)								_hx_tmp5 = (prev == (int)61);
            							}
            							else {
HXLINE(1414)								_hx_tmp5 = true;
            							}
HXDLIN(1414)							if (_hx_tmp5) {
HXLINE(1415)								if (hx::IsEq( op.charCodeAt((int)0),(int)47 )) {
HXLINE(1416)									return this->tokenComment(op,_hx_char);
            								}
HXLINE(1417)								this->_hx_char = _hx_char;
HXLINE(1418)								return ::hscript::Token_obj::TOp(op);
            							}
HXLINE(1420)							prev = _hx_char;
HXLINE(1421)							op = (op + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1424)					if (this->idents->__get(_hx_char)) {
HXLINE(1425)						::String id2 = ::String::fromCharCode(_hx_char);
HXLINE(1426)						while(true){
HXLINE(1427)							_hx_char = this->readChar();
HXLINE(1428)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1429)								this->_hx_char = _hx_char;
HXLINE(1430)								return ::hscript::Token_obj::TId(id2);
            							}
HXLINE(1432)							id2 = (id2 + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1435)					this->invalidChar(_hx_char);
            				}
            			}
HXLINE(1437)			_hx_char = this->readChar();
            		}
HXLINE(1240)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,token,return )

 ::Dynamic Parser_obj::preprocValue(::String id){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1443_preprocValue)
HXDLIN(1443)		return this->preprocesorValues->get(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,preprocValue,return )

 ::hscript::Expr Parser_obj::parsePreproCond(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1448_parsePreproCond)
HXLINE(1449)		 ::hscript::Token tk = this->token();
HXLINE(1450)		switch((int)(_hx_getEnumValueIndex(tk))){
            			case (int)2: {
HXLINE(1454)				::String id = tk->_hx_getString(0);
HXLINE(1455)				return ::hscript::Expr_obj::EIdent(id);
            			}
            			break;
            			case (int)3: {
HXLINE(1450)				if ((tk->_hx_getString(0) == HX_("!",21,00,00,00))) {
HXLINE(1457)					return ::hscript::Expr_obj::EUnop(HX_("!",21,00,00,00),true,this->parsePreproCond());
            				}
            				else {
HXLINE(1459)					return this->unexpected(tk);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE(1452)				{
HXLINE(1452)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1452)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,::hscript::Token_obj::TPOpen_dyn(),_this->head);
            				}
HXLINE(1453)				return this->parseExpr();
            			}
            			break;
            			default:{
HXLINE(1459)				return this->unexpected(tk);
            			}
            		}
HXLINE(1450)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parsePreproCond,return )

bool Parser_obj::evalPreproCond( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1464_evalPreproCond)
HXDLIN(1464)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)1: {
HXLINE(1465)				::String id = e->_hx_getString(0);
HXLINE(1466)				return hx::IsNotNull( this->preprocValue(id) );
            			}
            			break;
            			case (int)3: {
HXLINE(1469)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE(1470)				return this->evalPreproCond(e1);
            			}
            			break;
            			case (int)6: {
HXDLIN(1464)				::String _hx_switch_0 = e->_hx_getString(0);
            				if (  (_hx_switch_0==HX_("&&",40,21,00,00)) ){
HXLINE(1471)					 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN(1471)					 ::hscript::Expr e11 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXLINE(1472)					if (this->evalPreproCond(e11)) {
HXLINE(1472)						return this->evalPreproCond(e2);
            					}
            					else {
HXLINE(1472)						return false;
            					}
HXLINE(1471)					goto _hx_goto_100;
            				}
            				if (  (_hx_switch_0==HX_("||",80,6c,00,00)) ){
HXLINE(1473)					 ::hscript::Expr e21 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN(1473)					 ::hscript::Expr e12 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXLINE(1474)					if (!(this->evalPreproCond(e12))) {
HXLINE(1474)						return this->evalPreproCond(e21);
            					}
            					else {
HXLINE(1474)						return true;
            					}
HXLINE(1473)					goto _hx_goto_100;
            				}
            				/* default */{
HXLINE(1476)					HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e))));
            				}
            				_hx_goto_100:;
            			}
            			break;
            			case (int)7: {
HXDLIN(1464)				if ((e->_hx_getString(0) == HX_("!",21,00,00,00))) {
HXLINE(1467)					 ::hscript::Expr e3 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXLINE(1468)					return !(this->evalPreproCond(e3));
            				}
            				else {
HXLINE(1476)					HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e))));
            				}
            			}
            			break;
            			default:{
HXLINE(1476)				HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e))));
            			}
            		}
HXLINE(1464)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,evalPreproCond,return )

 ::hscript::Token Parser_obj::preprocess(::String id){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1482_preprocess)
HXDLIN(1482)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ||  (_hx_switch_0==HX_("elseif",d6,a0,a2,dd)) ){
HXLINE(1492)			if ((this->preprocStack->length > (int)0)) {
HXLINE(1493)				::Array< ::Dynamic> _hx_tmp = this->preprocStack;
HXDLIN(1493)				if (( (bool)(_hx_tmp->__get((this->preprocStack->length - (int)1))->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) )) {
HXLINE(1494)					::Array< ::Dynamic> _hx_tmp1 = this->preprocStack;
HXDLIN(1494)					_hx_tmp1->__get((this->preprocStack->length - (int)1))->__SetField(HX_("r",72,00,00,00),false,hx::paccDynamic);
HXLINE(1495)					this->skipTokens();
HXLINE(1496)					return this->token();
            				}
            				else {
HXLINE(1497)					if ((id == HX_("else",b9,e4,14,43))) {
HXLINE(1498)						this->preprocStack->pop();
HXLINE(1499)						this->preprocStack->push( ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),true)));
HXLINE(1500)						return this->token();
            					}
            					else {
HXLINE(1503)						this->preprocStack->pop();
HXLINE(1504)						return this->preprocess(HX_("if",dd,5b,00,00));
            					}
            				}
            			}
            			else {
HXLINE(1510)				return ::hscript::Token_obj::TPrepro(id);
            			}
HXLINE(1492)			goto _hx_goto_102;
            		}
            		if (  (_hx_switch_0==HX_("end",db,03,4d,00)) ){
HXLINE(1506)			if ((this->preprocStack->length > (int)0)) {
HXLINE(1507)				this->preprocStack->pop();
HXLINE(1508)				return this->token();
            			}
            			else {
HXLINE(1510)				return ::hscript::Token_obj::TPrepro(id);
            			}
HXLINE(1506)			goto _hx_goto_102;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE(1484)			 ::hscript::Expr e = this->parsePreproCond();
HXLINE(1485)			if (this->evalPreproCond(e)) {
HXLINE(1486)				this->preprocStack->push( ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),true)));
HXLINE(1487)				return this->token();
            			}
HXLINE(1489)			this->preprocStack->push( ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("r",72,00,00,00),false)));
HXLINE(1490)			this->skipTokens();
HXLINE(1491)			return this->token();
HXLINE(1483)			goto _hx_goto_102;
            		}
            		/* default */{
HXLINE(1510)			return ::hscript::Token_obj::TPrepro(id);
            		}
            		_hx_goto_102:;
HXLINE(1482)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,preprocess,return )

void Parser_obj::skipTokens(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1514_skipTokens)
HXLINE(1515)		int spos = (this->preprocStack->length - (int)1);
HXLINE(1516)		 ::Dynamic obj = this->preprocStack->__get(spos);
HXLINE(1517)		int pos = (int)0;
HXLINE(1518)		while(true){
HXLINE(1519)			 ::hscript::Token tk = this->token();
HXLINE(1520)			if (hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE(1521)				HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidPreprocessor(HX_("Unclosed",e5,94,4a,ea)));
            			}
HXLINE(1522)			if (hx::IsNotEq( this->preprocStack->__get(spos),obj )) {
HXLINE(1523)				{
HXLINE(1523)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1523)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE(1524)				goto _hx_goto_104;
            			}
            		}
            		_hx_goto_104:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,skipTokens,(void))

 ::hscript::Token Parser_obj::tokenComment(::String op,int _hx_char){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1529_tokenComment)
HXLINE(1530)		 ::Dynamic c = op.charCodeAt((int)1);
HXLINE(1531)		 ::haxe::io::Input s = this->input;
HXLINE(1532)		if (hx::IsEq( c,(int)47 )) {
HXLINE(1533)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1534)				while(true){
HXLINE(1534)					bool _hx_tmp;
HXDLIN(1534)					if ((_hx_char != (int)13)) {
HXLINE(1534)						_hx_tmp = (_hx_char != (int)10);
            					}
            					else {
HXLINE(1534)						_hx_tmp = false;
            					}
HXDLIN(1534)					if (!(_hx_tmp)) {
HXLINE(1534)						goto _hx_goto_106;
            					}
HXLINE(1536)					_hx_char = s->readByte();
            				}
            				_hx_goto_106:;
HXLINE(1538)				this->_hx_char = _hx_char;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1541)			return this->token();
            		}
HXLINE(1543)		if (hx::IsEq( c,(int)42 )) {
HXLINE(1544)			int old = this->line;
HXLINE(1545)			if ((op == HX_("/**/",a0,0a,31,1f))) {
HXLINE(1546)				this->_hx_char = _hx_char;
HXLINE(1547)				return this->token();
            			}
HXLINE(1549)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1550)				while(true){
HXLINE(1551)					while((_hx_char != (int)42)){
HXLINE(1552)						if ((_hx_char == (int)10)) {
HXLINE(1552)							this->line++;
            						}
HXLINE(1554)						_hx_char = s->readByte();
            					}
HXLINE(1557)					_hx_char = s->readByte();
HXLINE(1558)					if ((_hx_char == (int)47)) {
HXLINE(1559)						goto _hx_goto_107;
            					}
            				}
            				_hx_goto_107:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e1 = _hx_e;
HXLINE(1562)					this->line = old;
HXLINE(1563)					HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedComment_dyn());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1565)			return this->token();
            		}
HXLINE(1567)		this->_hx_char = _hx_char;
HXLINE(1568)		return ::hscript::Token_obj::TOp(op);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,tokenComment,return )

::String Parser_obj::constString( ::hscript::Const c){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1572_constString)
HXDLIN(1572)		switch((int)(_hx_getEnumValueIndex(c))){
            			case (int)0: {
HXLINE(1573)				int v = c->_hx_getInt(0);
HXDLIN(1573)				return ::Std_obj::string(v);
            			}
            			break;
            			case (int)1: {
HXLINE(1574)				Float f = c->_hx_getFloat(0);
HXDLIN(1574)				return ::Std_obj::string(f);
            			}
            			break;
            			case (int)2: {
HXLINE(1575)				::String s = c->_hx_getString(0);
HXDLIN(1575)				return s;
            			}
            			break;
            		}
HXLINE(1572)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,constString,return )

::String Parser_obj::tokenString( ::hscript::Token t){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1583_tokenString)
HXDLIN(1583)		switch((int)(_hx_getEnumValueIndex(t))){
            			case (int)0: {
HXLINE(1584)				return HX_("<eof>",3e,ee,21,cf);
            			}
            			break;
            			case (int)1: {
HXLINE(1585)				 ::hscript::Const c = t->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN(1585)				return this->constString(c);
            			}
            			break;
            			case (int)2: {
HXLINE(1586)				::String s = t->_hx_getString(0);
HXDLIN(1586)				return s;
            			}
            			break;
            			case (int)3: {
HXLINE(1587)				::String s1 = t->_hx_getString(0);
HXDLIN(1587)				return s1;
            			}
            			break;
            			case (int)4: {
HXLINE(1588)				return HX_("(",28,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(1589)				return HX_(")",29,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE(1590)				return HX_("{",7b,00,00,00);
            			}
            			break;
            			case (int)7: {
HXLINE(1591)				return HX_("}",7d,00,00,00);
            			}
            			break;
            			case (int)8: {
HXLINE(1592)				return HX_(".",2e,00,00,00);
            			}
            			break;
            			case (int)9: {
HXLINE(1593)				return HX_(",",2c,00,00,00);
            			}
            			break;
            			case (int)10: {
HXLINE(1594)				return HX_(";",3b,00,00,00);
            			}
            			break;
            			case (int)11: {
HXLINE(1595)				return HX_("[",5b,00,00,00);
            			}
            			break;
            			case (int)12: {
HXLINE(1596)				return HX_("]",5d,00,00,00);
            			}
            			break;
            			case (int)13: {
HXLINE(1597)				return HX_("?",3f,00,00,00);
            			}
            			break;
            			case (int)14: {
HXLINE(1598)				return HX_(":",3a,00,00,00);
            			}
            			break;
            			case (int)15: {
HXLINE(1599)				::String id = t->_hx_getString(0);
HXDLIN(1599)				return (HX_("@",40,00,00,00) + id);
            			}
            			break;
            			case (int)16: {
HXLINE(1600)				::String id1 = t->_hx_getString(0);
HXDLIN(1600)				return (HX_("#",23,00,00,00) + id1);
            			}
            			break;
            		}
HXLINE(1583)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,tokenString,return )

int Parser_obj::p1;

int Parser_obj::readPos;

int Parser_obj::tokenMin;

int Parser_obj::tokenMax;


hx::ObjectPtr< Parser_obj > Parser_obj::__new() {
	hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Parser_obj > Parser_obj::__alloc(hx::Ctx *_hx_ctx) {
	Parser_obj *__this = (Parser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), true, "hscript.Parser"));
	*(void **)__this = Parser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(opChars,"opChars");
	HX_MARK_MEMBER_NAME(identChars,"identChars");
	HX_MARK_MEMBER_NAME(opPriority,"opPriority");
	HX_MARK_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_MARK_MEMBER_NAME(unops,"unops");
	HX_MARK_MEMBER_NAME(preprocesorValues,"preprocesorValues");
	HX_MARK_MEMBER_NAME(allowJSON,"allowJSON");
	HX_MARK_MEMBER_NAME(allowTypes,"allowTypes");
	HX_MARK_MEMBER_NAME(allowMetadata,"allowMetadata");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(idents,"idents");
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_MEMBER_NAME(preprocStack,"preprocStack");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(opChars,"opChars");
	HX_VISIT_MEMBER_NAME(identChars,"identChars");
	HX_VISIT_MEMBER_NAME(opPriority,"opPriority");
	HX_VISIT_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_VISIT_MEMBER_NAME(unops,"unops");
	HX_VISIT_MEMBER_NAME(preprocesorValues,"preprocesorValues");
	HX_VISIT_MEMBER_NAME(allowJSON,"allowJSON");
	HX_VISIT_MEMBER_NAME(allowTypes,"allowTypes");
	HX_VISIT_MEMBER_NAME(allowMetadata,"allowMetadata");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(idents,"idents");
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
	HX_VISIT_MEMBER_NAME(preprocStack,"preprocStack");
}

hx::Val Parser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mk") ) { return hx::Val( mk_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { return hx::Val( ops ); }
		if (HX_FIELD_EQ(inName,"uid") ) { return hx::Val( uid ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return hx::Val( line ); }
		if (HX_FIELD_EQ(inName,"char") ) { return hx::Val( _hx_char ); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"expr") ) { return hx::Val( expr_dyn() ); }
		if (HX_FIELD_EQ(inName,"pmin") ) { return hx::Val( pmin_dyn() ); }
		if (HX_FIELD_EQ(inName,"pmax") ) { return hx::Val( pmax_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unops") ) { return hx::Val( unops ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn() ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn() ); }
		if (HX_FIELD_EQ(inName,"maybe") ) { return hx::Val( maybe_dyn() ); }
		if (HX_FIELD_EQ(inName,"token") ) { return hx::Val( token_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { return hx::Val( idents ); }
		if (HX_FIELD_EQ(inName,"tokens") ) { return hx::Val( tokens ); }
		if (HX_FIELD_EQ(inName,"ensure") ) { return hx::Val( ensure_dyn() ); }
		if (HX_FIELD_EQ(inName,"incPos") ) { return hx::Val( incPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { return hx::Val( opChars ); }
		if (HX_FIELD_EQ(inName,"isBlock") ) { return hx::Val( isBlock_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getIdent") ) { return hx::Val( getIdent_dyn() ); }
		if (HX_FIELD_EQ(inName,"mapCompr") ) { return hx::Val( mapCompr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeUnop") ) { return hx::Val( makeUnop_dyn() ); }
		if (HX_FIELD_EQ(inName,"readChar") ) { return hx::Val( readChar_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { return hx::Val( allowJSON ); }
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return hx::Val( parseExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeBinop") ) { return hx::Val( makeBinop_dyn() ); }
		if (HX_FIELD_EQ(inName,"parsePath") ) { return hx::Val( parsePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseType") ) { return hx::Val( parseType_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { return hx::Val( identChars ); }
		if (HX_FIELD_EQ(inName,"opPriority") ) { return hx::Val( opPriority ); }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { return hx::Val( allowTypes ); }
		if (HX_FIELD_EQ(inName,"initParser") ) { return hx::Val( initParser_dyn() ); }
		if (HX_FIELD_EQ(inName,"unexpected") ) { return hx::Val( unexpected_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseField") ) { return hx::Val( parseField_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn() ); }
		if (HX_FIELD_EQ(inName,"preprocess") ) { return hx::Val( preprocess_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipTokens") ) { return hx::Val( skipTokens_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"invalidChar") ) { return hx::Val( invalidChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseString") ) { return hx::Val( parseString_dyn() ); }
		if (HX_FIELD_EQ(inName,"ensureToken") ) { return hx::Val( ensureToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return hx::Val( parseObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseModule") ) { return hx::Val( parseModule_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseParams") ) { return hx::Val( parseParams_dyn() ); }
		if (HX_FIELD_EQ(inName,"constString") ) { return hx::Val( constString_dyn() ); }
		if (HX_FIELD_EQ(inName,"tokenString") ) { return hx::Val( tokenString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { return hx::Val( opRightAssoc ); }
		if (HX_FIELD_EQ(inName,"preprocValue") ) { return hx::Val( preprocValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"preprocStack") ) { return hx::Val( preprocStack ); }
		if (HX_FIELD_EQ(inName,"tokenComment") ) { return hx::Val( tokenComment_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMetadata") ) { return hx::Val( allowMetadata ); }
		if (HX_FIELD_EQ(inName,"parseFullExpr") ) { return hx::Val( parseFullExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseMetaArgs") ) { return hx::Val( parseMetaArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseExprNext") ) { return hx::Val( parseExprNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseTypeNext") ) { return hx::Val( parseTypeNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseExprList") ) { return hx::Val( parseExprList_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseMetadata") ) { return hx::Val( parseMetadata_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseStructure") ) { return hx::Val( parseStructure_dyn() ); }
		if (HX_FIELD_EQ(inName,"evalPreproCond") ) { return hx::Val( evalPreproCond_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parseModuleDecl") ) { return hx::Val( parseModuleDecl_dyn() ); }
		if (HX_FIELD_EQ(inName,"parsePreproCond") ) { return hx::Val( parsePreproCond_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preprocesorValues") ) { return hx::Val( preprocesorValues ); }
		if (HX_FIELD_EQ(inName,"parseFunctionDecl") ) { return hx::Val( parseFunctionDecl_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Parser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { ops=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unops") ) { unops=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { idents=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast<  ::haxe::ds::GenericStack_hscript_Token >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { opChars=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { allowJSON=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { identChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opPriority") ) { opPriority=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { allowTypes=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { opRightAssoc=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preprocStack") ) { preprocStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMetadata") ) { allowMetadata=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preprocesorValues") ) { preprocesorValues=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"));
	outFields->push(HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8"));
	outFields->push(HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee"));
	outFields->push(HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e"));
	outFields->push(HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02"));
	outFields->push(HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6"));
	outFields->push(HX_HCSTRING("preprocesorValues","\x4c","\xe2","\x81","\xce"));
	outFields->push(HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1"));
	outFields->push(HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45"));
	outFields->push(HX_HCSTRING("allowMetadata","\x18","\x79","\xd4","\x10"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"));
	outFields->push(HX_HCSTRING("ops","\x32","\x9c","\x54","\x00"));
	outFields->push(HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2"));
	outFields->push(HX_HCSTRING("uid","\x90","\x23","\x59","\x00"));
	outFields->push(HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91"));
	outFields->push(HX_HCSTRING("preprocStack","\x4f","\xd3","\x9d","\x7a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Parser_obj,line),HX_HCSTRING("line","\xf4","\x17","\xb3","\x47")},
	{hx::fsString,(int)offsetof(Parser_obj,opChars),HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8")},
	{hx::fsString,(int)offsetof(Parser_obj,identChars),HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,opPriority),HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,opRightAssoc),HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,unops),HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,preprocesorValues),HX_HCSTRING("preprocesorValues","\x4c","\xe2","\x81","\xce")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowJSON),HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowTypes),HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowMetadata),HX_HCSTRING("allowMetadata","\x18","\x79","\xd4","\x10")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(Parser_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsInt,(int)offsetof(Parser_obj,_hx_char),HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Parser_obj,ops),HX_HCSTRING("ops","\x32","\x9c","\x54","\x00")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Parser_obj,idents),HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2")},
	{hx::fsInt,(int)offsetof(Parser_obj,uid),HX_HCSTRING("uid","\x90","\x23","\x59","\x00")},
	{hx::fsObject /*::haxe::ds::GenericStack_hscript_Token*/ ,(int)offsetof(Parser_obj,tokens),HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Parser_obj,preprocStack),HX_HCSTRING("preprocStack","\x4f","\xd3","\x9d","\x7a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Parser_obj::p1,HX_HCSTRING("p1","\xc1","\x61","\x00","\x00")},
	{hx::fsInt,(void *) &Parser_obj::readPos,HX_HCSTRING("readPos","\xde","\x03","\xcf","\x02")},
	{hx::fsInt,(void *) &Parser_obj::tokenMin,HX_HCSTRING("tokenMin","\x19","\xa8","\x42","\x2b")},
	{hx::fsInt,(void *) &Parser_obj::tokenMax,HX_HCSTRING("tokenMax","\x2b","\xa1","\x42","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"),
	HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8"),
	HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee"),
	HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e"),
	HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02"),
	HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6"),
	HX_HCSTRING("preprocesorValues","\x4c","\xe2","\x81","\xce"),
	HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1"),
	HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45"),
	HX_HCSTRING("allowMetadata","\x18","\x79","\xd4","\x10"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"),
	HX_HCSTRING("ops","\x32","\x9c","\x54","\x00"),
	HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2"),
	HX_HCSTRING("uid","\x90","\x23","\x59","\x00"),
	HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("invalidChar","\x6d","\xad","\xce","\xa9"),
	HX_HCSTRING("initParser","\x0f","\xf8","\xcd","\xf1"),
	HX_HCSTRING("parseString","\x64","\xd5","\x6c","\x8c"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("unexpected","\xd1","\x15","\xf4","\xc5"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("ensure","\xbe","\xf5","\x7b","\x04"),
	HX_HCSTRING("ensureToken","\x5b","\x6c","\x33","\xec"),
	HX_HCSTRING("maybe","\xa8","\x13","\x27","\x03"),
	HX_HCSTRING("getIdent","\x7a","\x52","\x50","\x17"),
	HX_HCSTRING("expr","\x35","\xfd","\x1d","\x43"),
	HX_HCSTRING("pmin","\x22","\xf7","\x5a","\x4a"),
	HX_HCSTRING("pmax","\x34","\xf0","\x5a","\x4a"),
	HX_HCSTRING("mk","\x5e","\x5f","\x00","\x00"),
	HX_HCSTRING("isBlock","\x03","\x19","\x82","\x51"),
	HX_HCSTRING("parseFullExpr","\xb7","\xbd","\x60","\x9c"),
	HX_HCSTRING("parseObject","\x52","\x2b","\x7c","\x90"),
	HX_HCSTRING("parseExpr","\x08","\x4f","\xc4","\xca"),
	HX_HCSTRING("parseMetaArgs","\x15","\x82","\x33","\x6e"),
	HX_HCSTRING("mapCompr","\x47","\xa4","\x9f","\xc1"),
	HX_HCSTRING("makeUnop","\xc8","\xc4","\x47","\x44"),
	HX_HCSTRING("makeBinop","\xda","\x90","\x98","\x86"),
	HX_HCSTRING("parseStructure","\x80","\x85","\x70","\x8b"),
	HX_HCSTRING("parseExprNext","\x1b","\x24","\xa8","\xf3"),
	HX_HCSTRING("parseFunctionDecl","\x75","\x70","\x3a","\x06"),
	HX_HCSTRING("parsePath","\x78","\x37","\xf8","\xd1"),
	HX_HCSTRING("parseType","\x8d","\x44","\xaf","\xd4"),
	HX_HCSTRING("parseTypeNext","\x20","\xc0","\xfc","\xfa"),
	HX_HCSTRING("parseExprList","\x86","\xbb","\x58","\xf2"),
	HX_HCSTRING("parseModule","\x3f","\xe1","\x0f","\x3c"),
	HX_HCSTRING("parseMetadata","\xc2","\x1e","\x49","\x85"),
	HX_HCSTRING("parseParams","\xd9","\xa7","\xb7","\x68"),
	HX_HCSTRING("parseModuleDecl","\x49","\x69","\x92","\x8b"),
	HX_HCSTRING("parseField","\x87","\xdb","\x74","\x2a"),
	HX_HCSTRING("incPos","\x56","\xe7","\x39","\x93"),
	HX_HCSTRING("readChar","\x4c","\x39","\xb7","\x69"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	HX_HCSTRING("token","\xf9","\x82","\x2b","\x14"),
	HX_HCSTRING("preprocValue","\x78","\xeb","\x4a","\x28"),
	HX_HCSTRING("preprocStack","\x4f","\xd3","\x9d","\x7a"),
	HX_HCSTRING("parsePreproCond","\xff","\x8c","\x11","\xd6"),
	HX_HCSTRING("evalPreproCond","\xa8","\x25","\x52","\xb0"),
	HX_HCSTRING("preprocess","\xac","\xdc","\x46","\x92"),
	HX_HCSTRING("skipTokens","\x39","\x0b","\xeb","\xf9"),
	HX_HCSTRING("tokenComment","\x66","\x60","\xfb","\x25"),
	HX_HCSTRING("constString","\x94","\x42","\x30","\xa9"),
	HX_HCSTRING("tokenString","\xaa","\x20","\xde","\xa4"),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_MARK_MEMBER_NAME(Parser_obj::readPos,"readPos");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_VISIT_MEMBER_NAME(Parser_obj::readPos,"readPos");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#endif

hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"),
	HX_HCSTRING("readPos","\xde","\x03","\xcf","\x02"),
	HX_HCSTRING("tokenMin","\x19","\xa8","\x42","\x2b"),
	HX_HCSTRING("tokenMax","\x2b","\xa1","\x42","\x2b"),
	::String(null())
};

void Parser_obj::__register()
{
	hx::Object *dummy = new Parser_obj;
	Parser_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hscript.Parser","\x9a","\x9f","\xf2","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_97_boot)
HXDLIN(  97)		p1 = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_98_boot)
HXDLIN(  98)		readPos = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_99_boot)
HXDLIN(  99)		tokenMin = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_100_boot)
HXDLIN( 100)		tokenMax = (int)0;
            	}
}

} // end namespace hscript
