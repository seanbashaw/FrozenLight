// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_CType
#include <hscript/CType.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript__Interp_Stop
#include <hscript/_Interp/Stop.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f37559d470356c9e_53_new,"hscript.Interp","new",0xf7e71101,"hscript.Interp.new","hscript/Interp.hx",53,0xf078416e)
HX_DEFINE_STACK_FRAME(_hx_pos_f37559d470356c9e_65_new,"hscript.Interp","new",0xf7e71101,"hscript.Interp.new","hscript/Interp.hx",65,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_79_posInfos,"hscript.Interp","posInfos",0x444859d0,"hscript.Interp.posInfos","hscript/Interp.hx",79,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_89_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",89,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_90_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",90,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_91_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",91,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_92_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",92,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_93_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",93,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_94_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",94,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_95_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",95,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_96_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",96,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_97_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",97,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_98_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",98,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_99_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",99,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_100_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",100,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_101_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",101,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_102_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",102,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_103_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",103,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_104_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",104,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_105_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",105,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_106_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",106,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_107_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",107,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_109_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",109,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_110_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",110,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_111_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",111,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_112_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",112,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_113_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",113,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_114_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",114,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_115_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",115,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_116_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",116,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_117_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",117,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_118_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",118,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_119_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",119,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_120_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",120,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_82_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",82,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_123_assign,"hscript.Interp","assign",0xca66602e,"hscript.Interp.assign","hscript/Interp.hx",123,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_152_assignOp,"hscript.Interp","assignOp",0xf8e18cef,"hscript.Interp.assignOp","hscript/Interp.hx",152,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_150_assignOp,"hscript.Interp","assignOp",0xf8e18cef,"hscript.Interp.assignOp","hscript/Interp.hx",150,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_155_evalAssignOp,"hscript.Interp","evalAssignOp",0xa46efc2b,"hscript.Interp.evalAssignOp","hscript/Interp.hx",155,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_191_increment,"hscript.Interp","increment",0x1e81f590,"hscript.Interp.increment","hscript/Interp.hx",191,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_238_execute,"hscript.Interp","execute",0xe1c3af56,"hscript.Interp.execute","hscript/Interp.hx",238,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_250_exprReturn,"hscript.Interp","exprReturn",0x8cfbf144,"hscript.Interp.exprReturn","hscript/Interp.hx",250,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_265_duplicate,"hscript.Interp","duplicate",0x8d9a10ec,"hscript.Interp.duplicate","hscript/Interp.hx",265,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_277_restore,"hscript.Interp","restore",0x80670c6f,"hscript.Interp.restore","hscript/Interp.hx",277,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_287_edef,"hscript.Interp","edef",0xec5412bf,"hscript.Interp.edef","hscript/Interp.hx",287,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_293_error,"hscript.Interp","error",0xe68736a9,"hscript.Interp.error","hscript/Interp.hx",293,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_301_rethrow,"hscript.Interp","rethrow",0x0be155b4,"hscript.Interp.rethrow","hscript/Interp.hx",301,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_305_resolve,"hscript.Interp","resolve",0x7d16b80d,"hscript.Interp.resolve","hscript/Interp.hx",305,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_315_expr,"hscript.Interp","expr",0xec634974,"hscript.Interp.expr","hscript/Interp.hx",315,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_410_expr,"hscript.Interp","expr",0xec634974,"hscript.Interp.expr","hscript/Interp.hx",410,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_581_doWhileLoop,"hscript.Interp","doWhileLoop",0x813d4b4b,"hscript.Interp.doWhileLoop","hscript/Interp.hx",581,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_598_whileLoop,"hscript.Interp","whileLoop",0xce1b3216,"hscript.Interp.whileLoop","hscript/Interp.hx",598,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_614_makeIterator,"hscript.Interp","makeIterator",0x634d013b,"hscript.Interp.makeIterator","hscript/Interp.hx",614,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_624_forLoop,"hscript.Interp","forLoop",0xdf1ff72e,"hscript.Interp.forLoop","hscript/Interp.hx",624,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_644_isMap,"hscript.Interp","isMap",0x34ae9fb3,"hscript.Interp.isMap","hscript/Interp.hx",644,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_648_getMapValue,"hscript.Interp","getMapValue",0x1594fb8c,"hscript.Interp.getMapValue","hscript/Interp.hx",648,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_652_setMapValue,"hscript.Interp","setMapValue",0x20020298,"hscript.Interp.setMapValue","hscript/Interp.hx",652,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_655_get,"hscript.Interp","get",0xf7e1c137,"hscript.Interp.get","hscript/Interp.hx",655,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_671_set,"hscript.Interp","set",0xf7eadc43,"hscript.Interp.set","hscript/Interp.hx",671,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_678_fcall,"hscript.Interp","fcall",0x6ff6aee5,"hscript.Interp.fcall","hscript/Interp.hx",678,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_682_call,"hscript.Interp","call",0xeaff64dd,"hscript.Interp.call","hscript/Interp.hx",682,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_685_cnew,"hscript.Interp","cnew",0xeb093c1c,"hscript.Interp.cnew","hscript/Interp.hx",685,0xf078416e)
namespace hscript{

void Interp_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_53_new)
HXDLIN(  53)		 ::hscript::Interp _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  55)		this->variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  56)		this->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  61)		this->declared = ::Array_obj< ::Dynamic>::__new();
HXLINE(  62)		this->variables->set(HX_("null",87,9e,0e,49),null());
HXLINE(  63)		this->variables->set(HX_("true",4e,a7,03,4d),true);
HXLINE(  64)		this->variables->set(HX_("false",a3,35,4f,fb),false);
HXLINE(  65)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::hscript::Interp,_gthis) HXARGC(1)
            			void _hx_run(::cpp::VirtualArray el){
            				HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_65_new)
HXLINE(  66)				 ::Dynamic inf = _gthis->posInfos();
HXLINE(  67)				 ::Dynamic v = el->shift();
HXLINE(  68)				if ((el->get_length() > (int)0)) {
HXLINE(  68)					inf->__SetField(HX_("customParams",d7,51,18,ed),el,hx::paccDynamic);
            				}
HXLINE(  69)				 ::Dynamic value = ::haxe::Log_obj::trace;
HXDLIN(  69)				value(::Std_obj::string(v),inf);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  65)			::Dynamic this1 = this->variables;
HXDLIN(  65)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("trace",85,8e,1f,16),::Reflect_obj::makeVarArgs( ::Dynamic(new _hx_Closure_0(_gthis))));
            		}
HXLINE(  71)		this->initOps();
            	}

Dynamic Interp_obj::__CreateEmpty() { return new Interp_obj; }

void *Interp_obj::_hx_vtable = 0;

Dynamic Interp_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Interp_obj > _hx_result = new Interp_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Interp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x005c6827;
}

 ::Dynamic Interp_obj::posInfos(){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_79_posInfos)
HXDLIN(  79)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fileName",e7,5a,43,62),HX_("hscript",73,8c,18,2c))
            			->setFixed(1,HX_("lineNumber",dd,81,22,76),(int)0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,posInfos,return )

void Interp_obj::initOps(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::hscript::Interp,me) HXARGC(2)
            		 ::Dynamic _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_89_initOps)
HXLINE(  89)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  89)			return (_hx_tmp + me->expr(e2));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e11, ::hscript::Expr e21){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_90_initOps)
HXLINE(  90)			 ::Dynamic _hx_tmp1 = me->expr(e11);
HXDLIN(  90)			return (_hx_tmp1 - me->expr(e21));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e12, ::hscript::Expr e22){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_91_initOps)
HXLINE(  91)			 ::Dynamic _hx_tmp2 = me->expr(e12);
HXDLIN(  91)			return (_hx_tmp2 * me->expr(e22));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e13, ::hscript::Expr e23){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_92_initOps)
HXLINE(  92)			 ::Dynamic _hx_tmp3 = me->expr(e13);
HXDLIN(  92)			return ((Float)_hx_tmp3 / (Float)me->expr(e23));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e14, ::hscript::Expr e24){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_93_initOps)
HXLINE(  93)			 ::Dynamic _hx_tmp4 = me->expr(e14);
HXDLIN(  93)			return hx::Mod(_hx_tmp4,me->expr(e24));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_5, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e15, ::hscript::Expr e25){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_94_initOps)
HXLINE(  94)			 ::Dynamic _hx_tmp5 = me->expr(e15);
HXDLIN(  94)			return ((int)_hx_tmp5 & (int)me->expr(e25));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_6, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e16, ::hscript::Expr e26){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_95_initOps)
HXLINE(  95)			 ::Dynamic _hx_tmp6 = me->expr(e16);
HXDLIN(  95)			return ((int)_hx_tmp6 | (int)me->expr(e26));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_7, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e17, ::hscript::Expr e27){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_96_initOps)
HXLINE(  96)			 ::Dynamic _hx_tmp7 = me->expr(e17);
HXDLIN(  96)			return ((int)_hx_tmp7 ^ (int)me->expr(e27));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_8, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e18, ::hscript::Expr e28){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_97_initOps)
HXLINE(  97)			 ::Dynamic _hx_tmp8 = me->expr(e18);
HXDLIN(  97)			return ((int)_hx_tmp8 << (int)me->expr(e28));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_9, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e19, ::hscript::Expr e29){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_98_initOps)
HXLINE(  98)			 ::Dynamic _hx_tmp9 = me->expr(e19);
HXDLIN(  98)			return ((int)_hx_tmp9 >> (int)me->expr(e29));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_10, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e110, ::hscript::Expr e210){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_99_initOps)
HXLINE(  99)			 ::Dynamic _hx_tmp10 = me->expr(e110);
HXDLIN(  99)			return hx::UShr(_hx_tmp10,me->expr(e210));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_11, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e111, ::hscript::Expr e211){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_100_initOps)
HXLINE( 100)			 ::Dynamic _hx_tmp11 = me->expr(e111);
HXDLIN( 100)			return hx::IsEq( _hx_tmp11,me->expr(e211) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_12, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e112, ::hscript::Expr e212){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_101_initOps)
HXLINE( 101)			 ::Dynamic _hx_tmp12 = me->expr(e112);
HXDLIN( 101)			return hx::IsNotEq( _hx_tmp12,me->expr(e212) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_13, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e113, ::hscript::Expr e213){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_102_initOps)
HXLINE( 102)			 ::Dynamic _hx_tmp13 = me->expr(e113);
HXDLIN( 102)			return hx::IsGreaterEq( _hx_tmp13,me->expr(e213) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_14, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e114, ::hscript::Expr e214){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_103_initOps)
HXLINE( 103)			 ::Dynamic _hx_tmp14 = me->expr(e114);
HXDLIN( 103)			return hx::IsLessEq( _hx_tmp14,me->expr(e214) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_15, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e115, ::hscript::Expr e215){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_104_initOps)
HXLINE( 104)			 ::Dynamic _hx_tmp15 = me->expr(e115);
HXDLIN( 104)			return hx::IsGreater( _hx_tmp15,me->expr(e215) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_16, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e116, ::hscript::Expr e216){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_105_initOps)
HXLINE( 105)			 ::Dynamic _hx_tmp16 = me->expr(e116);
HXDLIN( 105)			return hx::IsLess( _hx_tmp16,me->expr(e216) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_17, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e117, ::hscript::Expr e217){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_106_initOps)
HXLINE( 106)			if (hx::IsNotEq( me->expr(e117),true )) {
HXLINE( 106)				return hx::IsEq( me->expr(e217),true );
            			}
            			else {
HXLINE( 106)				return true;
            			}
HXDLIN( 106)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_18, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e118, ::hscript::Expr e218){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_107_initOps)
HXLINE( 107)			if (hx::IsEq( me->expr(e118),true )) {
HXLINE( 107)				return hx::IsEq( me->expr(e218),true );
            			}
            			else {
HXLINE( 107)				return false;
            			}
HXDLIN( 107)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_19, ::hscript::Interp,me) HXARGC(2)
            		 ::IntIterator _hx_run( ::hscript::Expr e119, ::hscript::Expr e219){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_109_initOps)
HXLINE( 109)			 ::Dynamic _hx_tmp17 = me->expr(e119);
HXDLIN( 109)			return  ::IntIterator_obj::__alloc( HX_CTX ,_hx_tmp17,me->expr(e219));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_20) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic v1, ::Dynamic v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_110_initOps)
HXLINE( 110)			return (v1 + v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_21) HXARGC(2)
            		Float _hx_run(Float v11,Float v21){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_111_initOps)
HXLINE( 111)			return (v11 - v21);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_22) HXARGC(2)
            		Float _hx_run(Float v12,Float v22){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_112_initOps)
HXLINE( 112)			return (v12 * v22);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_23) HXARGC(2)
            		Float _hx_run(Float v13,Float v23){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_113_initOps)
HXLINE( 113)			return ((Float)v13 / (Float)v23);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_24) HXARGC(2)
            		Float _hx_run(Float v14,Float v24){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_114_initOps)
HXLINE( 114)			return hx::Mod(v14,v24);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_25) HXARGC(2)
            		int _hx_run(int v15,int v25){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_115_initOps)
HXLINE( 115)			return ((int)v15 & (int)v25);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_26) HXARGC(2)
            		int _hx_run(int v16,int v26){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_116_initOps)
HXLINE( 116)			return ((int)v16 | (int)v26);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_27) HXARGC(2)
            		int _hx_run(int v17,int v27){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_117_initOps)
HXLINE( 117)			return ((int)v17 ^ (int)v27);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_28) HXARGC(2)
            		int _hx_run(int v18,int v28){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_118_initOps)
HXLINE( 118)			return ((int)v18 << (int)v28);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_29) HXARGC(2)
            		int _hx_run(int v19,int v29){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_119_initOps)
HXLINE( 119)			return ((int)v19 >> (int)v29);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_30) HXARGC(2)
            		int _hx_run(int v110,int v210){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_120_initOps)
HXLINE( 120)			return hx::UShr(v110,v210);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_82_initOps)
HXLINE(  83)		 ::hscript::Interp me = hx::ObjectPtr<OBJ_>(this);
HXLINE(  85)		this->binops =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  89)		this->binops->set(HX_("+",2b,00,00,00), ::Dynamic(new _hx_Closure_0(me)));
HXLINE(  90)		this->binops->set(HX_("-",2d,00,00,00), ::Dynamic(new _hx_Closure_1(me)));
HXLINE(  91)		this->binops->set(HX_("*",2a,00,00,00), ::Dynamic(new _hx_Closure_2(me)));
HXLINE(  92)		this->binops->set(HX_("/",2f,00,00,00), ::Dynamic(new _hx_Closure_3(me)));
HXLINE(  93)		this->binops->set(HX_("%",25,00,00,00), ::Dynamic(new _hx_Closure_4(me)));
HXLINE(  94)		this->binops->set(HX_("&",26,00,00,00), ::Dynamic(new _hx_Closure_5(me)));
HXLINE(  95)		this->binops->set(HX_("|",7c,00,00,00), ::Dynamic(new _hx_Closure_6(me)));
HXLINE(  96)		this->binops->set(HX_("^",5e,00,00,00), ::Dynamic(new _hx_Closure_7(me)));
HXLINE(  97)		this->binops->set(HX_("<<",80,34,00,00), ::Dynamic(new _hx_Closure_8(me)));
HXLINE(  98)		this->binops->set(HX_(">>",40,36,00,00), ::Dynamic(new _hx_Closure_9(me)));
HXLINE(  99)		this->binops->set(HX_(">>>",fe,41,2f,00), ::Dynamic(new _hx_Closure_10(me)));
HXLINE( 100)		this->binops->set(HX_("==",60,35,00,00), ::Dynamic(new _hx_Closure_11(me)));
HXLINE( 101)		this->binops->set(HX_("!=",fc,1c,00,00), ::Dynamic(new _hx_Closure_12(me)));
HXLINE( 102)		this->binops->set(HX_(">=",3f,36,00,00), ::Dynamic(new _hx_Closure_13(me)));
HXLINE( 103)		this->binops->set(HX_("<=",81,34,00,00), ::Dynamic(new _hx_Closure_14(me)));
HXLINE( 104)		this->binops->set(HX_(">",3e,00,00,00), ::Dynamic(new _hx_Closure_15(me)));
HXLINE( 105)		this->binops->set(HX_("<",3c,00,00,00), ::Dynamic(new _hx_Closure_16(me)));
HXLINE( 106)		this->binops->set(HX_("||",80,6c,00,00), ::Dynamic(new _hx_Closure_17(me)));
HXLINE( 107)		this->binops->set(HX_("&&",40,21,00,00), ::Dynamic(new _hx_Closure_18(me)));
HXLINE( 108)		this->binops->set(HX_("=",3d,00,00,00),this->assign_dyn());
HXLINE( 109)		this->binops->set(HX_("...",ee,0f,23,00), ::Dynamic(new _hx_Closure_19(me)));
HXLINE( 110)		this->assignOp(HX_("+=",b2,25,00,00), ::Dynamic(new _hx_Closure_20()));
HXLINE( 111)		this->assignOp(HX_("-=",70,27,00,00), ::Dynamic(new _hx_Closure_21()));
HXLINE( 112)		this->assignOp(HX_("*=",d3,24,00,00), ::Dynamic(new _hx_Closure_22()));
HXLINE( 113)		this->assignOp(HX_("/=",2e,29,00,00), ::Dynamic(new _hx_Closure_23()));
HXLINE( 114)		this->assignOp(HX_("%=",78,20,00,00), ::Dynamic(new _hx_Closure_24()));
HXLINE( 115)		this->assignOp(HX_("&=",57,21,00,00), ::Dynamic(new _hx_Closure_25()));
HXLINE( 116)		this->assignOp(HX_("|=",41,6c,00,00), ::Dynamic(new _hx_Closure_26()));
HXLINE( 117)		this->assignOp(HX_("^=",1f,52,00,00), ::Dynamic(new _hx_Closure_27()));
HXLINE( 118)		this->assignOp(HX_("<<=",bd,bb,2d,00), ::Dynamic(new _hx_Closure_28()));
HXLINE( 119)		this->assignOp(HX_(">>=",fd,41,2f,00), ::Dynamic(new _hx_Closure_29()));
HXLINE( 120)		this->assignOp(HX_(">>>=",7f,7c,2a,29), ::Dynamic(new _hx_Closure_30()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,initOps,(void))

 ::Dynamic Interp_obj::assign( ::hscript::Expr e1, ::hscript::Expr e2){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_123_assign)
HXLINE( 124)		 ::Dynamic v = this->expr(e2);
HXLINE( 125)		switch((int)(_hx_getEnumValueIndex(e1))){
            			case (int)1: {
HXLINE( 126)				::String id = e1->_hx_getString(0);
HXDLIN( 126)				{
HXLINE( 127)					 ::Dynamic l = ::haxe::IMap_obj::get(this->locals,id);
HXLINE( 128)					if (hx::IsNull( l )) {
HXLINE( 129)						::haxe::IMap_obj::set(this->variables,id,v);
            					}
            					else {
HXLINE( 131)						l->__SetField(HX_("r",72,00,00,00),v,hx::paccDynamic);
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 132)				::String f = e1->_hx_getString(1);
HXDLIN( 132)				 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 133)				v = this->set(this->expr(e),f,v);
            			}
            			break;
            			case (int)16: {
HXLINE( 134)				 ::hscript::Expr index = e1->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 134)				 ::hscript::Expr e3 = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 134)				{
HXLINE( 135)					 ::Dynamic arr = this->expr(e3);
HXLINE( 136)					 ::Dynamic index1 = this->expr(index);
HXLINE( 137)					if (::Std_obj::is(arr,hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 138)						::haxe::IMap_obj::set(arr,index1,v);
            					}
            					else {
HXLINE( 141)						arr->__SetItem(( (int)(index1) ),v);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 145)				 ::hscript::Error e4 = ::hscript::Error_obj::EInvalidOp(HX_("=",3d,00,00,00));
HXDLIN( 145)				HX_STACK_DO_THROW(e4);
            			}
            		}
HXLINE( 147)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assign,return )

void Interp_obj::assignOp(::String op, ::Dynamic fop){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,op, ::hscript::Interp,me, ::Dynamic,fop) HXARGC(2)
            		 ::Dynamic _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_STACKFRAME(&_hx_pos_f37559d470356c9e_152_assignOp)
HXLINE( 152)			return me->evalAssignOp(op,fop,e1,e2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_150_assignOp)
HXLINE( 151)		 ::hscript::Interp me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 152)		this->binops->set(op, ::Dynamic(new _hx_Closure_0(op,me,fop)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assignOp,(void))

 ::Dynamic Interp_obj::evalAssignOp(::String op, ::Dynamic fop, ::hscript::Expr e1, ::hscript::Expr e2){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_155_evalAssignOp)
HXLINE( 156)		 ::Dynamic v;
HXLINE( 157)		switch((int)(_hx_getEnumValueIndex(e1))){
            			case (int)1: {
HXLINE( 158)				::String id = e1->_hx_getString(0);
HXDLIN( 158)				{
HXLINE( 159)					 ::Dynamic l = ::haxe::IMap_obj::get(this->locals,id);
HXLINE( 160)					 ::Dynamic v1 = this->expr(e1);
HXDLIN( 160)					v = fop(v1,this->expr(e2));
HXLINE( 161)					if (hx::IsNull( l )) {
HXLINE( 162)						::haxe::IMap_obj::set(this->variables,id,v);
            					}
            					else {
HXLINE( 164)						l->__SetField(HX_("r",72,00,00,00),v,hx::paccDynamic);
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 165)				::String f = e1->_hx_getString(1);
HXDLIN( 165)				 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 165)				{
HXLINE( 166)					 ::Dynamic obj = this->expr(e);
HXLINE( 167)					 ::Dynamic v2 = this->get(obj,f);
HXDLIN( 167)					v = fop(v2,this->expr(e2));
HXLINE( 168)					v = this->set(obj,f,v);
            				}
            			}
            			break;
            			case (int)16: {
HXLINE( 169)				 ::hscript::Expr index = e1->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 169)				 ::hscript::Expr e3 = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 169)				{
HXLINE( 170)					 ::Dynamic arr = this->expr(e3);
HXLINE( 171)					 ::Dynamic index1 = this->expr(index);
HXLINE( 172)					if (::Std_obj::is(arr,hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 173)						 ::Dynamic v3 = ::haxe::IMap_obj::get(arr,index1);
HXDLIN( 173)						v = fop(v3,this->expr(e2));
HXLINE( 174)						::haxe::IMap_obj::set(arr,index1,v);
            					}
            					else {
HXLINE( 177)						 ::Dynamic arr1 = arr->__GetItem(( (int)(index1) ));
HXDLIN( 177)						v = fop(arr1,this->expr(e2));
HXLINE( 178)						arr->__SetItem(( (int)(index1) ),v);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 181)				 ::hscript::Error e4 = ::hscript::Error_obj::EInvalidOp(op);
HXDLIN( 181)				HX_STACK_DO_THROW(e4);
            			}
            		}
HXLINE( 183)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Interp_obj,evalAssignOp,return )

 ::Dynamic Interp_obj::increment( ::hscript::Expr e,bool prefix,int delta){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_191_increment)
HXDLIN( 191)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)1: {
HXLINE( 192)				::String id = e->_hx_getString(0);
HXLINE( 193)				 ::Dynamic l = ::haxe::IMap_obj::get(this->locals,id);
HXLINE( 194)				 ::Dynamic v;
HXDLIN( 194)				if (hx::IsNull( l )) {
HXLINE( 194)					v = ::haxe::IMap_obj::get(this->variables,id);
            				}
            				else {
HXLINE( 194)					v =  ::Dynamic(l->__Field(HX_("r",72,00,00,00),hx::paccDynamic));
            				}
HXLINE( 195)				if (prefix) {
HXLINE( 196)					v = (v + delta);
HXLINE( 197)					if (hx::IsNull( l )) {
HXLINE( 197)						::haxe::IMap_obj::set(this->variables,id,v);
            					}
            					else {
HXLINE( 197)						l->__SetField(HX_("r",72,00,00,00),v,hx::paccDynamic);
            					}
            				}
            				else {
HXLINE( 199)					if (hx::IsNull( l )) {
HXLINE( 199)						::haxe::IMap_obj::set(this->variables,id,(v + delta));
            					}
            					else {
HXLINE( 199)						l->__SetField(HX_("r",72,00,00,00),(v + delta),hx::paccDynamic);
            					}
            				}
HXLINE( 200)				return v;
            			}
            			break;
            			case (int)5: {
HXLINE( 201)				::String f = e->_hx_getString(1);
HXDLIN( 201)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 202)				 ::Dynamic obj = this->expr(e1);
HXLINE( 203)				 ::Dynamic v1 = this->get(obj,f);
HXLINE( 204)				if (prefix) {
HXLINE( 205)					v1 = (v1 + delta);
HXLINE( 206)					this->set(obj,f,v1);
            				}
            				else {
HXLINE( 208)					this->set(obj,f,(v1 + delta));
            				}
HXLINE( 209)				return v1;
            			}
            			break;
            			case (int)16: {
HXLINE( 210)				 ::hscript::Expr index = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 210)				 ::hscript::Expr e2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 211)				 ::Dynamic arr = this->expr(e2);
HXLINE( 212)				 ::Dynamic index1 = this->expr(index);
HXLINE( 213)				if (::Std_obj::is(arr,hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 214)					int v2 = ( (int)(::haxe::IMap_obj::get(arr,index1)) );
HXLINE( 215)					if (prefix) {
HXLINE( 216)						v2 = (v2 + delta);
HXLINE( 217)						::haxe::IMap_obj::set(arr,index1,v2);
            					}
            					else {
HXLINE( 220)						::Dynamic _hx_tmp = arr;
HXDLIN( 220)						::haxe::IMap_obj::set(_hx_tmp,index1,(v2 + delta));
            					}
HXLINE( 222)					return v2;
            				}
            				else {
HXLINE( 225)					int v3 = ( (int)(arr->__GetItem(( (int)(index1) ))) );
HXLINE( 226)					if (prefix) {
HXLINE( 227)						v3 = (v3 + delta);
HXLINE( 228)						arr->__SetItem(( (int)(index1) ),v3);
            					}
            					else {
HXLINE( 230)						arr->__SetItem(( (int)(index1) ),(v3 + delta));
            					}
HXLINE( 231)					return v3;
            				}
            			}
            			break;
            			default:{
HXLINE( 234)				::String e3;
HXDLIN( 234)				if ((delta > (int)0)) {
HXLINE( 234)					e3 = HX_("++",a0,25,00,00);
            				}
            				else {
HXLINE( 234)					e3 = HX_("--",60,27,00,00);
            				}
HXDLIN( 234)				 ::hscript::Error e4 = ::hscript::Error_obj::EInvalidOp(e3);
HXDLIN( 234)				HX_STACK_DO_THROW(e4);
            			}
            		}
HXLINE( 191)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,increment,return )

 ::Dynamic Interp_obj::execute( ::hscript::Expr expr){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_238_execute)
HXLINE( 239)		this->depth = (int)0;
HXLINE( 241)		this->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 245)		this->declared = ::Array_obj< ::Dynamic>::__new();
HXLINE( 246)		return this->exprReturn(expr);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,execute,return )

 ::Dynamic Interp_obj::exprReturn( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_250_exprReturn)
HXDLIN( 250)		try {
            			HX_STACK_CATCHABLE( ::hscript::_Interp::Stop, 0);
HXLINE( 251)			return this->expr(e);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::hscript::_Interp::Stop >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::hscript::_Interp::Stop e1 = _hx_e;
HXLINE( 253)				switch((int)(_hx_getEnumValueIndex(e1))){
            					case (int)0: {
HXLINE( 254)						HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
            					}
            					break;
            					case (int)1: {
HXLINE( 255)						HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
            					}
            					break;
            					case (int)2: {
HXLINE( 257)						 ::Dynamic v = this->returnValue;
HXLINE( 258)						this->returnValue = null();
HXLINE( 259)						return v;
            					}
            					break;
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 250)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,exprReturn,return )

 ::haxe::ds::StringMap Interp_obj::duplicate( ::haxe::ds::StringMap h){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_265_duplicate)
HXLINE( 267)		 ::haxe::ds::StringMap h2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 271)		{
HXLINE( 271)			 ::Dynamic k = h->keys();
HXDLIN( 271)			while(( (bool)(k->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 271)				::String k1 = ( (::String)(k->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 272)				h2->set(k1,h->get(k1));
            			}
            		}
HXLINE( 273)		return h2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,duplicate,return )

void Interp_obj::restore(int old){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_277_restore)
HXDLIN( 277)		while((this->declared->length > old)){
HXLINE( 278)			 ::Dynamic d = this->declared->pop();
HXLINE( 279)			this->locals->set(( (::String)(d->__Field(HX_("n",6e,00,00,00),hx::paccDynamic)) ), ::Dynamic(d->__Field(HX_("old",a7,98,54,00),hx::paccDynamic)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,restore,(void))

 ::hscript::Expr Interp_obj::edef( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_287_edef)
HXDLIN( 287)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,edef,return )

 ::Dynamic Interp_obj::error( ::hscript::Error e,hx::Null< bool >  __o_rethrow){
bool rethrow = __o_rethrow.Default(false);
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_293_error)
HXDLIN( 293)		if (rethrow) {
HXDLIN( 293)			HX_STACK_DO_THROW(e);
            		}
            		else {
HXDLIN( 293)			HX_STACK_DO_THROW(e);
            		}
HXDLIN( 293)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,error,return )

void Interp_obj::rethrow( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_301_rethrow)
HXDLIN( 301)		HX_STACK_DO_THROW(e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,rethrow,(void))

 ::Dynamic Interp_obj::resolve(::String id){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_305_resolve)
HXLINE( 306)		 ::Dynamic l = this->locals->get(id);
HXLINE( 307)		if (hx::IsNotNull( l )) {
HXLINE( 308)			return  ::Dynamic(l->__Field(HX_("r",72,00,00,00),hx::paccDynamic));
            		}
HXLINE( 309)		 ::Dynamic v = this->variables->get(id);
HXLINE( 310)		bool _hx_tmp;
HXDLIN( 310)		if (hx::IsNull( v )) {
HXLINE( 310)			_hx_tmp = !(this->variables->exists(id));
            		}
            		else {
HXLINE( 310)			_hx_tmp = false;
            		}
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 311)			 ::hscript::Error e = ::hscript::Error_obj::EUnknownVariable(id);
HXDLIN( 311)			HX_STACK_DO_THROW(e);
            		}
HXLINE( 312)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,resolve,return )

 ::Dynamic Interp_obj::expr( ::hscript::Expr e){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_315_expr)
HXDLIN( 315)		 ::hscript::Interp _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 320)		switch((int)(_hx_getEnumValueIndex(e))){
            			case (int)0: {
HXLINE( 321)				 ::hscript::Const c = e->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXLINE( 322)				switch((int)(_hx_getEnumValueIndex(c))){
            					case (int)0: {
HXLINE( 323)						int v = c->_hx_getInt(0);
HXDLIN( 323)						return v;
            					}
            					break;
            					case (int)1: {
HXLINE( 324)						Float f = c->_hx_getFloat(0);
HXDLIN( 324)						return f;
            					}
            					break;
            					case (int)2: {
HXLINE( 325)						::String s = c->_hx_getString(0);
HXDLIN( 325)						return s;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 330)				::String id = e->_hx_getString(0);
HXLINE( 331)				return this->resolve(id);
            			}
            			break;
            			case (int)2: {
HXLINE( 332)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 332)				::String n = e->_hx_getString(0);
HXLINE( 333)				::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 333)				_hx_tmp->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("n",6e,00,00,00),n)
            					->setFixed(1,HX_("old",a7,98,54,00),::haxe::IMap_obj::get(this->locals,n))));
HXLINE( 334)				{
HXLINE( 334)					::Dynamic this1 = this->locals;
HXDLIN( 334)					 ::Dynamic value;
HXDLIN( 334)					if (hx::IsNull( e1 )) {
HXLINE( 334)						value = null();
            					}
            					else {
HXLINE( 334)						value = this->expr(e1);
            					}
HXDLIN( 334)					::haxe::IMap_obj::set(this1,n, ::Dynamic(hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("r",72,00,00,00),value)));
            				}
HXLINE( 335)				return null();
            			}
            			break;
            			case (int)3: {
HXLINE( 336)				 ::hscript::Expr e2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 337)				return this->expr(e2);
            			}
            			break;
            			case (int)4: {
HXLINE( 338)				::Array< ::Dynamic> exprs = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 339)				int old = this->declared->length;
HXLINE( 340)				 ::Dynamic v1 = null();
HXLINE( 341)				{
HXLINE( 341)					int _g = (int)0;
HXDLIN( 341)					while((_g < exprs->length)){
HXLINE( 341)						 ::hscript::Expr e3 = exprs->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 341)						_g = (_g + (int)1);
HXLINE( 342)						v1 = this->expr(e3);
            					}
            				}
HXLINE( 343)				this->restore(old);
HXLINE( 344)				return v1;
            			}
            			break;
            			case (int)5: {
HXLINE( 345)				::String f1 = e->_hx_getString(1);
HXDLIN( 345)				 ::hscript::Expr e4 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 346)				return this->get(this->expr(e4),f1);
            			}
            			break;
            			case (int)6: {
HXLINE( 347)				 ::hscript::Expr e21 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 347)				 ::hscript::Expr e11 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 347)				::String op = e->_hx_getString(0);
HXLINE( 348)				 ::Dynamic fop = ::haxe::IMap_obj::get(this->binops,op);
HXLINE( 349)				if (hx::IsNull( fop )) {
HXLINE( 349)					 ::hscript::Error e5 = ::hscript::Error_obj::EInvalidOp(op);
HXDLIN( 349)					HX_STACK_DO_THROW(e5);
            				}
HXLINE( 350)				return fop(e11,e21);
            			}
            			break;
            			case (int)7: {
HXLINE( 351)				 ::hscript::Expr e6 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 351)				bool prefix = e->_hx_getBool(1);
HXDLIN( 351)				::String op1 = e->_hx_getString(0);
HXLINE( 352)				::String _hx_switch_0 = op1;
            				if (  (_hx_switch_0==HX_("!",21,00,00,00)) ){
HXLINE( 354)					return hx::IsNotEq( this->expr(e6),true );
HXDLIN( 354)					goto _hx_goto_51;
            				}
            				if (  (_hx_switch_0==HX_("++",a0,25,00,00)) ){
HXLINE( 358)					return this->increment(e6,prefix,(int)1);
HXDLIN( 358)					goto _hx_goto_51;
            				}
            				if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE( 356)					return -(this->expr(e6));
HXDLIN( 356)					goto _hx_goto_51;
            				}
            				if (  (_hx_switch_0==HX_("--",60,27,00,00)) ){
HXLINE( 360)					return this->increment(e6,prefix,(int)-1);
HXDLIN( 360)					goto _hx_goto_51;
            				}
            				if (  (_hx_switch_0==HX_("~",7e,00,00,00)) ){
HXLINE( 365)					return ~(( (int)(this->expr(e6)) ));
HXDLIN( 365)					goto _hx_goto_51;
            				}
            				/* default */{
HXLINE( 368)					 ::hscript::Error e7 = ::hscript::Error_obj::EInvalidOp(op1);
HXDLIN( 368)					HX_STACK_DO_THROW(e7);
            				}
            				_hx_goto_51:;
            			}
            			break;
            			case (int)8: {
HXLINE( 370)				::Array< ::Dynamic> params = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 370)				 ::hscript::Expr e8 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 371)				::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 372)				{
HXLINE( 372)					int _g1 = (int)0;
HXDLIN( 372)					while((_g1 < params->length)){
HXLINE( 372)						 ::hscript::Expr p = params->__get(_g1).StaticCast<  ::hscript::Expr >();
HXDLIN( 372)						_g1 = (_g1 + (int)1);
HXLINE( 373)						args->push(this->expr(p));
            					}
            				}
HXLINE( 375)				if ((_hx_getEnumValueIndex(e8) == (int)5)) {
HXLINE( 376)					::String f2 = e8->_hx_getString(1);
HXDLIN( 376)					 ::hscript::Expr e9 = e8->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 377)					 ::Dynamic obj = this->expr(e9);
HXLINE( 378)					if (hx::IsNull( obj )) {
HXLINE( 378)						 ::hscript::Error e10 = ::hscript::Error_obj::EInvalidAccess(f2);
HXDLIN( 378)						HX_STACK_DO_THROW(e10);
            					}
HXLINE( 379)					return this->fcall(obj,f2,args);
            				}
            				else {
HXLINE( 381)					return this->call(null(),this->expr(e8),args);
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 383)				 ::hscript::Expr e22 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 383)				 ::hscript::Expr e12 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 383)				 ::hscript::Expr econd = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 384)				if (hx::IsEq( this->expr(econd),true )) {
HXLINE( 384)					return this->expr(e12);
            				}
            				else {
HXLINE( 384)					if (hx::IsNull( e22 )) {
HXLINE( 384)						return null();
            					}
            					else {
HXLINE( 384)						return this->expr(e22);
            					}
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 385)				 ::hscript::Expr e13 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 385)				 ::hscript::Expr econd1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 386)				this->whileLoop(econd1,e13);
HXLINE( 387)				return null();
            			}
            			break;
            			case (int)11: {
HXLINE( 391)				 ::hscript::Expr e14 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 391)				 ::hscript::Expr it = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 391)				::String v2 = e->_hx_getString(0);
HXLINE( 392)				this->forLoop(v2,it,e14);
HXLINE( 393)				return null();
            			}
            			break;
            			case (int)12: {
HXLINE( 395)				HX_STACK_DO_THROW(::hscript::_Interp::Stop_obj::SBreak_dyn());
            			}
            			break;
            			case (int)13: {
HXLINE( 397)				HX_STACK_DO_THROW(::hscript::_Interp::Stop_obj::SContinue_dyn());
            			}
            			break;
            			case (int)14: {
            				HX_BEGIN_LOCAL_FUNC_S7(hx::LocalFunc,_hx_Closure_0,::String,name, ::hscript::Expr,fexpr, ::hscript::Interp,_gthis,int,minParams, ::hscript::Interp,me, ::haxe::ds::StringMap,capturedLocals,::Array< ::Dynamic>,params1) HXARGC(1)
            				 ::Dynamic _hx_run(::cpp::VirtualArray args1){
            					HX_STACKFRAME(&_hx_pos_f37559d470356c9e_410_expr)
HXLINE( 411)					if ((args1->get_length() != params1->length)) {
HXLINE( 412)						if ((args1->get_length() < minParams)) {
HXLINE( 413)							::String str = (((HX_("Invalid number of parameters. Got ",cb,2b,d9,b1) + args1->get_length()) + HX_(", required ",ed,0c,66,93)) + minParams);
HXLINE( 414)							if (hx::IsNotNull( name )) {
HXLINE( 414)								str = (str + ((HX_(" for function '",f6,90,ab,a0) + name) + HX_("'",27,00,00,00)));
            							}
HXLINE( 415)							HX_STACK_DO_THROW(str);
            						}
HXLINE( 418)						::cpp::VirtualArray args2 = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 419)						int extraParams = (args1->get_length() - minParams);
HXLINE( 420)						int pos = (int)0;
HXLINE( 421)						{
HXLINE( 421)							int _g3 = (int)0;
HXDLIN( 421)							while((_g3 < params1->length)){
HXLINE( 421)								 ::Dynamic p2 = params1->__get(_g3);
HXDLIN( 421)								_g3 = (_g3 + (int)1);
HXLINE( 422)								if (( (bool)(p2->__Field(HX_("opt",33,9c,54,00),hx::paccDynamic)) )) {
HXLINE( 423)									if ((extraParams > (int)0)) {
HXLINE( 424)										pos = (pos + (int)1);
HXDLIN( 424)										args2->push(args1->__get((pos - (int)1)));
HXLINE( 425)										extraParams = (extraParams - (int)1);
            									}
            									else {
HXLINE( 427)										args2->push(null());
            									}
            								}
            								else {
HXLINE( 429)									pos = (pos + (int)1);
HXDLIN( 429)									args2->push(args1->__get((pos - (int)1)));
            								}
            							}
            						}
HXLINE( 430)						args1 = args2;
            					}
HXLINE( 432)					 ::haxe::ds::StringMap old1 = me->locals;
HXDLIN( 432)					int depth = me->depth;
HXLINE( 433)					me->depth++;
HXLINE( 434)					me->locals = me->duplicate(capturedLocals);
HXLINE( 435)					{
HXLINE( 435)						int _g11 = (int)0;
HXDLIN( 435)						int _g4 = params1->length;
HXDLIN( 435)						while((_g11 < _g4)){
HXLINE( 435)							_g11 = (_g11 + (int)1);
HXDLIN( 435)							int i = (_g11 - (int)1);
HXLINE( 436)							::haxe::IMap_obj::set(me->locals, ::Dynamic(params1->__get(i)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)), ::Dynamic(hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("r",72,00,00,00),args1->__get(i))));
            						}
            					}
HXLINE( 437)					 ::Dynamic r = null();
HXLINE( 438)					if (_gthis->inTry) {
HXLINE( 439)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 440)							r = me->exprReturn(fexpr);
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e15 = _hx_e;
HXLINE( 442)								me->locals = old1;
HXLINE( 443)								me->depth = depth;
HXLINE( 447)								HX_STACK_DO_THROW(e15);
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					else {
HXLINE( 451)						r = me->exprReturn(fexpr);
            					}
HXLINE( 452)					me->locals = old1;
HXLINE( 453)					me->depth = depth;
HXLINE( 454)					return r;
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 401)				::String name = e->_hx_getString(2);
HXDLIN( 401)				 ::hscript::Expr fexpr = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 401)				::Array< ::Dynamic> params1 = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 402)				 ::haxe::ds::StringMap capturedLocals = this->duplicate(this->locals);
HXLINE( 403)				 ::hscript::Interp me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 404)				bool hasOpt = false;
HXDLIN( 404)				int minParams = (int)0;
HXLINE( 405)				{
HXLINE( 405)					int _g2 = (int)0;
HXDLIN( 405)					while((_g2 < params1->length)){
HXLINE( 405)						 ::Dynamic p1 = params1->__get(_g2);
HXDLIN( 405)						_g2 = (_g2 + (int)1);
HXLINE( 406)						if (( (bool)(p1->__Field(HX_("opt",33,9c,54,00),hx::paccDynamic)) )) {
HXLINE( 407)							hasOpt = true;
            						}
            						else {
HXLINE( 409)							minParams = (minParams + (int)1);
            						}
            					}
            				}
HXLINE( 410)				 ::Dynamic f3 =  ::Dynamic(new _hx_Closure_0(name,fexpr,_gthis,minParams,me,capturedLocals,params1));
HXLINE( 456)				 ::Dynamic f4 = ::Reflect_obj::makeVarArgs(f3);
HXLINE( 457)				if (hx::IsNotNull( name )) {
HXLINE( 458)					if ((this->depth == (int)0)) {
HXLINE( 460)						::haxe::IMap_obj::set(this->variables,name,f4);
            					}
            					else {
HXLINE( 463)						::Array< ::Dynamic> _hx_tmp1 = this->declared;
HXDLIN( 463)						 ::Dynamic _hx_tmp2 = ::haxe::IMap_obj::get(this->locals,name);
HXDLIN( 463)						_hx_tmp1->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("n",6e,00,00,00),name)
            							->setFixed(1,HX_("old",a7,98,54,00),_hx_tmp2)));
HXLINE( 464)						 ::Dynamic ref =  ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),f4));
HXLINE( 465)						::haxe::IMap_obj::set(this->locals,name,ref);
HXLINE( 466)						capturedLocals->set(name,ref);
            					}
            				}
HXLINE( 469)				return f4;
            			}
            			break;
            			case (int)15: {
HXLINE( 398)				 ::hscript::Expr e16 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 399)				 ::Dynamic _hx_tmp3;
HXDLIN( 399)				if (hx::IsNull( e16 )) {
HXLINE( 399)					_hx_tmp3 = null();
            				}
            				else {
HXLINE( 399)					_hx_tmp3 = this->expr(e16);
            				}
HXDLIN( 399)				this->returnValue = _hx_tmp3;
HXLINE( 400)				HX_STACK_DO_THROW(::hscript::_Interp::Stop_obj::SReturn_dyn());
            			}
            			break;
            			case (int)16: {
HXLINE( 512)				 ::hscript::Expr index = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 512)				 ::hscript::Expr e17 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 513)				 ::Dynamic arr = this->expr(e17);
HXLINE( 514)				 ::Dynamic index1 = this->expr(index);
HXLINE( 515)				if (::Std_obj::is(arr,hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 516)					return ::haxe::IMap_obj::get(arr,index1);
            				}
            				else {
HXLINE( 519)					return arr->__GetItem(( (int)(index1) ));
            				}
            			}
            			break;
            			case (int)17: {
HXLINE( 470)				::Array< ::Dynamic> arr1 = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 471)				bool _hx_tmp4;
HXDLIN( 471)				if ((arr1->length > (int)0)) {
HXLINE( 471)					 ::hscript::Expr _g5 = arr1->__get((int)0).StaticCast<  ::hscript::Expr >();
HXDLIN( 471)					if ((_hx_getEnumValueIndex(_g5) == (int)6)) {
HXLINE( 471)						if ((_g5->_hx_getString(0) == HX_("=>",61,35,00,00))) {
HXLINE( 471)							_hx_tmp4 = true;
            						}
            						else {
HXLINE( 471)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 471)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 471)					_hx_tmp4 = false;
            				}
HXDLIN( 471)				if (_hx_tmp4) {
HXLINE( 472)					bool isAllString = true;
HXLINE( 473)					bool isAllInt = true;
HXLINE( 474)					bool isAllObject = true;
HXLINE( 475)					bool isAllEnum = true;
HXLINE( 476)					::cpp::VirtualArray keys = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 477)					::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 478)					{
HXLINE( 478)						int _g12 = (int)0;
HXDLIN( 478)						while((_g12 < arr1->length)){
HXLINE( 478)							 ::hscript::Expr e18 = arr1->__get(_g12).StaticCast<  ::hscript::Expr >();
HXDLIN( 478)							_g12 = (_g12 + (int)1);
HXLINE( 479)							if ((_hx_getEnumValueIndex(e18) == (int)6)) {
HXLINE( 479)								if ((e18->_hx_getString(0) == HX_("=>",61,35,00,00))) {
HXLINE( 480)									 ::hscript::Expr eValue = e18->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 480)									 ::hscript::Expr eKey = e18->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 480)									{
HXLINE( 481)										 ::Dynamic key = this->expr(eKey);
HXLINE( 482)										 ::Dynamic value1 = this->expr(eValue);
HXLINE( 483)										if (isAllString) {
HXLINE( 483)											isAllString = ::Std_obj::is(key,hx::ClassOf< ::String >());
            										}
            										else {
HXLINE( 483)											isAllString = false;
            										}
HXLINE( 484)										if (isAllInt) {
HXLINE( 484)											isAllInt = ::Std_obj::is(key,hx::ClassOf< int >());
            										}
            										else {
HXLINE( 484)											isAllInt = false;
            										}
HXLINE( 485)										if (isAllObject) {
HXLINE( 485)											isAllObject = ::Reflect_obj::isObject(key);
            										}
            										else {
HXLINE( 485)											isAllObject = false;
            										}
HXLINE( 486)										if (isAllEnum) {
HXLINE( 486)											isAllEnum = ::Reflect_obj::isEnumValue(key);
            										}
            										else {
HXLINE( 486)											isAllEnum = false;
            										}
HXLINE( 487)										keys->push(key);
HXLINE( 488)										values->push(value1);
            									}
            								}
            								else {
HXLINE( 490)									HX_STACK_DO_THROW(HX_("=> expected",17,e5,65,e5));
            								}
            							}
            							else {
HXLINE( 490)								HX_STACK_DO_THROW(HX_("=> expected",17,e5,65,e5));
            							}
            						}
            					}
HXLINE( 493)					 ::Dynamic map;
HXLINE( 494)					if (isAllInt) {
HXLINE( 493)						map =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 495)						if (isAllString) {
HXLINE( 493)							map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 496)							if (isAllEnum) {
HXLINE( 493)								map =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 497)								if (isAllObject) {
HXLINE( 493)									map =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 498)									HX_STACK_DO_THROW(HX_("Inconsistent key types",af,4f,50,a9));
            								}
            							}
            						}
            					}
HXLINE( 500)					{
HXLINE( 500)						int _g21 = (int)0;
HXDLIN( 500)						int _g13 = keys->get_length();
HXDLIN( 500)						while((_g21 < _g13)){
HXLINE( 500)							_g21 = (_g21 + (int)1);
HXDLIN( 500)							int n1 = (_g21 - (int)1);
HXLINE( 501)							::Dynamic _hx_tmp5 = map;
HXDLIN( 501)							::haxe::IMap_obj::set(_hx_tmp5,keys->__get(n1),values->__get(n1));
            						}
            					}
HXLINE( 503)					return map;
            				}
            				else {
HXLINE( 506)					::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE( 507)					{
HXLINE( 507)						int _g14 = (int)0;
HXDLIN( 507)						while((_g14 < arr1->length)){
HXLINE( 507)							 ::hscript::Expr e19 = arr1->__get(_g14).StaticCast<  ::hscript::Expr >();
HXDLIN( 507)							_g14 = (_g14 + (int)1);
HXLINE( 508)							a->push(this->expr(e19));
            						}
            					}
HXLINE( 510)					return a;
            				}
            			}
            			break;
            			case (int)18: {
HXLINE( 521)				::Array< ::Dynamic> params2 = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 521)				::String cl = e->_hx_getString(0);
HXLINE( 522)				::cpp::VirtualArray a1 = ::cpp::VirtualArray_obj::__new();
HXLINE( 523)				{
HXLINE( 523)					int _g6 = (int)0;
HXDLIN( 523)					while((_g6 < params2->length)){
HXLINE( 523)						 ::hscript::Expr e20 = params2->__get(_g6).StaticCast<  ::hscript::Expr >();
HXDLIN( 523)						_g6 = (_g6 + (int)1);
HXLINE( 524)						a1->push(this->expr(e20));
            					}
            				}
HXLINE( 525)				return this->cnew(cl,a1);
            			}
            			break;
            			case (int)19: {
HXLINE( 526)				 ::hscript::Expr e23 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 527)				HX_STACK_DO_THROW(this->expr(e23));
            			}
            			break;
            			case (int)20: {
HXLINE( 528)				 ::hscript::Expr ecatch = e->_hx_getObject(3).StaticCast<  ::hscript::Expr >();
HXDLIN( 528)				::String n2 = e->_hx_getString(1);
HXDLIN( 528)				 ::hscript::Expr e24 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 529)				int old2 = this->declared->length;
HXLINE( 530)				bool oldTry = this->inTry;
HXLINE( 531)				try {
            					HX_STACK_CATCHABLE( ::hscript::_Interp::Stop, 0);
            					HX_STACK_CATCHABLE( ::Dynamic, 1);
HXLINE( 532)					this->inTry = true;
HXLINE( 533)					 ::Dynamic v3 = this->expr(e24);
HXLINE( 534)					this->restore(old2);
HXLINE( 535)					this->inTry = oldTry;
HXLINE( 536)					return v3;
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::hscript::_Interp::Stop >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::hscript::_Interp::Stop err = _hx_e;
HXLINE( 538)						this->inTry = oldTry;
HXLINE( 539)						HX_STACK_DO_THROW(err);
            					}
            					else if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic err1 = _hx_e;
HXLINE( 542)						this->restore(old2);
HXLINE( 543)						this->inTry = oldTry;
HXLINE( 545)						::Array< ::Dynamic> _hx_tmp6 = this->declared;
HXDLIN( 545)						_hx_tmp6->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("n",6e,00,00,00),n2)
            							->setFixed(1,HX_("old",a7,98,54,00),::haxe::IMap_obj::get(this->locals,n2))));
HXLINE( 546)						::haxe::IMap_obj::set(this->locals,n2, ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),err1)));
HXLINE( 547)						 ::Dynamic v4 = this->expr(ecatch);
HXLINE( 548)						this->restore(old2);
HXLINE( 549)						return v4;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)21: {
HXLINE( 551)				::Array< ::Dynamic> fl = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 552)				 ::Dynamic o =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 553)				{
HXLINE( 553)					int _g7 = (int)0;
HXDLIN( 553)					while((_g7 < fl->length)){
HXLINE( 553)						 ::Dynamic f5 = fl->__get(_g7);
HXDLIN( 553)						_g7 = (_g7 + (int)1);
HXLINE( 554)						::String f6 = ( (::String)(f5->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXDLIN( 554)						this->set(o,f6,this->expr(f5->__Field(HX_("e",65,00,00,00),hx::paccDynamic)));
            					}
            				}
HXLINE( 555)				return o;
            			}
            			break;
            			case (int)22: {
HXLINE( 556)				 ::hscript::Expr e25 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 556)				 ::hscript::Expr e110 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 556)				 ::hscript::Expr econd2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 557)				if (hx::IsEq( this->expr(econd2),true )) {
HXLINE( 557)					return this->expr(e110);
            				}
            				else {
HXLINE( 557)					return this->expr(e25);
            				}
            			}
            			break;
            			case (int)23: {
HXLINE( 558)				 ::hscript::Expr def = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 558)				::Array< ::Dynamic> cases = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 558)				 ::hscript::Expr e26 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 559)				 ::Dynamic val = this->expr(e26);
HXLINE( 560)				bool match = false;
HXLINE( 561)				{
HXLINE( 561)					int _g8 = (int)0;
HXDLIN( 561)					while((_g8 < cases->length)){
HXLINE( 561)						 ::Dynamic c1 = cases->__get(_g8);
HXDLIN( 561)						_g8 = (_g8 + (int)1);
HXLINE( 562)						{
HXLINE( 562)							int _g15 = (int)0;
HXDLIN( 562)							::Array< ::Dynamic> _g22 = ( (::Array< ::Dynamic>)(c1->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) );
HXDLIN( 562)							while((_g15 < _g22->length)){
HXLINE( 562)								 ::hscript::Expr v5 = _g22->__get(_g15).StaticCast<  ::hscript::Expr >();
HXDLIN( 562)								_g15 = (_g15 + (int)1);
HXLINE( 563)								if (hx::IsEq( this->expr(v5),val )) {
HXLINE( 564)									match = true;
HXLINE( 565)									goto _hx_goto_62;
            								}
            							}
            							_hx_goto_62:;
            						}
HXLINE( 567)						if (match) {
HXLINE( 568)							val = this->expr(c1->__Field(HX_("expr",35,fd,1d,43),hx::paccDynamic));
HXLINE( 569)							goto _hx_goto_61;
            						}
            					}
            					_hx_goto_61:;
            				}
HXLINE( 572)				if (!(match)) {
HXLINE( 573)					if (hx::IsNull( def )) {
HXLINE( 573)						val = null();
            					}
            					else {
HXLINE( 573)						val = this->expr(def);
            					}
            				}
HXLINE( 574)				return val;
            			}
            			break;
            			case (int)24: {
HXLINE( 388)				 ::hscript::Expr e27 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 388)				 ::hscript::Expr econd3 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 389)				this->doWhileLoop(econd3,e27);
HXLINE( 390)				return null();
            			}
            			break;
            			case (int)25: {
HXLINE( 575)				 ::hscript::Expr e28 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXLINE( 576)				return this->expr(e28);
            			}
            			break;
            		}
HXLINE( 320)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,expr,return )

void Interp_obj::doWhileLoop( ::hscript::Expr econd, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_581_doWhileLoop)
HXLINE( 582)		int old = this->declared->length;
HXLINE( 583)		while(true){
HXLINE( 584)			try {
            				HX_STACK_CATCHABLE( ::hscript::_Interp::Stop, 0);
HXLINE( 585)				this->expr(e);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::hscript::_Interp::Stop >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::hscript::_Interp::Stop err = _hx_e;
HXLINE( 587)					switch((int)(_hx_getEnumValueIndex(err))){
            						case (int)0: {
HXLINE( 589)							goto _hx_goto_65;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 590)							HX_STACK_DO_THROW(err);
            						}
            						break;
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 583)			if (!(hx::IsEq( this->expr(econd),true ))) {
HXLINE( 583)				goto _hx_goto_65;
            			}
            		}
            		_hx_goto_65:;
HXLINE( 595)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,doWhileLoop,(void))

void Interp_obj::whileLoop( ::hscript::Expr econd, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_598_whileLoop)
HXLINE( 599)		int old = this->declared->length;
HXLINE( 600)		while(hx::IsEq( this->expr(econd),true )){
HXLINE( 601)			try {
            				HX_STACK_CATCHABLE( ::hscript::_Interp::Stop, 0);
HXLINE( 602)				this->expr(e);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::hscript::_Interp::Stop >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::hscript::_Interp::Stop err = _hx_e;
HXLINE( 604)					switch((int)(_hx_getEnumValueIndex(err))){
            						case (int)0: {
HXLINE( 606)							goto _hx_goto_67;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 607)							HX_STACK_DO_THROW(err);
            						}
            						break;
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_67:;
HXLINE( 611)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,whileLoop,(void))

 ::Dynamic Interp_obj::makeIterator( ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_614_makeIterator)
HXLINE( 618)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 618)			v = v->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic)();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 620)		bool _hx_tmp;
HXDLIN( 620)		if (hx::IsNotNull(  ::Dynamic(v->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)) )) {
HXLINE( 620)			_hx_tmp = hx::IsNull(  ::Dynamic(v->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 620)			_hx_tmp = true;
            		}
HXDLIN( 620)		if (_hx_tmp) {
HXLINE( 620)			 ::hscript::Error e1 = ::hscript::Error_obj::EInvalidIterator(v);
HXDLIN( 620)			HX_STACK_DO_THROW(e1);
            		}
HXLINE( 621)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,makeIterator,return )

void Interp_obj::forLoop(::String n, ::hscript::Expr it, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_624_forLoop)
HXLINE( 625)		int old = this->declared->length;
HXLINE( 626)		::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 626)		_hx_tmp->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("n",6e,00,00,00),n)
            			->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n))));
HXLINE( 627)		 ::Dynamic it1 = this->makeIterator(this->expr(it));
HXLINE( 628)		while(( (bool)(it1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 629)			{
HXLINE( 629)				::Dynamic this1 = this->locals;
HXDLIN( 629)				( ( ::haxe::ds::StringMap)(this1) )->set(n, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),it1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)())));
            			}
HXLINE( 630)			try {
            				HX_STACK_CATCHABLE( ::hscript::_Interp::Stop, 0);
HXLINE( 631)				this->expr(e);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::hscript::_Interp::Stop >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::hscript::_Interp::Stop err = _hx_e;
HXLINE( 633)					switch((int)(_hx_getEnumValueIndex(err))){
            						case (int)0: {
HXLINE( 635)							goto _hx_goto_70;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 636)							HX_STACK_DO_THROW(err);
            						}
            						break;
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_70:;
HXLINE( 640)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,forLoop,(void))

bool Interp_obj::isMap( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_644_isMap)
HXDLIN( 644)		return ::Std_obj::is(o,hx::ClassOf< ::haxe::IMap >());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,isMap,return )

 ::Dynamic Interp_obj::getMapValue( ::Dynamic map, ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_648_getMapValue)
HXDLIN( 648)		return ::haxe::IMap_obj::get(map,key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,getMapValue,return )

void Interp_obj::setMapValue( ::Dynamic map, ::Dynamic key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_652_setMapValue)
HXDLIN( 652)		::haxe::IMap_obj::set(map,key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,setMapValue,(void))

 ::Dynamic Interp_obj::get( ::Dynamic o,::String f){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_655_get)
HXLINE( 656)		if (hx::IsNull( o )) {
HXLINE( 656)			 ::hscript::Error e = ::hscript::Error_obj::EInvalidAccess(f);
HXDLIN( 656)			HX_STACK_DO_THROW(e);
            		}
HXLINE( 657)		return ::Reflect_obj::getProperty(o,f);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,get,return )

 ::Dynamic Interp_obj::set( ::Dynamic o,::String f, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_671_set)
HXLINE( 672)		if (hx::IsNull( o )) {
HXLINE( 672)			 ::hscript::Error e = ::hscript::Error_obj::EInvalidAccess(f);
HXDLIN( 672)			HX_STACK_DO_THROW(e);
            		}
HXLINE( 673)		::Reflect_obj::setProperty(o,f,v);
HXLINE( 674)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,set,return )

 ::Dynamic Interp_obj::fcall( ::Dynamic o,::String f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_678_fcall)
HXDLIN( 678)		return this->call(o,this->get(o,f),args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,fcall,return )

 ::Dynamic Interp_obj::call( ::Dynamic o, ::Dynamic f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_682_call)
HXDLIN( 682)		return ::Reflect_obj::callMethod(o,f,args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,call,return )

 ::Dynamic Interp_obj::cnew(::String cl,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_685_cnew)
HXLINE( 686)		hx::Class c = ::Type_obj::resolveClass(cl);
HXLINE( 687)		if (hx::IsNull( c )) {
HXLINE( 687)			c = this->resolve(cl);
            		}
HXLINE( 688)		return ::Type_obj::createInstance(c,args);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,cnew,return )


hx::ObjectPtr< Interp_obj > Interp_obj::__new() {
	hx::ObjectPtr< Interp_obj > __this = new Interp_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Interp_obj > Interp_obj::__alloc(hx::Ctx *_hx_ctx) {
	Interp_obj *__this = (Interp_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Interp_obj), true, "hscript.Interp"));
	*(void **)__this = Interp_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Interp_obj::Interp_obj()
{
}

void Interp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interp);
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(locals,"locals");
	HX_MARK_MEMBER_NAME(binops,"binops");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(inTry,"inTry");
	HX_MARK_MEMBER_NAME(declared,"declared");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_END_CLASS();
}

void Interp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(locals,"locals");
	HX_VISIT_MEMBER_NAME(binops,"binops");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(inTry,"inTry");
	HX_VISIT_MEMBER_NAME(declared,"declared");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
}

hx::Val Interp_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"edef") ) { return hx::Val( edef_dyn() ); }
		if (HX_FIELD_EQ(inName,"expr") ) { return hx::Val( expr_dyn() ); }
		if (HX_FIELD_EQ(inName,"call") ) { return hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"cnew") ) { return hx::Val( cnew_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth ); }
		if (HX_FIELD_EQ(inName,"inTry") ) { return hx::Val( inTry ); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMap") ) { return hx::Val( isMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"fcall") ) { return hx::Val( fcall_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locals") ) { return hx::Val( locals ); }
		if (HX_FIELD_EQ(inName,"binops") ) { return hx::Val( binops ); }
		if (HX_FIELD_EQ(inName,"assign") ) { return hx::Val( assign_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"initOps") ) { return hx::Val( initOps_dyn() ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"restore") ) { return hx::Val( restore_dyn() ); }
		if (HX_FIELD_EQ(inName,"rethrow") ) { return hx::Val( rethrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn() ); }
		if (HX_FIELD_EQ(inName,"forLoop") ) { return hx::Val( forLoop_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"declared") ) { return hx::Val( declared ); }
		if (HX_FIELD_EQ(inName,"posInfos") ) { return hx::Val( posInfos_dyn() ); }
		if (HX_FIELD_EQ(inName,"assignOp") ) { return hx::Val( assignOp_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return hx::Val( variables ); }
		if (HX_FIELD_EQ(inName,"increment") ) { return hx::Val( increment_dyn() ); }
		if (HX_FIELD_EQ(inName,"duplicate") ) { return hx::Val( duplicate_dyn() ); }
		if (HX_FIELD_EQ(inName,"whileLoop") ) { return hx::Val( whileLoop_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"exprReturn") ) { return hx::Val( exprReturn_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return hx::Val( returnValue ); }
		if (HX_FIELD_EQ(inName,"doWhileLoop") ) { return hx::Val( doWhileLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMapValue") ) { return hx::Val( getMapValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMapValue") ) { return hx::Val( setMapValue_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"evalAssignOp") ) { return hx::Val( evalAssignOp_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeIterator") ) { return hx::Val( makeIterator_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Interp_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inTry") ) { inTry=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locals") ) { locals=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"binops") ) { binops=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"declared") ) { declared=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("variables","\xb7","\xe2","\x62","\x82"));
	outFields->push(HX_HCSTRING("locals","\xa8","\x74","\xbf","\x59"));
	outFields->push(HX_HCSTRING("binops","\xcb","\x59","\x16","\xed"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	outFields->push(HX_HCSTRING("inTry","\x56","\x82","\x08","\xbe"));
	outFields->push(HX_HCSTRING("declared","\xfa","\x58","\xbc","\xc4"));
	outFields->push(HX_HCSTRING("returnValue","\xa1","\x4c","\x95","\x3e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Interp_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Interp_obj,variables),HX_HCSTRING("variables","\xb7","\xe2","\x62","\x82")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Interp_obj,locals),HX_HCSTRING("locals","\xa8","\x74","\xbf","\x59")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Interp_obj,binops),HX_HCSTRING("binops","\xcb","\x59","\x16","\xed")},
	{hx::fsInt,(int)offsetof(Interp_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{hx::fsBool,(int)offsetof(Interp_obj,inTry),HX_HCSTRING("inTry","\x56","\x82","\x08","\xbe")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Interp_obj,declared),HX_HCSTRING("declared","\xfa","\x58","\xbc","\xc4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Interp_obj,returnValue),HX_HCSTRING("returnValue","\xa1","\x4c","\x95","\x3e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Interp_obj_sStaticStorageInfo = 0;
#endif

static ::String Interp_obj_sMemberFields[] = {
	HX_HCSTRING("variables","\xb7","\xe2","\x62","\x82"),
	HX_HCSTRING("locals","\xa8","\x74","\xbf","\x59"),
	HX_HCSTRING("binops","\xcb","\x59","\x16","\xed"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("inTry","\x56","\x82","\x08","\xbe"),
	HX_HCSTRING("declared","\xfa","\x58","\xbc","\xc4"),
	HX_HCSTRING("returnValue","\xa1","\x4c","\x95","\x3e"),
	HX_HCSTRING("posInfos","\x11","\x82","\x2e","\x5a"),
	HX_HCSTRING("initOps","\x02","\x63","\x8b","\xcb"),
	HX_HCSTRING("assign","\x2f","\x46","\x06","\x4c"),
	HX_HCSTRING("assignOp","\x30","\xb5","\xc7","\x0e"),
	HX_HCSTRING("evalAssignOp","\xec","\xd8","\x94","\x19"),
	HX_HCSTRING("increment","\x2f","\x06","\xff","\x31"),
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	HX_HCSTRING("exprReturn","\xc5","\x6b","\xed","\x86"),
	HX_HCSTRING("duplicate","\x8b","\x21","\x17","\xa1"),
	HX_HCSTRING("restore","\x4e","\x67","\xb0","\x6a"),
	HX_HCSTRING("edef","\x80","\xc6","\x0e","\x43"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("rethrow","\x93","\xb0","\x2a","\xf6"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("expr","\x35","\xfd","\x1d","\x43"),
	HX_HCSTRING("doWhileLoop","\xaa","\x01","\x97","\x3a"),
	HX_HCSTRING("whileLoop","\xb5","\x42","\x98","\xe1"),
	HX_HCSTRING("makeIterator","\xfc","\xdd","\x72","\xd8"),
	HX_HCSTRING("forLoop","\x0d","\x52","\x69","\xc9"),
	HX_HCSTRING("isMap","\xd2","\x34","\x51","\xc1"),
	HX_HCSTRING("getMapValue","\xeb","\xb1","\xee","\xce"),
	HX_HCSTRING("setMapValue","\xf7","\xb8","\x5b","\xd9"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("fcall","\x04","\x44","\x99","\xfc"),
	HX_HCSTRING("call","\x9e","\x18","\xba","\x41"),
	HX_HCSTRING("cnew","\xdd","\xef","\xc3","\x41"),
	::String(null()) };

static void Interp_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Interp_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Interp_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Interp_obj::__mClass,"__mClass");
};

#endif

hx::Class Interp_obj::__mClass;

void Interp_obj::__register()
{
	hx::Object *dummy = new Interp_obj;
	Interp_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hscript.Interp","\x8f","\x7c","\xf0","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Interp_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Interp_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Interp_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Interp_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interp_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
