// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99143fe9fb0bb031_141_new,"openfl.geom.Matrix","new",0xd1b9ff67,"openfl.geom.Matrix.new","openfl/geom/Matrix.hx",141,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_161_clone,"openfl.geom.Matrix","clone",0xe2f85224,"openfl.geom.Matrix.clone","openfl/geom/Matrix.hx",161,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_184_concat,"openfl.geom.Matrix","concat",0x6fd1b86d,"openfl.geom.Matrix.concat","openfl/geom/Matrix.hx",184,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_205_copyColumnFrom,"openfl.geom.Matrix","copyColumnFrom",0xa86bc7ce,"openfl.geom.Matrix.copyColumnFrom","openfl/geom/Matrix.hx",205,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_231_copyColumnTo,"openfl.geom.Matrix","copyColumnTo",0xb6db66df,"openfl.geom.Matrix.copyColumnTo","openfl/geom/Matrix.hx",231,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_258_copyFrom,"openfl.geom.Matrix","copyFrom",0xb7b00358,"openfl.geom.Matrix.copyFrom","openfl/geom/Matrix.hx",258,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_272_copyRowFrom,"openfl.geom.Matrix","copyRowFrom",0xadd25376,"openfl.geom.Matrix.copyRowFrom","openfl/geom/Matrix.hx",272,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_295_copyRowTo,"openfl.geom.Matrix","copyRowTo",0xe92c3887,"openfl.geom.Matrix.copyRowTo","openfl/geom/Matrix.hx",295,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_338_createBox,"openfl.geom.Matrix","createBox",0xbfa242b6,"openfl.geom.Matrix.createBox","openfl/geom/Matrix.hx",338,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_403_createGradientBox,"openfl.geom.Matrix","createGradientBox",0xa2dcb9a6,"openfl.geom.Matrix.createGradientBox","openfl/geom/Matrix.hx",403,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_446_deltaTransformPoint,"openfl.geom.Matrix","deltaTransformPoint",0xeb963a63,"openfl.geom.Matrix.deltaTransformPoint","openfl/geom/Matrix.hx",446,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_453_equals,"openfl.geom.Matrix","equals",0x67f49d98,"openfl.geom.Matrix.equals","openfl/geom/Matrix.hx",453,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_471_identity,"openfl.geom.Matrix","identity",0xa87e3cd7,"openfl.geom.Matrix.identity","openfl/geom/Matrix.hx",471,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_489_invert,"openfl.geom.Matrix","invert",0x47da966f,"openfl.geom.Matrix.invert","openfl/geom/Matrix.hx",489,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_531_rotate,"openfl.geom.Matrix","rotate",0x7321f5b4,"openfl.geom.Matrix.rotate","openfl/geom/Matrix.hx",531,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_580_scale,"openfl.geom.Matrix","scale",0x13640d51,"openfl.geom.Matrix.scale","openfl/geom/Matrix.hx",580,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_603_setRotation,"openfl.geom.Matrix","setRotation",0xf72e1507,"openfl.geom.Matrix.setRotation","openfl/geom/Matrix.hx",603,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_615_setTo,"openfl.geom.Matrix","setTo",0x14c4d084,"openfl.geom.Matrix.setTo","openfl/geom/Matrix.hx",615,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_629_to3DString,"openfl.geom.Matrix","to3DString",0xe99e8cb6,"openfl.geom.Matrix.to3DString","openfl/geom/Matrix.hx",629,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_644_toMozString,"openfl.geom.Matrix","toMozString",0xd9d4e6d5,"openfl.geom.Matrix.toMozString","openfl/geom/Matrix.hx",644,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_658_toString,"openfl.geom.Matrix","toString",0x27bdc845,"openfl.geom.Matrix.toString","openfl/geom/Matrix.hx",658,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_673_transformPoint,"openfl.geom.Matrix","transformPoint",0xaac7ff9d,"openfl.geom.Matrix.transformPoint","openfl/geom/Matrix.hx",673,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_686_translate,"openfl.geom.Matrix","translate",0xbf498595,"openfl.geom.Matrix.translate","openfl/geom/Matrix.hx",686,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_694_toArray,"openfl.geom.Matrix","toArray",0x4b8b78a5,"openfl.geom.Matrix.toArray","openfl/geom/Matrix.hx",694,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_733___cleanValues,"openfl.geom.Matrix","__cleanValues",0xae7254f2,"openfl.geom.Matrix.__cleanValues","openfl/geom/Matrix.hx",733,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_745___toMatrix3,"openfl.geom.Matrix","__toMatrix3",0xaf6ed17e,"openfl.geom.Matrix.__toMatrix3","openfl/geom/Matrix.hx",745,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_753___transformInversePoint,"openfl.geom.Matrix","__transformInversePoint",0xde42fb73,"openfl.geom.Matrix.__transformInversePoint","openfl/geom/Matrix.hx",753,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_773___transformInverseX,"openfl.geom.Matrix","__transformInverseX",0x55523a1b,"openfl.geom.Matrix.__transformInverseX","openfl/geom/Matrix.hx",773,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_790___transformInverseY,"openfl.geom.Matrix","__transformInverseY",0x55523a1c,"openfl.geom.Matrix.__transformInverseY","openfl/geom/Matrix.hx",790,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_807___transformPoint,"openfl.geom.Matrix","__transformPoint",0x5d3712fd,"openfl.geom.Matrix.__transformPoint","openfl/geom/Matrix.hx",807,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_820___transformX,"openfl.geom.Matrix","__transformX",0x93ad44a5,"openfl.geom.Matrix.__transformX","openfl/geom/Matrix.hx",820,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_827___transformY,"openfl.geom.Matrix","__transformY",0x93ad44a6,"openfl.geom.Matrix.__transformY","openfl/geom/Matrix.hx",827,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_832___translateTransformed,"openfl.geom.Matrix","__translateTransformed",0x123e9496,"openfl.geom.Matrix.__translateTransformed","openfl/geom/Matrix.hx",832,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_75_boot,"openfl.geom.Matrix","boot",0xa91e7b4b,"openfl.geom.Matrix.boot","openfl/geom/Matrix.hx",75,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_76_boot,"openfl.geom.Matrix","boot",0xa91e7b4b,"openfl.geom.Matrix.boot","openfl/geom/Matrix.hx",76,0xa0d54189)
HX_LOCAL_STACK_FRAME(_hx_pos_99143fe9fb0bb031_77_boot,"openfl.geom.Matrix","boot",0xa91e7b4b,"openfl.geom.Matrix.boot","openfl/geom/Matrix.hx",77,0xa0d54189)
namespace openfl{
namespace geom{

void Matrix_obj::__construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float a = __o_a.Default(1);
Float b = __o_b.Default(0);
Float c = __o_c.Default(0);
Float d = __o_d.Default(1);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_141_new)
HXLINE( 143)		this->a = a;
HXLINE( 144)		this->b = b;
HXLINE( 145)		this->c = c;
HXLINE( 146)		this->d = d;
HXLINE( 147)		this->tx = tx;
HXLINE( 148)		this->ty = ty;
            	}

Dynamic Matrix_obj::__CreateEmpty() { return new Matrix_obj; }

void *Matrix_obj::_hx_vtable = 0;

Dynamic Matrix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix_obj > _hx_result = new Matrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Matrix_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x10475a2d;
}

 ::openfl::geom::Matrix Matrix_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_161_clone)
HXDLIN( 161)		return  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,this->a,this->b,this->c,this->d,this->tx,this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,clone,return )

void Matrix_obj::concat( ::openfl::geom::Matrix m){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_184_concat)
HXLINE( 186)		Float a1 = (this->a * m->a);
HXDLIN( 186)		Float a11 = (a1 + (this->b * m->c));
HXLINE( 187)		Float _hx_tmp = (this->a * m->b);
HXDLIN( 187)		this->b = (_hx_tmp + (this->b * m->d));
HXLINE( 188)		this->a = a11;
HXLINE( 190)		Float c1 = (this->c * m->a);
HXDLIN( 190)		Float c11 = (c1 + (this->d * m->c));
HXLINE( 191)		Float _hx_tmp1 = (this->c * m->b);
HXDLIN( 191)		this->d = (_hx_tmp1 + (this->d * m->d));
HXLINE( 192)		this->c = c11;
HXLINE( 194)		Float tx1 = (this->tx * m->a);
HXDLIN( 194)		Float tx11 = ((tx1 + (this->ty * m->c)) + m->tx);
HXLINE( 195)		Float _hx_tmp2 = (this->tx * m->b);
HXDLIN( 195)		this->ty = ((_hx_tmp2 + (this->ty * m->d)) + m->ty);
HXLINE( 196)		this->tx = tx11;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,concat,(void))

void Matrix_obj::copyColumnFrom(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_205_copyColumnFrom)
HXDLIN( 205)		if ((column > (int)2)) {
HXLINE( 207)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 209)			if ((column == (int)0)) {
HXLINE( 211)				this->a = vector3D->x;
HXLINE( 212)				this->b = vector3D->y;
            			}
            			else {
HXLINE( 214)				if ((column == (int)1)) {
HXLINE( 216)					this->c = vector3D->x;
HXLINE( 217)					this->d = vector3D->y;
            				}
            				else {
HXLINE( 221)					this->tx = vector3D->x;
HXLINE( 222)					this->ty = vector3D->y;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyColumnFrom,(void))

void Matrix_obj::copyColumnTo(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_231_copyColumnTo)
HXDLIN( 231)		if ((column > (int)2)) {
HXLINE( 233)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 235)			if ((column == (int)0)) {
HXLINE( 237)				vector3D->x = this->a;
HXLINE( 238)				vector3D->y = this->b;
HXLINE( 239)				vector3D->z = (int)0;
            			}
            			else {
HXLINE( 241)				if ((column == (int)1)) {
HXLINE( 243)					vector3D->x = this->c;
HXLINE( 244)					vector3D->y = this->d;
HXLINE( 245)					vector3D->z = (int)0;
            				}
            				else {
HXLINE( 249)					vector3D->x = this->tx;
HXLINE( 250)					vector3D->y = this->ty;
HXLINE( 251)					vector3D->z = (int)1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyColumnTo,(void))

void Matrix_obj::copyFrom( ::openfl::geom::Matrix sourceMatrix){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_258_copyFrom)
HXLINE( 260)		this->a = sourceMatrix->a;
HXLINE( 261)		this->b = sourceMatrix->b;
HXLINE( 262)		this->c = sourceMatrix->c;
HXLINE( 263)		this->d = sourceMatrix->d;
HXLINE( 264)		this->tx = sourceMatrix->tx;
HXLINE( 265)		this->ty = sourceMatrix->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,copyFrom,(void))

void Matrix_obj::copyRowFrom(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_272_copyRowFrom)
HXDLIN( 272)		if ((row > (int)2)) {
HXLINE( 274)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 276)			if ((row == (int)0)) {
HXLINE( 278)				this->a = vector3D->x;
HXLINE( 279)				this->c = vector3D->y;
HXLINE( 280)				this->tx = vector3D->z;
            			}
            			else {
HXLINE( 282)				if ((row == (int)1)) {
HXLINE( 284)					this->b = vector3D->x;
HXLINE( 285)					this->d = vector3D->y;
HXLINE( 286)					this->ty = vector3D->z;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyRowFrom,(void))

void Matrix_obj::copyRowTo(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_295_copyRowTo)
HXDLIN( 295)		if ((row > (int)2)) {
HXLINE( 297)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 299)			if ((row == (int)0)) {
HXLINE( 301)				vector3D->x = this->a;
HXLINE( 302)				vector3D->y = this->c;
HXLINE( 303)				vector3D->z = this->tx;
            			}
            			else {
HXLINE( 305)				if ((row == (int)1)) {
HXLINE( 307)					vector3D->x = this->b;
HXLINE( 308)					vector3D->y = this->d;
HXLINE( 309)					vector3D->z = this->ty;
            				}
            				else {
HXLINE( 313)					vector3D->setTo((int)0,(int)0,(int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyRowTo,(void))

void Matrix_obj::createBox(Float scaleX,Float scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_338_createBox)
HXLINE( 345)		if ((rotation != (int)0)) {
HXLINE( 347)			Float cos = ::Math_obj::cos(rotation);
HXLINE( 348)			Float sin = ::Math_obj::sin(rotation);
HXLINE( 350)			this->a = (cos * scaleX);
HXLINE( 351)			this->b = (sin * scaleY);
HXLINE( 352)			this->c = (-(sin) * scaleX);
HXLINE( 353)			this->d = (cos * scaleY);
            		}
            		else {
HXLINE( 357)			this->a = scaleX;
HXLINE( 358)			this->b = (int)0;
HXLINE( 359)			this->c = (int)0;
HXLINE( 360)			this->d = scaleY;
            		}
HXLINE( 364)		this->tx = tx;
HXLINE( 365)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix_obj,createBox,(void))

void Matrix_obj::createGradientBox(Float width,Float height,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_403_createGradientBox)
HXLINE( 405)		this->a = ((Float)width / (Float)((Float)1638.4));
HXLINE( 406)		this->d = ((Float)height / (Float)((Float)1638.4));
HXLINE( 409)		if ((rotation != (int)0)) {
HXLINE( 411)			Float cos = ::Math_obj::cos(rotation);
HXLINE( 412)			Float sin = ::Math_obj::sin(rotation);
HXLINE( 414)			this->b = (sin * this->d);
HXLINE( 415)			this->c = (-(sin) * this->a);
HXLINE( 416)			 ::openfl::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 416)			_hx_tmp->a = (_hx_tmp->a * cos);
HXLINE( 417)			 ::openfl::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 417)			_hx_tmp1->d = (_hx_tmp1->d * cos);
            		}
            		else {
HXLINE( 421)			this->b = (int)0;
HXLINE( 422)			this->c = (int)0;
            		}
HXLINE( 426)		this->tx = (tx + ((Float)width / (Float)(int)2));
HXLINE( 427)		this->ty = (ty + ((Float)height / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix_obj,createGradientBox,(void))

 ::openfl::geom::Point Matrix_obj::deltaTransformPoint( ::openfl::geom::Point point){
            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_446_deltaTransformPoint)
HXDLIN( 446)		Float _hx_tmp = (point->x * this->a);
HXDLIN( 446)		Float _hx_tmp1 = (_hx_tmp + (point->y * this->c));
HXDLIN( 446)		Float _hx_tmp2 = (point->x * this->b);
HXDLIN( 446)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,(_hx_tmp2 + (point->y * this->d)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,deltaTransformPoint,return )

bool Matrix_obj::equals( ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_453_equals)
HXDLIN( 453)		bool _hx_tmp;
HXDLIN( 453)		bool _hx_tmp1;
HXDLIN( 453)		bool _hx_tmp2;
HXDLIN( 453)		bool _hx_tmp3;
HXDLIN( 453)		bool _hx_tmp4;
HXDLIN( 453)		if (hx::IsNotNull( matrix )) {
HXDLIN( 453)			_hx_tmp4 = (this->tx == matrix->tx);
            		}
            		else {
HXDLIN( 453)			_hx_tmp4 = false;
            		}
HXDLIN( 453)		if (_hx_tmp4) {
HXDLIN( 453)			_hx_tmp3 = (this->ty == matrix->ty);
            		}
            		else {
HXDLIN( 453)			_hx_tmp3 = false;
            		}
HXDLIN( 453)		if (_hx_tmp3) {
HXDLIN( 453)			_hx_tmp2 = (this->a == matrix->a);
            		}
            		else {
HXDLIN( 453)			_hx_tmp2 = false;
            		}
HXDLIN( 453)		if (_hx_tmp2) {
HXDLIN( 453)			_hx_tmp1 = (this->b == matrix->b);
            		}
            		else {
HXDLIN( 453)			_hx_tmp1 = false;
            		}
HXDLIN( 453)		if (_hx_tmp1) {
HXDLIN( 453)			_hx_tmp = (this->c == matrix->c);
            		}
            		else {
HXDLIN( 453)			_hx_tmp = false;
            		}
HXDLIN( 453)		if (_hx_tmp) {
HXDLIN( 453)			return (this->d == matrix->d);
            		}
            		else {
HXDLIN( 453)			return false;
            		}
HXDLIN( 453)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,equals,return )

void Matrix_obj::identity(){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_471_identity)
HXLINE( 473)		this->a = (int)1;
HXLINE( 474)		this->b = (int)0;
HXLINE( 475)		this->c = (int)0;
HXLINE( 476)		this->d = (int)1;
HXLINE( 477)		this->tx = (int)0;
HXLINE( 478)		this->ty = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,identity,(void))

 ::openfl::geom::Matrix Matrix_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_489_invert)
HXLINE( 491)		Float norm = (this->a * this->d);
HXDLIN( 491)		Float norm1 = (norm - (this->b * this->c));
HXLINE( 493)		if ((norm1 == (int)0)) {
HXLINE( 495)			this->a = (this->b = (this->c = (this->d = (int)0)));
HXLINE( 496)			this->tx = -(this->tx);
HXLINE( 497)			this->ty = -(this->ty);
            		}
            		else {
HXLINE( 501)			norm1 = ((Float)((Float)1.0) / (Float)norm1);
HXLINE( 502)			Float a1 = (this->d * norm1);
HXLINE( 503)			this->d = (this->a * norm1);
HXLINE( 504)			this->a = a1;
HXLINE( 505)			 ::openfl::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 505)			_hx_tmp->b = (_hx_tmp->b * -(norm1));
HXLINE( 506)			 ::openfl::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 506)			_hx_tmp1->c = (_hx_tmp1->c * -(norm1));
HXLINE( 508)			Float tx1 = (-(this->a) * this->tx);
HXDLIN( 508)			Float tx11 = (tx1 - (this->c * this->ty));
HXLINE( 509)			Float _hx_tmp2 = (-(this->b) * this->tx);
HXDLIN( 509)			this->ty = (_hx_tmp2 - (this->d * this->ty));
HXLINE( 510)			this->tx = tx11;
            		}
HXLINE( 516)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,invert,return )

void Matrix_obj::rotate(Float theta){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_531_rotate)
HXLINE( 547)		Float cos = ::Math_obj::cos(theta);
HXLINE( 548)		Float sin = ::Math_obj::sin(theta);
HXLINE( 550)		Float a1 = (this->a * cos);
HXDLIN( 550)		Float a11 = (a1 - (this->b * sin));
HXLINE( 551)		Float _hx_tmp = (this->a * sin);
HXDLIN( 551)		this->b = (_hx_tmp + (this->b * cos));
HXLINE( 552)		this->a = a11;
HXLINE( 554)		Float c1 = (this->c * cos);
HXDLIN( 554)		Float c11 = (c1 - (this->d * sin));
HXLINE( 555)		Float _hx_tmp1 = (this->c * sin);
HXDLIN( 555)		this->d = (_hx_tmp1 + (this->d * cos));
HXLINE( 556)		this->c = c11;
HXLINE( 558)		Float tx1 = (this->tx * cos);
HXDLIN( 558)		Float tx11 = (tx1 - (this->ty * sin));
HXLINE( 559)		Float _hx_tmp2 = (this->tx * sin);
HXDLIN( 559)		this->ty = (_hx_tmp2 + (this->ty * cos));
HXLINE( 560)		this->tx = tx11;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,rotate,(void))

void Matrix_obj::scale(Float sx,Float sy){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_580_scale)
HXLINE( 591)		 ::openfl::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 591)		_hx_tmp->a = (_hx_tmp->a * sx);
HXLINE( 592)		 ::openfl::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 592)		_hx_tmp1->b = (_hx_tmp1->b * sy);
HXLINE( 593)		 ::openfl::geom::Matrix _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 593)		_hx_tmp2->c = (_hx_tmp2->c * sx);
HXLINE( 594)		 ::openfl::geom::Matrix _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 594)		_hx_tmp3->d = (_hx_tmp3->d * sy);
HXLINE( 595)		 ::openfl::geom::Matrix _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 595)		_hx_tmp4->tx = (_hx_tmp4->tx * sx);
HXLINE( 596)		 ::openfl::geom::Matrix _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 596)		_hx_tmp5->ty = (_hx_tmp5->ty * sy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,scale,(void))

void Matrix_obj::setRotation(Float theta,hx::Null< Float >  __o_scale){
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_603_setRotation)
HXLINE( 605)		this->a = (::Math_obj::cos(theta) * scale);
HXLINE( 606)		this->c = (::Math_obj::sin(theta) * scale);
HXLINE( 607)		this->b = -(this->c);
HXLINE( 608)		this->d = this->a;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,setRotation,(void))

void Matrix_obj::setTo(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_615_setTo)
HXLINE( 617)		this->a = a;
HXLINE( 618)		this->b = b;
HXLINE( 619)		this->c = c;
HXLINE( 620)		this->d = d;
HXLINE( 621)		this->tx = tx;
HXLINE( 622)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Matrix_obj,setTo,(void))

::String Matrix_obj::to3DString(hx::Null< bool >  __o_roundPixels){
bool roundPixels = __o_roundPixels.Default(false);
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_629_to3DString)
HXDLIN( 629)		if (roundPixels) {
HXLINE( 631)			::String _hx_tmp = ((((((((HX_("matrix3d(",96,72,db,ad) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", 0, 0, ",f4,b3,68,a3)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", 0, 0, 0, 0, 1, 0, ",53,8b,16,4d));
HXDLIN( 631)			::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::_hx_int(this->tx)) + HX_(", ",74,26,00,00));
HXDLIN( 631)			return ((_hx_tmp1 + ::Std_obj::_hx_int(this->ty)) + HX_(", 0, 1)",88,a3,85,b1));
            		}
            		else {
HXLINE( 635)			return ((((((((((((HX_("matrix3d(",96,72,db,ad) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", 0, 0, ",f4,b3,68,a3)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", 0, 0, 0, 0, 1, 0, ",53,8b,16,4d)) + this->tx) + HX_(", ",74,26,00,00)) + this->ty) + HX_(", 0, 1)",88,a3,85,b1));
            		}
HXLINE( 629)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,to3DString,return )

::String Matrix_obj::toMozString(){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_644_toMozString)
HXDLIN( 644)		return ((((((((((((HX_("matrix(",c7,42,67,93) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + this->tx) + HX_("px, ",7c,1a,63,4a)) + this->ty) + HX_("px)",21,65,55,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toMozString,return )

::String Matrix_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_658_toString)
HXDLIN( 658)		return ((((((((((((HX_("matrix(",c7,42,67,93) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + this->tx) + HX_(", ",74,26,00,00)) + this->ty) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toString,return )

 ::openfl::geom::Point Matrix_obj::transformPoint( ::openfl::geom::Point pos){
            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_673_transformPoint)
HXDLIN( 673)		Float _hx_tmp = (pos->x * this->a);
HXDLIN( 673)		Float _hx_tmp1 = (pos->x * this->b);
HXDLIN( 673)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,((_hx_tmp + (pos->y * this->c)) + this->tx),((_hx_tmp1 + (pos->y * this->d)) + this->ty));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,transformPoint,return )

void Matrix_obj::translate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_686_translate)
HXLINE( 688)		 ::openfl::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 688)		_hx_tmp->tx = (_hx_tmp->tx + dx);
HXLINE( 689)		 ::openfl::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 689)		_hx_tmp1->ty = (_hx_tmp1->ty + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,translate,(void))

 ::lime::utils::ArrayBufferView Matrix_obj::toArray(hx::Null< bool >  __o_transpose){
bool transpose = __o_transpose.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_694_toArray)
HXLINE( 696)		if (hx::IsNull( this->_hx___array )) {
HXLINE( 698)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)9,(int)8);
HXDLIN( 698)			this->_hx___array = this1;
            		}
HXLINE( 702)		if (transpose) {
HXLINE( 704)			{
HXLINE( 704)				 ::lime::utils::ArrayBufferView this2 = this->_hx___array;
HXDLIN( 704)				Float val = this->a;
HXDLIN( 704)				::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,val);
            			}
HXLINE( 705)			{
HXLINE( 705)				 ::lime::utils::ArrayBufferView this3 = this->_hx___array;
HXDLIN( 705)				Float val1 = this->b;
HXDLIN( 705)				::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + (int)4),val1);
            			}
HXLINE( 706)			{
HXLINE( 706)				 ::lime::utils::ArrayBufferView this4 = this->_hx___array;
HXDLIN( 706)				::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + (int)8),(int)0);
            			}
HXLINE( 707)			{
HXLINE( 707)				 ::lime::utils::ArrayBufferView this5 = this->_hx___array;
HXDLIN( 707)				Float val2 = this->c;
HXDLIN( 707)				::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + (int)12),val2);
            			}
HXLINE( 708)			{
HXLINE( 708)				 ::lime::utils::ArrayBufferView this6 = this->_hx___array;
HXDLIN( 708)				Float val3 = this->d;
HXDLIN( 708)				::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + (int)16),val3);
            			}
HXLINE( 709)			{
HXLINE( 709)				 ::lime::utils::ArrayBufferView this7 = this->_hx___array;
HXDLIN( 709)				::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + (int)20),(int)0);
            			}
HXLINE( 710)			{
HXLINE( 710)				 ::lime::utils::ArrayBufferView this8 = this->_hx___array;
HXDLIN( 710)				Float val4 = this->tx;
HXDLIN( 710)				::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + (int)24),val4);
            			}
HXLINE( 711)			{
HXLINE( 711)				 ::lime::utils::ArrayBufferView this9 = this->_hx___array;
HXDLIN( 711)				Float val5 = this->ty;
HXDLIN( 711)				::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + (int)28),val5);
            			}
HXLINE( 712)			{
HXLINE( 712)				 ::lime::utils::ArrayBufferView this10 = this->_hx___array;
HXDLIN( 712)				::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + (int)32),(int)1);
            			}
            		}
            		else {
HXLINE( 716)			{
HXLINE( 716)				 ::lime::utils::ArrayBufferView this11 = this->_hx___array;
HXDLIN( 716)				Float val6 = this->a;
HXDLIN( 716)				::__hxcpp_memory_set_float(this11->buffer->b,this11->byteOffset,val6);
            			}
HXLINE( 717)			{
HXLINE( 717)				 ::lime::utils::ArrayBufferView this12 = this->_hx___array;
HXDLIN( 717)				Float val7 = this->c;
HXDLIN( 717)				::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + (int)4),val7);
            			}
HXLINE( 718)			{
HXLINE( 718)				 ::lime::utils::ArrayBufferView this13 = this->_hx___array;
HXDLIN( 718)				Float val8 = this->tx;
HXDLIN( 718)				::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + (int)8),val8);
            			}
HXLINE( 719)			{
HXLINE( 719)				 ::lime::utils::ArrayBufferView this14 = this->_hx___array;
HXDLIN( 719)				Float val9 = this->b;
HXDLIN( 719)				::__hxcpp_memory_set_float(this14->buffer->b,(this14->byteOffset + (int)12),val9);
            			}
HXLINE( 720)			{
HXLINE( 720)				 ::lime::utils::ArrayBufferView this15 = this->_hx___array;
HXDLIN( 720)				Float val10 = this->d;
HXDLIN( 720)				::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + (int)16),val10);
            			}
HXLINE( 721)			{
HXLINE( 721)				 ::lime::utils::ArrayBufferView this16 = this->_hx___array;
HXDLIN( 721)				Float val11 = this->ty;
HXDLIN( 721)				::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + (int)20),val11);
            			}
HXLINE( 722)			{
HXLINE( 722)				 ::lime::utils::ArrayBufferView this17 = this->_hx___array;
HXDLIN( 722)				::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + (int)24),(int)0);
            			}
HXLINE( 723)			{
HXLINE( 723)				 ::lime::utils::ArrayBufferView this18 = this->_hx___array;
HXDLIN( 723)				::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + (int)28),(int)0);
            			}
HXLINE( 724)			{
HXLINE( 724)				 ::lime::utils::ArrayBufferView this19 = this->_hx___array;
HXDLIN( 724)				::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + (int)32),(int)1);
            			}
            		}
HXLINE( 728)		return this->_hx___array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,toArray,return )

void Matrix_obj::_hx___cleanValues(){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_733___cleanValues)
HXLINE( 735)		this->a = ((Float)::Math_obj::round((this->a * (int)1000)) / (Float)(int)1000);
HXLINE( 736)		this->b = ((Float)::Math_obj::round((this->b * (int)1000)) / (Float)(int)1000);
HXLINE( 737)		this->c = ((Float)::Math_obj::round((this->c * (int)1000)) / (Float)(int)1000);
HXLINE( 738)		this->d = ((Float)::Math_obj::round((this->d * (int)1000)) / (Float)(int)1000);
HXLINE( 739)		this->tx = ((Float)::Math_obj::round((this->tx * (int)10)) / (Float)(int)10);
HXLINE( 740)		this->ty = ((Float)::Math_obj::round((this->ty * (int)10)) / (Float)(int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,_hx___cleanValues,(void))

 ::lime::math::Matrix3 Matrix_obj::_hx___toMatrix3(){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_745___toMatrix3)
HXLINE( 747)		{
HXLINE( 747)			 ::lime::math::Matrix3 _this = ::openfl::geom::Matrix_obj::_hx___matrix3;
HXDLIN( 747)			_this->a = this->a;
HXDLIN( 747)			_this->b = this->b;
HXDLIN( 747)			_this->c = this->c;
HXDLIN( 747)			_this->d = this->d;
HXDLIN( 747)			_this->tx = this->tx;
HXDLIN( 747)			_this->ty = this->ty;
            		}
HXLINE( 748)		return ::openfl::geom::Matrix_obj::_hx___matrix3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,_hx___toMatrix3,return )

void Matrix_obj::_hx___transformInversePoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_753___transformInversePoint)
HXLINE( 755)		Float norm = (this->a * this->d);
HXDLIN( 755)		Float norm1 = (norm - (this->b * this->c));
HXLINE( 757)		if ((norm1 == (int)0)) {
HXLINE( 759)			point->x = -(this->tx);
HXLINE( 760)			point->y = -(this->ty);
            		}
            		else {
HXLINE( 764)			Float px = this->c;
HXDLIN( 764)			Float px1 = (px * (this->ty - point->y));
HXDLIN( 764)			Float px2 = this->d;
HXDLIN( 764)			Float px3 = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (px2 * (point->x - this->tx))));
HXLINE( 765)			Float _hx_tmp = this->a;
HXDLIN( 765)			Float _hx_tmp1 = (_hx_tmp * (point->y - this->ty));
HXDLIN( 765)			Float _hx_tmp2 = this->b;
HXDLIN( 765)			point->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp1 + (_hx_tmp2 * (this->tx - point->x))));
HXLINE( 766)			point->x = px3;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,_hx___transformInversePoint,(void))

Float Matrix_obj::_hx___transformInverseX(Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_773___transformInverseX)
HXLINE( 775)		Float norm = (this->a * this->d);
HXDLIN( 775)		Float norm1 = (norm - (this->b * this->c));
HXLINE( 777)		if ((norm1 == (int)0)) {
HXLINE( 779)			return -(this->tx);
            		}
            		else {
HXLINE( 783)			Float _hx_tmp = this->c;
HXDLIN( 783)			Float _hx_tmp1 = (_hx_tmp * (this->ty - py));
HXDLIN( 783)			Float _hx_tmp2 = this->d;
HXDLIN( 783)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp1 + (_hx_tmp2 * (px - this->tx))));
            		}
HXLINE( 777)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformInverseX,return )

Float Matrix_obj::_hx___transformInverseY(Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_790___transformInverseY)
HXLINE( 792)		Float norm = (this->a * this->d);
HXDLIN( 792)		Float norm1 = (norm - (this->b * this->c));
HXLINE( 794)		if ((norm1 == (int)0)) {
HXLINE( 796)			return -(this->ty);
            		}
            		else {
HXLINE( 800)			Float _hx_tmp = this->a;
HXDLIN( 800)			Float _hx_tmp1 = (_hx_tmp * (py - this->ty));
HXDLIN( 800)			Float _hx_tmp2 = this->b;
HXDLIN( 800)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp1 + (_hx_tmp2 * (this->tx - px))));
            		}
HXLINE( 794)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformInverseY,return )

void Matrix_obj::_hx___transformPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_807___transformPoint)
HXLINE( 809)		Float px = point->x;
HXLINE( 810)		Float py = point->y;
HXLINE( 812)		Float _hx_tmp = (px * this->a);
HXDLIN( 812)		point->x = ((_hx_tmp + (py * this->c)) + this->tx);
HXLINE( 813)		Float _hx_tmp1 = (px * this->b);
HXDLIN( 813)		point->y = ((_hx_tmp1 + (py * this->d)) + this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,_hx___transformPoint,(void))

Float Matrix_obj::_hx___transformX(Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_820___transformX)
HXDLIN( 820)		Float _hx_tmp = (px * this->a);
HXDLIN( 820)		return ((_hx_tmp + (py * this->c)) + this->tx);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformX,return )

Float Matrix_obj::_hx___transformY(Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_827___transformY)
HXDLIN( 827)		Float _hx_tmp = (px * this->b);
HXDLIN( 827)		return ((_hx_tmp + (py * this->d)) + this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformY,return )

void Matrix_obj::_hx___translateTransformed(Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_832___translateTransformed)
HXLINE( 834)		Float _hx_tmp = (px * this->a);
HXDLIN( 834)		this->tx = ((_hx_tmp + (py * this->c)) + this->tx);
HXLINE( 835)		Float _hx_tmp1 = (px * this->b);
HXDLIN( 835)		this->ty = ((_hx_tmp1 + (py * this->d)) + this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___translateTransformed,(void))

 ::openfl::geom::Matrix Matrix_obj::_hx___identity;

 ::lime::math::Matrix3 Matrix_obj::_hx___matrix3;

 ::lime::utils::ObjectPool_openfl_geom_Matrix Matrix_obj::_hx___pool;


hx::ObjectPtr< Matrix_obj > Matrix_obj::__new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	hx::ObjectPtr< Matrix_obj > __this = new Matrix_obj();
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

hx::ObjectPtr< Matrix_obj > Matrix_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	Matrix_obj *__this = (Matrix_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix_obj), true, "openfl.geom.Matrix"));
	*(void **)__this = Matrix_obj::_hx_vtable;
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

Matrix_obj::Matrix_obj()
{
}

void Matrix_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix);
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(d,"d");
	HX_MARK_MEMBER_NAME(tx,"tx");
	HX_MARK_MEMBER_NAME(ty,"ty");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_END_CLASS();
}

void Matrix_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(d,"d");
	HX_VISIT_MEMBER_NAME(tx,"tx");
	HX_VISIT_MEMBER_NAME(ty,"ty");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
}

hx::Val Matrix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { return hx::Val( tx ); }
		if (HX_FIELD_EQ(inName,"ty") ) { return hx::Val( ty ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return hx::Val( _hx___array ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBox") ) { return hx::Val( createBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"to3DString") ) { return hx::Val( to3DString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotation") ) { return hx::Val( setRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"toMozString") ) { return hx::Val( toMozString_dyn() ); }
		if (HX_FIELD_EQ(inName,"__toMatrix3") ) { return hx::Val( _hx___toMatrix3_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transformX") ) { return hx::Val( _hx___transformX_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transformY") ) { return hx::Val( _hx___transformY_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__cleanValues") ) { return hx::Val( _hx___cleanValues_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return hx::Val( transformPoint_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformPoint") ) { return hx::Val( _hx___transformPoint_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGradientBox") ) { return hx::Val( createGradientBox_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"deltaTransformPoint") ) { return hx::Val( deltaTransformPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transformInverseX") ) { return hx::Val( _hx___transformInverseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transformInverseY") ) { return hx::Val( _hx___transformInverseY_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__translateTransformed") ) { return hx::Val( _hx___translateTransformed_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__transformInversePoint") ) { return hx::Val( _hx___transformInversePoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { outValue = ( _hx___pool ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { outValue = ( _hx___matrix3 ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__identity") ) { outValue = ( _hx___identity ); return true; }
	}
	return false;
}

hx::Val Matrix_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { tx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Matrix_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { _hx___pool=ioValue.Cast<  ::lime::utils::ObjectPool_openfl_geom_Matrix >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { _hx___matrix3=ioValue.Cast<  ::lime::math::Matrix3 >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__identity") ) { _hx___identity=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

void Matrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tx","\x84","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("ty","\x85","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,tx),HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,ty),HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Matrix_obj,_hx___array),HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Matrix_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Matrix_obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{hx::fsObject /*::lime::math::Matrix3*/ ,(void *) &Matrix_obj::_hx___matrix3,HX_HCSTRING("__matrix3","\xb2","\x93","\xb5","\x14")},
	{hx::fsObject /*::lime::utils::ObjectPool_openfl_geom_Matrix*/ ,(void *) &Matrix_obj::_hx___pool,HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Matrix_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("createBox","\x6f","\x94","\xd8","\x49"),
	HX_HCSTRING("createGradientBox","\x5f","\xec","\xc0","\x25"),
	HX_HCSTRING("deltaTransformPoint","\x5c","\x4d","\xf7","\x15"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("setRotation","\x00","\x07","\xe7","\x38"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("to3DString","\xdd","\xbc","\xef","\x4e"),
	HX_HCSTRING("toMozString","\xce","\xd8","\x8d","\x1b"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("__cleanValues","\x2b","\x77","\xc6","\x85"),
	HX_HCSTRING("__toMatrix3","\x77","\xc3","\x27","\xf1"),
	HX_HCSTRING("__transformInversePoint","\xec","\x7e","\x5b","\xe2"),
	HX_HCSTRING("__transformInverseX","\x14","\x4d","\xb3","\x7f"),
	HX_HCSTRING("__transformInverseY","\x15","\x4d","\xb3","\x7f"),
	HX_HCSTRING("__transformPoint","\x64","\x5a","\x51","\x71"),
	HX_HCSTRING("__transformX","\x8c","\x0c","\xc8","\xd3"),
	HX_HCSTRING("__transformY","\x8d","\x0c","\xc8","\xd3"),
	HX_HCSTRING("__translateTransformed","\x3d","\xe3","\xea","\x64"),
	::String(null()) };

static void Matrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix_obj::_hx___identity,"__identity");
	HX_MARK_MEMBER_NAME(Matrix_obj::_hx___matrix3,"__matrix3");
	HX_MARK_MEMBER_NAME(Matrix_obj::_hx___pool,"__pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix_obj::_hx___identity,"__identity");
	HX_VISIT_MEMBER_NAME(Matrix_obj::_hx___matrix3,"__matrix3");
	HX_VISIT_MEMBER_NAME(Matrix_obj::_hx___pool,"__pool");
};

#endif

hx::Class Matrix_obj::__mClass;

static ::String Matrix_obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("__matrix3","\xb2","\x93","\xb5","\x14"),
	HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9"),
	::String(null())
};

void Matrix_obj::__register()
{
	hx::Object *dummy = new Matrix_obj;
	Matrix_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Matrix","\xf5","\xbf","\x06","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix_obj::__GetStatic;
	__mClass->mSetStaticField = &Matrix_obj::__SetStatic;
	__mClass->mMarkFunc = Matrix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_75_boot)
HXDLIN(  75)		_hx___identity =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_76_boot)
HXDLIN(  76)		_hx___matrix3 =  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::geom::Matrix _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_77_boot)
HXDLIN(  77)			return  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::openfl::geom::Matrix m){
            			HX_STACKFRAME(&_hx_pos_99143fe9fb0bb031_77_boot)
HXDLIN(  77)			m->identity();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_99143fe9fb0bb031_77_boot)
HXDLIN(  77)		_hx___pool =  ::lime::utils::ObjectPool_openfl_geom_Matrix_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()),null());
            	}
}

} // end namespace openfl
} // end namespace geom
