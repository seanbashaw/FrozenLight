// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMTextField
#include <openfl/_internal/renderer/dom/DOMTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBitmap
#include <openfl/_internal/renderer/opengl/GLBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShape
#include <openfl/_internal/renderer/opengl/GLShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLTextField
#include <openfl/_internal/renderer/opengl/GLTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_HTMLParser
#include <openfl/_internal/text/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_664_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",664,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_708_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",708,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_733_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",733,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_762_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",762,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_809_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",809,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_847_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",847,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_874_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",874,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_895_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",895,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_932_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",932,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_966_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",966,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_996_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",996,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1027_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",1027,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1061_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",1061,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1112_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",1112,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1119_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",1119,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1137_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",1137,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1192_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1192,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1332_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1332,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1359___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",1359,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1366___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",1366,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1379___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",1379,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1408___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",1408,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1417___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",1417,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1446___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",1446,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1455___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",1455,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1484___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",1484,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1502___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",1502,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1538___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",1538,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1571___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",1571,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1714___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1714,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1720___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1720,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1739___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1739,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1776___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1776,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1820___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1820,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1839___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1839,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1895___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1895,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1931___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1931,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1959___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1959,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1978___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",1978,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2000___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",2000,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2077___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",2077,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2121___renderDOMClear,"openfl.text.TextField","__renderDOMClear",0x09e66c65,"openfl.text.TextField.__renderDOMClear","openfl/text/TextField.hx",2121,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2126___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",2126,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2146___renderGLMask,"openfl.text.TextField","__renderGLMask",0x687ab3cb,"openfl.text.TextField.__renderGLMask","openfl/text/TextField.hx",2146,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2155___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",2155,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2189___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",2189,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2273___shouldCacheHardware,"openfl.text.TextField","__shouldCacheHardware",0x836d1d13,"openfl.text.TextField.__shouldCacheHardware","openfl/text/TextField.hx",2273,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2278___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",2278,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2288___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",2288,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2308___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",2308,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2328___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",2328,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2341___updateCacheBitmap,"openfl.text.TextField","__updateCacheBitmap",0xf1f52f84,"openfl.text.TextField.__updateCacheBitmap","openfl/text/TextField.hx",2341,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2365___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",2365,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2407___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",2407,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2453___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",2453,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2496___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",2496,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2513_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",2513,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2518_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",2518,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2533_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",2533,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2538_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",2538,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2555_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",2555,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2560_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",2560,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2576_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",2576,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2581_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",2581,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2597_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",2597,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2602_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",2602,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2618_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",2618,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2623_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",2623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2637_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",2637,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2648_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2648,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2655_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2655,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2660_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2660,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2675_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",2675,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2680_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2680,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2700_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",2700,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2714_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2714,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2721_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",2721,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2735_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",2735,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2740_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2740,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2748_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2748,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2771_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",2771,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2777_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2777,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2835_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2835,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2850_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2850,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2855_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2855,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2872_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2872,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2881_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2881,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2892_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2892,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2899_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2899,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2906_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2906,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2911_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2911,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2928_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2928,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2939_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2939,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2944_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2944,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2960_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2960,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2965_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2965,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2987_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2987,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2992_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2992,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3014_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",3014,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3019_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",3019,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3042_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",3042,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3049_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",3049,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3056_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",3056,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3061_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",3061,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3077_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",3077,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3084_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",3084,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3089_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",3089,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3126_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",3126,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3131_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",3131,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3150_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",3150,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3158_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",3158,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3168_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",3168,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3173_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",3173,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3204_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",3204,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3212_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",3212,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3232_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",3232,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3237_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",3237,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3254_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",3254,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3259_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",3259,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3269_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",3269,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3274_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",3274,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3289_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",3289,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3323_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",3323,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3370_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",3370,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3377_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",3377,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3386_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",3386,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3422_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",3422,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3435_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",3435,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3459_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",3459,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3725_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3725,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_151_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",151,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_664_new)
HXLINE( 666)		super::__construct();
HXLINE( 668)		this->_hx___caretIndex = (int)-1;
HXLINE( 669)		this->_hx___displayAsPassword = false;
HXLINE( 670)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 671)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 672)		this->_hx___layoutDirty = true;
HXLINE( 673)		this->_hx___offsetX = (int)0;
HXLINE( 674)		this->_hx___offsetY = (int)0;
HXLINE( 675)		this->_hx___mouseWheelEnabled = true;
HXLINE( 676)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 678)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 680)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 681)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 682)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 683)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 684)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 688)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 689)		{
HXLINE( 689)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 689)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,(int)0,(int)0));
            		}
HXLINE( 691)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 692)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 693)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 694)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_708_appendText)
HXLINE( 710)		bool _hx_tmp;
HXDLIN( 710)		if (hx::IsNotNull( text )) {
HXLINE( 710)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 710)			_hx_tmp = true;
            		}
HXDLIN( 710)		if (_hx_tmp) {
HXLINE( 710)			return;
            		}
HXLINE( 712)		this->_hx___dirty = true;
HXLINE( 713)		this->_hx___layoutDirty = true;
HXLINE( 714)		if (!(this->_hx___renderDirty)) {
HXLINE( 714)			this->_hx___renderDirty = true;
HXDLIN( 714)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 716)		this->_hx___updateText(::lime::text::_UTF8String::UTF8String_Impl__obj::plus(this->_hx___text,text));
HXLINE( 718)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 718)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE( 719)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_733_getCharBoundaries)
HXLINE( 735)		bool _hx_tmp;
HXDLIN( 735)		if ((charIndex >= (int)0)) {
HXLINE( 735)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 735)			_hx_tmp = true;
            		}
HXDLIN( 735)		if (_hx_tmp) {
HXLINE( 735)			return null();
            		}
HXLINE( 737)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 739)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 741)			return rect;
            		}
            		else {
HXLINE( 745)			return null();
            		}
HXLINE( 739)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_762_getCharIndexAtPoint)
HXLINE( 764)		bool _hx_tmp;
HXDLIN( 764)		bool _hx_tmp1;
HXDLIN( 764)		bool _hx_tmp2;
HXDLIN( 764)		if (!((x <= (int)2))) {
HXLINE( 764)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 764)			_hx_tmp2 = true;
            		}
HXDLIN( 764)		if (!(_hx_tmp2)) {
HXLINE( 764)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 764)			_hx_tmp1 = true;
            		}
HXDLIN( 764)		if (!(_hx_tmp1)) {
HXLINE( 764)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 764)			_hx_tmp = true;
            		}
HXDLIN( 764)		if (_hx_tmp) {
HXLINE( 764)			return (int)-1;
            		}
HXLINE( 766)		this->_hx___updateLayout();
HXLINE( 768)		x = (x + this->get_scrollH());
HXLINE( 770)		{
HXLINE( 770)			int _g1 = (int)0;
HXDLIN( 770)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 770)			while((_g1 < _g)){
HXLINE( 770)				_g1 = (_g1 + (int)1);
HXDLIN( 770)				int i = (_g1 - (int)1);
HXLINE( 772)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 776)		{
HXLINE( 776)			int _g2 = (int)0;
HXDLIN( 776)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 776)			while((_g2 < _g11->get_length())){
HXLINE( 776)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 776)				_g2 = (_g2 + (int)1);
HXLINE( 778)				bool _hx_tmp3;
HXDLIN( 778)				if ((y >= group->offsetY)) {
HXLINE( 778)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 778)					_hx_tmp3 = false;
            				}
HXDLIN( 778)				if (_hx_tmp3) {
HXLINE( 780)					bool _hx_tmp4;
HXDLIN( 780)					if ((x >= group->offsetX)) {
HXLINE( 780)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 780)						_hx_tmp4 = false;
            					}
HXDLIN( 780)					if (_hx_tmp4) {
HXLINE( 782)						Float advance = ((Float)0.0);
HXLINE( 784)						{
HXLINE( 784)							int _g3 = (int)0;
HXDLIN( 784)							int _g21 = group->positions->length;
HXDLIN( 784)							while((_g3 < _g21)){
HXLINE( 784)								_g3 = (_g3 + (int)1);
HXDLIN( 784)								int i1 = (_g3 - (int)1);
HXLINE( 786)								Float advance1;
HXDLIN( 786)								bool advance2;
HXDLIN( 786)								if ((i1 >= (int)0)) {
HXLINE( 786)									advance2 = (i1 < group->positions->length);
            								}
            								else {
HXLINE( 786)									advance2 = false;
            								}
HXDLIN( 786)								if (advance2) {
HXLINE( 786)									advance1 = group->positions->__get(i1).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 786)									advance1 = (int)0;
            								}
HXDLIN( 786)								advance = (advance + advance1);
HXLINE( 788)								if ((x <= (group->offsetX + advance))) {
HXLINE( 790)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 796)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 804)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_809_getFirstCharInParagraph)
HXLINE( 811)		bool _hx_tmp;
HXDLIN( 811)		if ((charIndex >= (int)0)) {
HXLINE( 811)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()));
            		}
            		else {
HXLINE( 811)			_hx_tmp = true;
            		}
HXDLIN( 811)		if (_hx_tmp) {
HXLINE( 811)			return (int)-1;
            		}
HXLINE( 813)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 814)		int startIndex = (int)0;
HXLINE( 816)		while((index > (int)-1)){
HXLINE( 818)			if ((index < charIndex)) {
HXLINE( 820)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 822)				if ((index >= charIndex)) {
HXLINE( 824)					goto _hx_goto_7;
            				}
            			}
HXLINE( 828)			 ::openfl::_internal::text::TextEngine index1 = this->_hx___textEngine;
HXDLIN( 828)			index = index1->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_7:;
HXLINE( 832)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_847_getLineIndexAtPoint)
HXLINE( 849)		this->_hx___updateLayout();
HXLINE( 851)		bool _hx_tmp;
HXDLIN( 851)		bool _hx_tmp1;
HXDLIN( 851)		bool _hx_tmp2;
HXDLIN( 851)		if (!((x <= (int)2))) {
HXLINE( 851)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 851)			_hx_tmp2 = true;
            		}
HXDLIN( 851)		if (!(_hx_tmp2)) {
HXLINE( 851)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 851)			_hx_tmp1 = true;
            		}
HXDLIN( 851)		if (!(_hx_tmp1)) {
HXLINE( 851)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 851)			_hx_tmp = true;
            		}
HXDLIN( 851)		if (_hx_tmp) {
HXLINE( 851)			return (int)-1;
            		}
HXLINE( 853)		{
HXLINE( 853)			int _g1 = (int)0;
HXDLIN( 853)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 853)			while((_g1 < _g)){
HXLINE( 853)				_g1 = (_g1 + (int)1);
HXDLIN( 853)				int i = (_g1 - (int)1);
HXLINE( 855)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 859)		{
HXLINE( 859)			int _g2 = (int)0;
HXDLIN( 859)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 859)			while((_g2 < _g11->get_length())){
HXLINE( 859)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 859)				_g2 = (_g2 + (int)1);
HXLINE( 861)				bool _hx_tmp3;
HXDLIN( 861)				if ((y >= group->offsetY)) {
HXLINE( 861)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 861)					_hx_tmp3 = false;
            				}
HXDLIN( 861)				if (_hx_tmp3) {
HXLINE( 863)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 869)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_874_getLineIndexOfChar)
HXLINE( 876)		bool _hx_tmp;
HXDLIN( 876)		if ((charIndex >= (int)0)) {
HXLINE( 876)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE( 876)			_hx_tmp = true;
            		}
HXDLIN( 876)		if (_hx_tmp) {
HXLINE( 876)			return (int)-1;
            		}
HXLINE( 878)		this->_hx___updateLayout();
HXLINE( 880)		{
HXLINE( 880)			int _g = (int)0;
HXDLIN( 880)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 880)			while((_g < _g1->get_length())){
HXLINE( 880)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 880)				_g = (_g + (int)1);
HXLINE( 882)				bool _hx_tmp1;
HXDLIN( 882)				if ((group->startIndex <= charIndex)) {
HXLINE( 882)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 882)					_hx_tmp1 = false;
            				}
HXDLIN( 882)				if (_hx_tmp1) {
HXLINE( 884)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 890)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_895_getLineLength)
HXLINE( 897)		this->_hx___updateLayout();
HXLINE( 899)		bool _hx_tmp;
HXDLIN( 899)		if ((lineIndex >= (int)0)) {
HXLINE( 899)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 899)			_hx_tmp = true;
            		}
HXDLIN( 899)		if (_hx_tmp) {
HXLINE( 899)			return (int)0;
            		}
HXLINE( 901)		int startIndex = (int)-1;
HXLINE( 902)		int endIndex = (int)-1;
HXLINE( 904)		{
HXLINE( 904)			int _g = (int)0;
HXDLIN( 904)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 904)			while((_g < _g1->get_length())){
HXLINE( 904)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 904)				_g = (_g + (int)1);
HXLINE( 906)				if ((group->lineIndex == lineIndex)) {
HXLINE( 908)					if ((startIndex == (int)-1)) {
HXLINE( 908)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 910)					int group1 = group->lineIndex;
HXDLIN( 910)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 912)						endIndex = group->startIndex;
HXLINE( 913)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE( 919)		if ((endIndex == (int)-1)) {
HXLINE( 919)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 920)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_932_getLineMetrics)
HXLINE( 934)		this->_hx___updateLayout();
HXLINE( 936)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE( 937)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE( 938)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE( 939)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE( 940)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE( 944)		Float margin;
HXDLIN( 944)		 ::Dynamic _g = this->_hx___textFormat->align;
HXDLIN( 944)		 ::Dynamic _hx_switch_0 = _g;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 944)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 944)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 944)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 944)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 944)			margin = (int)2;
HXDLIN( 944)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE( 952)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_966_getLineOffset)
HXLINE( 968)		this->_hx___updateLayout();
HXLINE( 970)		bool _hx_tmp;
HXDLIN( 970)		if ((lineIndex >= (int)0)) {
HXLINE( 970)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 970)			_hx_tmp = true;
            		}
HXDLIN( 970)		if (_hx_tmp) {
HXLINE( 970)			return (int)-1;
            		}
HXLINE( 972)		{
HXLINE( 972)			int _g = (int)0;
HXDLIN( 972)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 972)			while((_g < _g1->get_length())){
HXLINE( 972)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 972)				_g = (_g + (int)1);
HXLINE( 974)				if ((group->lineIndex == lineIndex)) {
HXLINE( 976)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 982)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_996_getLineText)
HXLINE( 998)		this->_hx___updateLayout();
HXLINE(1000)		bool _hx_tmp;
HXDLIN(1000)		if ((lineIndex >= (int)0)) {
HXLINE(1000)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE(1000)			_hx_tmp = true;
            		}
HXDLIN(1000)		if (_hx_tmp) {
HXLINE(1000)			return null();
            		}
HXLINE(1002)		int startIndex = (int)-1;
HXLINE(1003)		int endIndex = (int)-1;
HXLINE(1005)		{
HXLINE(1005)			int _g = (int)0;
HXDLIN(1005)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1005)			while((_g < _g1->get_length())){
HXLINE(1005)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1005)				_g = (_g + (int)1);
HXLINE(1007)				if ((group->lineIndex == lineIndex)) {
HXLINE(1009)					if ((startIndex == (int)-1)) {
HXLINE(1009)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE(1011)					int group1 = group->lineIndex;
HXDLIN(1011)					if ((group1 == (lineIndex + (int)1))) {
HXLINE(1013)						endIndex = group->startIndex;
HXLINE(1014)						goto _hx_goto_20;
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE(1020)		if ((endIndex == (int)-1)) {
HXLINE(1020)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1022)		return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___textEngine->text,startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1027_getParagraphLength)
HXLINE(1029)		bool _hx_tmp;
HXDLIN(1029)		if ((charIndex >= (int)0)) {
HXLINE(1029)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()));
            		}
            		else {
HXLINE(1029)			_hx_tmp = true;
            		}
HXDLIN(1029)		if (_hx_tmp) {
HXLINE(1029)			return (int)-1;
            		}
HXLINE(1031)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE(1033)		if ((charIndex >= ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()))) {
HXLINE(1033)			return ((::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()) - startIndex) + (int)1);
            		}
HXLINE(1035)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + (int)1);
HXLINE(1037)		if ((endIndex == (int)0)) {
HXLINE(1037)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1038)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(-1);
int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1061_getTextFormat)
HXLINE(1063)		 ::openfl::text::TextFormat format = null();
HXLINE(1064)		if ((beginIndex >= ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()))) {
HXLINE(1064)			return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1066)		if ((beginIndex == (int)-1)) {
HXLINE(1066)			beginIndex = (int)0;
            		}
HXLINE(1067)		if ((endIndex == (int)-1)) {
HXLINE(1067)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
            		}
HXLINE(1069)		{
HXLINE(1069)			int _g = (int)0;
HXDLIN(1069)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1069)			while((_g < _g1->get_length())){
HXLINE(1069)				 ::openfl::_internal::text::TextFormatRange group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1069)				_g = (_g + (int)1);
HXLINE(1071)				bool _hx_tmp;
HXDLIN(1071)				bool _hx_tmp1;
HXDLIN(1071)				if ((group->start <= beginIndex)) {
HXLINE(1071)					_hx_tmp1 = (group->end > beginIndex);
            				}
            				else {
HXLINE(1071)					_hx_tmp1 = false;
            				}
HXDLIN(1071)				if (!(_hx_tmp1)) {
HXLINE(1071)					if ((group->start < endIndex)) {
HXLINE(1071)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE(1071)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(1071)					_hx_tmp = true;
            				}
HXDLIN(1071)				if (_hx_tmp) {
HXLINE(1073)					if (hx::IsNull( format )) {
HXLINE(1075)						format = group->format->clone();
            					}
            					else {
HXLINE(1079)						if ((group->format->font != format->font)) {
HXLINE(1079)							format->font = null();
            						}
HXLINE(1080)						if (hx::IsNotEq( group->format->size,format->size )) {
HXLINE(1080)							format->size = null();
            						}
HXLINE(1081)						if (hx::IsNotEq( group->format->color,format->color )) {
HXLINE(1081)							format->color = null();
            						}
HXLINE(1082)						if (hx::IsNotEq( group->format->bold,format->bold )) {
HXLINE(1082)							format->bold = null();
            						}
HXLINE(1083)						if (hx::IsNotEq( group->format->italic,format->italic )) {
HXLINE(1083)							format->italic = null();
            						}
HXLINE(1084)						if (hx::IsNotEq( group->format->underline,format->underline )) {
HXLINE(1084)							format->underline = null();
            						}
HXLINE(1085)						if ((group->format->url != format->url)) {
HXLINE(1085)							format->url = null();
            						}
HXLINE(1086)						if ((group->format->target != format->target)) {
HXLINE(1086)							format->target = null();
            						}
HXLINE(1087)						if (hx::IsNotEq( group->format->align,format->align )) {
HXLINE(1087)							format->align = null();
            						}
HXLINE(1088)						if (hx::IsNotEq( group->format->leftMargin,format->leftMargin )) {
HXLINE(1088)							format->leftMargin = null();
            						}
HXLINE(1089)						if (hx::IsNotEq( group->format->rightMargin,format->rightMargin )) {
HXLINE(1089)							format->rightMargin = null();
            						}
HXLINE(1090)						if (hx::IsNotEq( group->format->indent,format->indent )) {
HXLINE(1090)							format->indent = null();
            						}
HXLINE(1091)						if (hx::IsNotEq( group->format->leading,format->leading )) {
HXLINE(1091)							format->leading = null();
            						}
HXLINE(1092)						if (hx::IsNotEq( group->format->blockIndent,format->blockIndent )) {
HXLINE(1092)							format->blockIndent = null();
            						}
HXLINE(1093)						if (hx::IsNotEq( group->format->bullet,format->bullet )) {
HXLINE(1093)							format->bullet = null();
            						}
HXLINE(1094)						if (hx::IsNotEq( group->format->kerning,format->kerning )) {
HXLINE(1094)							format->kerning = null();
            						}
HXLINE(1095)						if (hx::IsNotEq( group->format->letterSpacing,format->letterSpacing )) {
HXLINE(1095)							format->letterSpacing = null();
            						}
HXLINE(1096)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE(1096)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE(1104)		if (hx::IsNull( format )) {
HXLINE(1104)			format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1105)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1112_replaceSelectedText)
HXDLIN(1112)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1119_replaceText)
HXDLIN(1119)		this->_hx___replaceText(beginIndex,endIndex,newText,false);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1137_setSelection)
HXLINE(1139)		this->_hx___selectionIndex = beginIndex;
HXLINE(1140)		this->_hx___caretIndex = endIndex;
HXLINE(1141)		this->_hx___stopCursorTimer();
HXLINE(1142)		this->_hx___startCursorTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1192_setTextFormat)
HXLINE(1194)		int max = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE(1195)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(1197)		if ((beginIndex < (int)0)) {
HXLINE(1197)			beginIndex = (int)0;
            		}
HXLINE(1198)		if ((endIndex < (int)0)) {
HXLINE(1198)			endIndex = (int)0;
            		}
HXLINE(1200)		if ((endIndex == (int)0)) {
HXLINE(1202)			if ((beginIndex == (int)0)) {
HXLINE(1204)				endIndex = max;
            			}
            			else {
HXLINE(1208)				endIndex = (beginIndex + (int)1);
            			}
            		}
HXLINE(1214)		if ((endIndex < beginIndex)) {
HXLINE(1214)			return;
            		}
HXLINE(1216)		bool _hx_tmp;
HXDLIN(1216)		if ((beginIndex == (int)0)) {
HXLINE(1216)			_hx_tmp = (endIndex >= max);
            		}
            		else {
HXLINE(1216)			_hx_tmp = false;
            		}
HXDLIN(1216)		if (_hx_tmp) {
HXLINE(1220)			this->_hx___textFormat->_hx___merge(format);
HXLINE(1222)			{
HXLINE(1222)				int _g1 = (int)0;
HXDLIN(1222)				int _g = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN(1222)				while((_g1 < _g)){
HXLINE(1222)					_g1 = (_g1 + (int)1);
HXDLIN(1222)					int i = (_g1 - (int)1);
HXLINE(1224)					range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1225)					range->format->_hx___merge(this->_hx___textFormat);
            				}
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1332_setTextFormat)
HXLINE(1334)				bool _hx_tmp3;
HXDLIN(1334)				if ((a->start >= b->start)) {
HXLINE(1334)					_hx_tmp3 = (a->end < b->end);
            				}
            				else {
HXLINE(1334)					_hx_tmp3 = true;
            				}
HXDLIN(1334)				if (_hx_tmp3) {
HXLINE(1336)					return (int)-1;
            				}
            				else {
HXLINE(1338)					bool _hx_tmp4;
HXDLIN(1338)					if ((a->start <= b->start)) {
HXLINE(1338)						_hx_tmp4 = (a->end > b->end);
            					}
            					else {
HXLINE(1338)						_hx_tmp4 = true;
            					}
HXDLIN(1338)					if (_hx_tmp4) {
HXLINE(1340)						return (int)1;
            					}
            				}
HXLINE(1344)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1231)			int index = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE(1232)			int searchIndex;
HXLINE(1234)			while((index > (int)0)){
HXLINE(1236)				index = (index - (int)1);
HXLINE(1237)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1239)				bool _hx_tmp1;
HXDLIN(1239)				if ((range->start == beginIndex)) {
HXLINE(1239)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE(1239)					_hx_tmp1 = false;
            				}
HXDLIN(1239)				if (_hx_tmp1) {
HXLINE(1243)					range->format = this->_hx___textFormat->clone();
HXLINE(1244)					range->format->_hx___merge(format);
HXLINE(1245)					return;
            				}
HXLINE(1249)				bool _hx_tmp2;
HXDLIN(1249)				if ((range->start >= beginIndex)) {
HXLINE(1249)					_hx_tmp2 = (range->end <= endIndex);
            				}
            				else {
HXLINE(1249)					_hx_tmp2 = false;
            				}
HXDLIN(1249)				if (_hx_tmp2) {
HXLINE(1253)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(range,(int)0);
HXLINE(1255)					if ((searchIndex > (int)-1)) {
HXLINE(1257)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE(1265)			 ::openfl::_internal::text::TextFormatRange prevRange = null();
HXDLIN(1265)			 ::openfl::_internal::text::TextFormatRange nextRange = null();
HXLINE(1269)			if ((beginIndex > (int)0)) {
HXLINE(1271)				int _g11 = (int)0;
HXDLIN(1271)				int _g2 = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN(1271)				while((_g11 < _g2)){
HXLINE(1271)					_g11 = (_g11 + (int)1);
HXDLIN(1271)					int i1 = (_g11 - (int)1);
HXLINE(1273)					range = this->_hx___textEngine->textFormatRanges->get(i1).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1275)					if ((range->end >= beginIndex)) {
HXLINE(1277)						prevRange = range;
HXLINE(1279)						goto _hx_goto_30;
            					}
            				}
            				_hx_goto_30:;
            			}
HXLINE(1286)			if ((endIndex < max)) {
HXLINE(1288)				int ni = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE(1290)				while(true){
HXLINE(1290)					ni = (ni - (int)1);
HXDLIN(1290)					if (!((ni >= (int)0))) {
HXLINE(1290)						goto _hx_goto_31;
            					}
HXLINE(1292)					range = this->_hx___textEngine->textFormatRanges->get(ni).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1294)					if ((range->start <= endIndex)) {
HXLINE(1296)						nextRange = range;
HXLINE(1298)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
            			}
HXLINE(1306)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE(1310)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN(1310)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE(1311)				this->_hx___textEngine->textFormatRanges->push(nextRange);
            			}
HXLINE(1315)			if (hx::IsNotNull( prevRange )) {
HXLINE(1317)				prevRange->end = beginIndex;
            			}
HXLINE(1321)			if (hx::IsNotNull( nextRange )) {
HXLINE(1323)				nextRange->start = endIndex;
            			}
HXLINE(1327)			 ::openfl::text::TextFormat textFormat = this->_hx___textFormat->clone();
HXLINE(1328)			textFormat->_hx___merge(format);
HXLINE(1330)			{
HXLINE(1330)				::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1330)				( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,textFormat,beginIndex,endIndex));
            			}
HXLINE(1332)			this->_hx___textEngine->textFormatRanges->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE(1350)		this->_hx___dirty = true;
HXLINE(1351)		this->_hx___layoutDirty = true;
HXLINE(1352)		if (!(this->_hx___renderDirty)) {
HXLINE(1352)			this->_hx___renderDirty = true;
HXDLIN(1352)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1359___allowMouseFocus)
HXDLIN(1359)		bool _hx_tmp;
HXDLIN(1359)		if (hx::IsNotEq( this->_hx___textEngine->type,(int)1 )) {
HXDLIN(1359)			_hx_tmp = this->get_tabEnabled();
            		}
            		else {
HXDLIN(1359)			_hx_tmp = true;
            		}
HXDLIN(1359)		if (!(_hx_tmp)) {
HXDLIN(1359)			return this->get_selectable();
            		}
            		else {
HXDLIN(1359)			return true;
            		}
HXDLIN(1359)		return false;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1366___caretBeginningOfLine)
HXDLIN(1366)		bool _hx_tmp;
HXDLIN(1366)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXDLIN(1366)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXDLIN(1366)			_hx_tmp = true;
            		}
HXDLIN(1366)		if (_hx_tmp) {
HXLINE(1368)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE(1372)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1379___caretEndOfLine)
HXLINE(1381)		int lineIndex;
HXLINE(1383)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1385)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE(1389)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
            		}
HXLINE(1393)		if ((lineIndex < (this->_hx___textEngine->numLines - (int)1))) {
HXLINE(1395)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + (int)1)) - (int)1);
            		}
            		else {
HXLINE(1399)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1408___caretNextCharacter)
HXDLIN(1408)		int _hx_tmp = this->_hx___caretIndex;
HXDLIN(1408)		if ((_hx_tmp < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(1410)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1417___caretNextLine)
HXLINE(1419)		if (hx::IsNull( lineIndex )) {
HXLINE(1421)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE(1425)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - (int)1) )) {
HXLINE(1427)			if (hx::IsNull( caretIndex )) {
HXLINE(1429)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE(1433)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex + (int)1));
            		}
            		else {
HXLINE(1437)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1446___caretPreviousCharacter)
HXDLIN(1446)		if ((this->_hx___caretIndex > (int)0)) {
HXLINE(1448)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1455___caretPreviousLine)
HXLINE(1457)		if (hx::IsNull( lineIndex )) {
HXLINE(1459)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE(1463)		if (hx::IsGreater( lineIndex,(int)0 )) {
HXLINE(1465)			if (hx::IsNull( caretIndex )) {
HXLINE(1467)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE(1471)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex - (int)1));
            		}
            		else {
HXLINE(1475)			this->_hx___caretIndex = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1484___disableInput)
HXDLIN(1484)		bool _hx_tmp;
HXDLIN(1484)		if (this->_hx___inputEnabled) {
HXDLIN(1484)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1484)			_hx_tmp = false;
            		}
HXDLIN(1484)		if (_hx_tmp) {
HXLINE(1487)			this->stage->window->_hx___backend->setTextInputEnabled(false);
HXLINE(1491)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1492)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1494)			this->_hx___inputEnabled = false;
HXLINE(1495)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1502___dispatch)
HXLINE(1504)		bool _hx_tmp;
HXDLIN(1504)		if ((event->eventPhase == (int)2)) {
HXLINE(1504)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE(1504)			_hx_tmp = false;
            		}
HXDLIN(1504)		if (_hx_tmp) {
HXLINE(1506)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE(1507)			Float group = this->get_mouseX();
HXDLIN(1507)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1509)			if (hx::IsNotNull( group1 )) {
HXLINE(1511)				::String url = group1->format->url;
HXLINE(1513)				bool _hx_tmp1;
HXDLIN(1513)				if (hx::IsNotNull( url )) {
HXLINE(1513)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1513)					_hx_tmp1 = false;
            				}
HXDLIN(1513)				if (_hx_tmp1) {
HXLINE(1515)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE(1517)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr((int)6,null())));
            					}
            					else {
HXLINE(1521)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE(1531)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1538___enableInput)
HXDLIN(1538)		if (hx::IsNotNull( this->stage )) {
HXLINE(1541)			this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1546)			if (!(this->_hx___inputEnabled)) {
HXLINE(1549)				this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1554)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1556)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1557)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1561)				this->_hx___inputEnabled = true;
HXLINE(1562)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1571___fromSymbol)
HXLINE(1573)		this->_hx___symbol = symbol;
HXLINE(1575)		this->set_width(symbol->width);
HXLINE(1576)		this->set_height(symbol->height);
HXLINE(1578)		this->_hx___offsetX = symbol->x;
HXLINE(1579)		this->_hx___offsetY = symbol->y;
HXLINE(1581)		this->set_multiline(symbol->multiline);
HXLINE(1582)		this->set_wordWrap(symbol->wordWrap);
HXLINE(1583)		this->set_displayAsPassword(symbol->password);
HXLINE(1585)		if (symbol->border) {
HXLINE(1587)			this->set_border(true);
HXLINE(1588)			this->set_background(true);
            		}
HXLINE(1592)		this->set_selectable(symbol->selectable);
HXLINE(1594)		if (symbol->input) {
HXLINE(1596)			this->set_type((int)1);
            		}
HXLINE(1600)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1601)		if (hx::IsNotNull( symbol->color )) {
HXLINE(1601)			format->color = ((int)symbol->color & (int)(int)16777215);
            		}
HXLINE(1602)		format->size = ::Math_obj::round(((Float)symbol->fontHeight / (Float)(int)20));
HXLINE(1604)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >()) );
HXLINE(1606)		if (hx::IsNotNull( font )) {
HXLINE(1616)			format->_hx___ascent = ((Float)((Float)font->ascent / (Float)(int)20) / (Float)(int)1024);
HXLINE(1617)			format->_hx___descent = ((Float)((Float)font->descent / (Float)(int)20) / (Float)(int)1024);
            		}
HXLINE(1621)		format->font = symbol->fontName;
HXLINE(1623)		bool found = false;
HXLINE(1625)		{
HXLINE(1625)			::String _g = format->font;
HXDLIN(1625)			if (hx::IsNull( _g )) {
HXLINE(1629)				found = true;
            			}
            			else {
HXLINE(1625)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE(1629)					found = true;
HXDLIN(1629)					goto _hx_goto_45;
            				}
            				/* default */{
HXLINE(1633)					int _g1 = (int)0;
HXDLIN(1633)					::Array< ::Dynamic> _g11 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1633)					while((_g1 < _g11->length)){
HXLINE(1633)						 ::openfl::text::Font font1 = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN(1633)						_g1 = (_g1 + (int)1);
HXLINE(1635)						if ((font1->name == format->font)) {
HXLINE(1637)							found = true;
HXLINE(1638)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
            				}
            				_hx_goto_45:;
            			}
            		}
HXLINE(1646)		if (!(found)) {
HXLINE(1648)			 ::EReg alpha =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]+",51,38,19,1d),HX_("g",67,00,00,00));
HXLINE(1650)			{
HXLINE(1650)				int _g12 = (int)0;
HXDLIN(1650)				::Array< ::Dynamic> _g2 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1650)				while((_g12 < _g2->length)){
HXLINE(1650)					 ::openfl::text::Font font2 = _g2->__get(_g12).StaticCast<  ::openfl::text::Font >();
HXDLIN(1650)					_g12 = (_g12 + (int)1);
HXLINE(1652)					::String _hx_tmp = alpha->replace(font2->name,HX_("",00,00,00,00)).substr((int)0,symbol->fontName.length);
HXDLIN(1652)					if ((_hx_tmp == symbol->fontName)) {
HXLINE(1654)						format->font = font2->name;
HXLINE(1655)						found = true;
HXLINE(1656)						goto _hx_goto_46;
            					}
            				}
            				_hx_goto_46:;
            			}
            		}
HXLINE(1664)		if (found) {
HXLINE(1666)			this->set_embedFonts(true);
            		}
            		else {
HXLINE(1668)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE(1670)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE(1671)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("TextField.hx",31,a8,83,a8),1671,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE(1675)		if (hx::IsNotNull( symbol->align )) {
HXLINE(1677)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE(1677)				format->align = (int)0;
            			}
            			else {
HXLINE(1678)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE(1678)					format->align = (int)4;
            				}
            				else {
HXLINE(1679)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE(1679)						format->align = (int)2;
            					}
            				}
            			}
HXLINE(1681)			format->leftMargin = ::Std_obj::_hx_int(((Float)symbol->leftMargin / (Float)(int)20));
HXLINE(1682)			format->rightMargin = ::Std_obj::_hx_int(((Float)symbol->rightMargin / (Float)(int)20));
HXLINE(1683)			format->indent = ::Std_obj::_hx_int(((Float)symbol->indent / (Float)(int)20));
HXLINE(1684)			format->leading = ::Std_obj::_hx_int(((Float)symbol->leading / (Float)(int)20));
            		}
HXLINE(1688)		this->set_defaultTextFormat(format);
HXLINE(1690)		if (hx::IsNotNull( symbol->text )) {
HXLINE(1692)			if (symbol->html) {
HXLINE(1694)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1698)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1714___getAdvance)
HXDLIN(1714)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1720___getBounds)
HXLINE(1722)		this->_hx___updateLayout();
HXLINE(1724)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1725)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1727)		 ::openfl::geom::Matrix matrix1 = matrix;
HXDLIN(1727)		matrix1->tx = (matrix1->tx + this->_hx___offsetX);
HXLINE(1728)		 ::openfl::geom::Matrix matrix2 = matrix;
HXDLIN(1728)		matrix2->ty = (matrix2->ty + this->_hx___offsetY);
HXLINE(1730)		bounds->_hx___transform(bounds,matrix);
HXLINE(1732)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1734)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1739___getCharBoundaries)
HXLINE(1741)		bool _hx_tmp;
HXDLIN(1741)		if ((charIndex >= (int)0)) {
HXLINE(1741)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE(1741)			_hx_tmp = true;
            		}
HXDLIN(1741)		if (_hx_tmp) {
HXLINE(1741)			return false;
            		}
HXLINE(1743)		this->_hx___updateLayout();
HXLINE(1745)		{
HXLINE(1745)			int _g = (int)0;
HXDLIN(1745)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1745)			while((_g < _g1->get_length())){
HXLINE(1745)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1745)				_g = (_g + (int)1);
HXLINE(1747)				bool _hx_tmp1;
HXDLIN(1747)				if ((charIndex >= group->startIndex)) {
HXLINE(1747)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1747)					_hx_tmp1 = false;
            				}
HXDLIN(1747)				if (_hx_tmp1) {
HXLINE(1749)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1751)						Float x = group->offsetX;
HXLINE(1753)						{
HXLINE(1753)							int _g3 = (int)0;
HXDLIN(1753)							int _g2 = (charIndex - group->startIndex);
HXDLIN(1753)							while((_g3 < _g2)){
HXLINE(1753)								_g3 = (_g3 + (int)1);
HXDLIN(1753)								int i = (_g3 - (int)1);
HXLINE(1755)								Float x1;
HXDLIN(1755)								bool x2;
HXDLIN(1755)								if ((i >= (int)0)) {
HXLINE(1755)									x2 = (i < group->positions->length);
            								}
            								else {
HXLINE(1755)									x2 = false;
            								}
HXDLIN(1755)								if (x2) {
HXLINE(1755)									x1 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1755)									x1 = (int)0;
            								}
HXDLIN(1755)								x = (x + x1);
            							}
            						}
HXLINE(1760)						int index = (charIndex - group->startIndex);
HXDLIN(1760)						Float lastPosition;
HXDLIN(1760)						bool lastPosition1;
HXDLIN(1760)						if ((index >= (int)0)) {
HXLINE(1760)							lastPosition1 = (index < group->positions->length);
            						}
            						else {
HXLINE(1760)							lastPosition1 = false;
            						}
HXDLIN(1760)						if (lastPosition1) {
HXLINE(1760)							lastPosition = group->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1760)							lastPosition = (int)0;
            						}
HXLINE(1762)						Float group1 = group->offsetY;
HXDLIN(1762)						rect->setTo(x,group1,lastPosition,(group->ascent + group->descent));
HXLINE(1763)						return true;
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1771)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1776___getCharIndexOnDifferentLine)
HXLINE(1778)		bool _hx_tmp;
HXDLIN(1778)		if ((charIndex >= (int)0)) {
HXLINE(1778)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE(1778)			_hx_tmp = true;
            		}
HXDLIN(1778)		if (_hx_tmp) {
HXLINE(1778)			return (int)-1;
            		}
HXLINE(1779)		bool _hx_tmp1;
HXDLIN(1779)		if ((lineIndex >= (int)0)) {
HXLINE(1779)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE(1779)			_hx_tmp1 = true;
            		}
HXDLIN(1779)		if (_hx_tmp1) {
HXLINE(1779)			return (int)-1;
            		}
HXLINE(1781)		 ::Dynamic x = null();
HXDLIN(1781)		 ::Dynamic y = null();
HXLINE(1783)		{
HXLINE(1783)			int _g = (int)0;
HXDLIN(1783)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1783)			while((_g < _g1->get_length())){
HXLINE(1783)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1783)				_g = (_g + (int)1);
HXLINE(1785)				bool _hx_tmp2;
HXDLIN(1785)				if ((charIndex >= group->startIndex)) {
HXLINE(1785)					_hx_tmp2 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1785)					_hx_tmp2 = false;
            				}
HXDLIN(1785)				if (_hx_tmp2) {
HXLINE(1787)					x = group->offsetX;
HXLINE(1789)					{
HXLINE(1789)						int _g3 = (int)0;
HXDLIN(1789)						int _g2 = (charIndex - group->startIndex);
HXDLIN(1789)						while((_g3 < _g2)){
HXLINE(1789)							_g3 = (_g3 + (int)1);
HXDLIN(1789)							int i = (_g3 - (int)1);
HXLINE(1791)							Float x1;
HXDLIN(1791)							bool x2;
HXDLIN(1791)							if ((i >= (int)0)) {
HXLINE(1791)								x2 = (i < group->positions->length);
            							}
            							else {
HXLINE(1791)								x2 = false;
            							}
HXDLIN(1791)							if (x2) {
HXLINE(1791)								x1 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1791)								x1 = (int)0;
            							}
HXDLIN(1791)							x = (x + x1);
            						}
            					}
HXLINE(1795)					if (hx::IsNotNull( y )) {
HXLINE(1795)						return this->_hx___getPosition(x,y);
            					}
            				}
HXLINE(1799)				if ((group->lineIndex == lineIndex)) {
HXLINE(1801)					Float group1 = group->offsetY;
HXDLIN(1801)					y = (group1 + ((Float)group->height / (Float)(int)2));
HXLINE(1803)					{
HXLINE(1803)						int _g31 = (int)0;
HXDLIN(1803)						int _g21 = (this->get_scrollV() - (int)1);
HXDLIN(1803)						while((_g31 < _g21)){
HXLINE(1803)							_g31 = (_g31 + (int)1);
HXDLIN(1803)							int i1 = (_g31 - (int)1);
HXLINE(1805)							y = (y - this->_hx___textEngine->lineHeights->get(i1));
            						}
            					}
HXLINE(1809)					if (hx::IsNotNull( x )) {
HXLINE(1809)						return this->_hx___getPosition(x,y);
            					}
            				}
            			}
            		}
HXLINE(1815)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

 ::lime::ui::MouseCursor TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1820___getCursor)
HXLINE(1822)		Float group = this->get_mouseX();
HXDLIN(1822)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1824)		bool _hx_tmp;
HXDLIN(1824)		if (hx::IsNotNull( group1 )) {
HXLINE(1824)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1824)			_hx_tmp = false;
            		}
HXDLIN(1824)		if (_hx_tmp) {
HXLINE(1826)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE(1828)			if (this->_hx___textEngine->selectable) {
HXLINE(1830)				return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            			}
            		}
HXLINE(1834)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,hx::Null< bool >  __o_precise){
bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1839___getGroup)
HXLINE(1841)		this->_hx___updateLayout();
HXLINE(1843)		x = (x + this->get_scrollH());
HXLINE(1845)		{
HXLINE(1845)			int _g1 = (int)0;
HXDLIN(1845)			int _g = (this->get_scrollV() - (int)1);
HXDLIN(1845)			while((_g1 < _g)){
HXLINE(1845)				_g1 = (_g1 + (int)1);
HXDLIN(1845)				int i = (_g1 - (int)1);
HXLINE(1847)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1851)		bool _hx_tmp;
HXDLIN(1851)		if (!(precise)) {
HXLINE(1851)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1851)			_hx_tmp = false;
            		}
HXDLIN(1851)		if (_hx_tmp) {
HXLINE(1851)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1853)		bool firstGroup = true;
HXLINE(1854)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1854)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1856)		{
HXLINE(1856)			int _g11 = (int)0;
HXDLIN(1856)			int _g2 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1856)			while((_g11 < _g2)){
HXLINE(1856)				_g11 = (_g11 + (int)1);
HXDLIN(1856)				int i1 = (_g11 - (int)1);
HXLINE(1858)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1860)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - (int)1))) {
HXLINE(1862)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1866)					nextGroup = null();
            				}
HXLINE(1870)				if (firstGroup) {
HXLINE(1872)					if ((y < group->offsetY)) {
HXLINE(1872)						y = group->offsetY;
            					}
HXLINE(1873)					if ((x < group->offsetX)) {
HXLINE(1873)						x = group->offsetX;
            					}
HXLINE(1874)					firstGroup = false;
            				}
HXLINE(1878)				bool _hx_tmp1;
HXDLIN(1878)				bool _hx_tmp2;
HXDLIN(1878)				if ((y >= group->offsetY)) {
HXLINE(1878)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1878)					_hx_tmp2 = false;
            				}
HXDLIN(1878)				if (!(_hx_tmp2)) {
HXLINE(1878)					if (!(precise)) {
HXLINE(1878)						_hx_tmp1 = hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1878)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1878)					_hx_tmp1 = true;
            				}
HXDLIN(1878)				if (_hx_tmp1) {
HXLINE(1880)					bool _hx_tmp3;
HXDLIN(1880)					bool _hx_tmp4;
HXDLIN(1880)					if ((x >= group->offsetX)) {
HXLINE(1880)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1880)						_hx_tmp4 = false;
            					}
HXDLIN(1880)					if (!(_hx_tmp4)) {
HXLINE(1880)						if (!(precise)) {
HXLINE(1880)							if (hx::IsNotNull( nextGroup )) {
HXLINE(1880)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1880)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1880)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1880)						_hx_tmp3 = true;
            					}
HXDLIN(1880)					if (_hx_tmp3) {
HXLINE(1882)						return group;
            					}
            				}
            			}
            		}
HXLINE(1890)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1895___getPosition)
HXLINE(1897)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1899)		if (hx::IsNull( group )) {
HXLINE(1901)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1905)		Float advance = ((Float)0.0);
HXLINE(1907)		{
HXLINE(1907)			int _g1 = (int)0;
HXDLIN(1907)			int _g = group->positions->length;
HXDLIN(1907)			while((_g1 < _g)){
HXLINE(1907)				_g1 = (_g1 + (int)1);
HXDLIN(1907)				int i = (_g1 - (int)1);
HXLINE(1909)				Float advance1;
HXDLIN(1909)				bool advance2;
HXDLIN(1909)				if ((i >= (int)0)) {
HXLINE(1909)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(1909)					advance2 = false;
            				}
HXDLIN(1909)				if (advance2) {
HXLINE(1909)					advance1 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(1909)					advance1 = (int)0;
            				}
HXDLIN(1909)				advance = (advance + advance1);
HXLINE(1911)				if ((x <= (group->offsetX + advance))) {
HXLINE(1913)					Float group1 = group->offsetX;
HXDLIN(1913)					Float _hx_tmp;
HXDLIN(1913)					bool _hx_tmp1;
HXDLIN(1913)					if ((i >= (int)0)) {
HXLINE(1913)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(1913)						_hx_tmp1 = false;
            					}
HXDLIN(1913)					if (_hx_tmp1) {
HXLINE(1913)						_hx_tmp = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1913)						_hx_tmp = (int)0;
            					}
HXDLIN(1913)					Float _hx_tmp2 = (group1 + (advance - _hx_tmp));
HXDLIN(1913)					Float _hx_tmp3;
HXDLIN(1913)					bool _hx_tmp4;
HXDLIN(1913)					if ((i >= (int)0)) {
HXLINE(1913)						_hx_tmp4 = (i < group->positions->length);
            					}
            					else {
HXLINE(1913)						_hx_tmp4 = false;
            					}
HXDLIN(1913)					if (_hx_tmp4) {
HXLINE(1913)						_hx_tmp3 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1913)						_hx_tmp3 = (int)0;
            					}
HXDLIN(1913)					if ((x <= (_hx_tmp2 + ((Float)_hx_tmp3 / (Float)(int)2)))) {
HXLINE(1915)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1919)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1919)							return ((group->startIndex + i) + (int)1);
            						}
            						else {
HXLINE(1919)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1927)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1931___hitTest)
HXLINE(1933)		bool _hx_tmp;
HXDLIN(1933)		bool _hx_tmp1;
HXDLIN(1933)		if (!(!(hitObject->get_visible()))) {
HXLINE(1933)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1933)			_hx_tmp1 = true;
            		}
HXDLIN(1933)		if (!(_hx_tmp1)) {
HXLINE(1933)			if (interactiveOnly) {
HXLINE(1933)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1933)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1933)			_hx_tmp = true;
            		}
HXDLIN(1933)		if (_hx_tmp) {
HXLINE(1933)			return false;
            		}
HXLINE(1934)		bool _hx_tmp2;
HXDLIN(1934)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1934)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1934)			_hx_tmp2 = false;
            		}
HXDLIN(1934)		if (_hx_tmp2) {
HXLINE(1934)			return false;
            		}
HXLINE(1936)		this->_hx___getRenderTransform();
HXLINE(1937)		this->_hx___updateLayout();
HXLINE(1939)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1939)		Float norm = (_this->a * _this->d);
HXDLIN(1939)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1939)		Float px;
HXDLIN(1939)		if ((norm1 == (int)0)) {
HXLINE(1939)			px = -(_this->tx);
            		}
            		else {
HXLINE(1939)			Float _this1 = _this->c;
HXDLIN(1939)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1939)			Float _this2 = _this->d;
HXDLIN(1939)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1940)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1940)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1940)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1940)		Float py;
HXDLIN(1940)		if ((norm3 == (int)0)) {
HXLINE(1940)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1940)			Float _this4 = _this3->a;
HXDLIN(1940)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1940)			Float _this5 = _this3->b;
HXDLIN(1940)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1942)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1944)			if (hx::IsNotNull( stack )) {
HXLINE(1946)				stack->push(hitObject);
            			}
HXLINE(1950)			return true;
            		}
HXLINE(1954)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1959___hitTestMask)
HXLINE(1961)		this->_hx___getRenderTransform();
HXLINE(1962)		this->_hx___updateLayout();
HXLINE(1964)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1964)		Float norm = (_this->a * _this->d);
HXDLIN(1964)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1964)		Float px;
HXDLIN(1964)		if ((norm1 == (int)0)) {
HXLINE(1964)			px = -(_this->tx);
            		}
            		else {
HXLINE(1964)			Float _this1 = _this->c;
HXDLIN(1964)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1964)			Float _this2 = _this->d;
HXDLIN(1964)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1965)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1965)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1965)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1965)		Float py;
HXDLIN(1965)		if ((norm3 == (int)0)) {
HXLINE(1965)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1965)			Float _this4 = _this3->a;
HXDLIN(1965)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1965)			Float _this5 = _this3->b;
HXDLIN(1965)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1967)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1969)			return true;
            		}
HXLINE(1973)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1978___renderCairo)
HXLINE(1981)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(1983)		bool _hx_tmp;
HXDLIN(1983)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1983)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1983)			_hx_tmp = false;
            		}
HXDLIN(1983)		if (_hx_tmp) {
HXLINE(1985)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN(1985)			if (!(!(bitmap->_hx___renderable))) {
HXLINE(1985)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN(1985)				bool _hx_tmp1;
HXDLIN(1985)				bool _hx_tmp2;
HXDLIN(1985)				if ((alpha > (int)0)) {
HXLINE(1985)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE(1985)					_hx_tmp2 = false;
            				}
HXDLIN(1985)				if (_hx_tmp2) {
HXLINE(1985)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE(1985)					_hx_tmp1 = false;
            				}
HXDLIN(1985)				if (_hx_tmp1) {
HXLINE(1985)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN(1985)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN(1985)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN(1985)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN(1985)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN(1985)					if (hx::IsNotNull( surface )) {
HXLINE(1985)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN(1985)						int _hx_tmp3;
HXDLIN(1985)						bool _hx_tmp4;
HXDLIN(1985)						if (renderer->_hx___allowSmoothing) {
HXLINE(1985)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE(1985)							_hx_tmp4 = false;
            						}
HXDLIN(1985)						if (_hx_tmp4) {
HXLINE(1985)							_hx_tmp3 = (int)1;
            						}
            						else {
HXLINE(1985)							_hx_tmp3 = (int)3;
            						}
HXDLIN(1985)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN(1985)						cairo->set_source(pattern);
HXDLIN(1985)						if ((alpha == (int)1)) {
HXLINE(1985)							cairo->paint();
            						}
            						else {
HXLINE(1985)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN(1985)					renderer->_hx___popMaskObject(bitmap,null());
            				}
            			}
            		}
            		else {
HXLINE(1989)			::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(1990)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(1994)		this->_hx___renderEvent(renderer);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2000___renderCanvas)
            	}


void TextField_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2077___renderDOM)
            	}


void TextField_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2121___renderDOMClear)
HXDLIN(2121)		::openfl::_internal::renderer::dom::DOMTextField_obj::clear(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void TextField_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2126___renderGL)
HXLINE(2128)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(2130)		bool _hx_tmp;
HXDLIN(2130)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2130)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(2130)			_hx_tmp = false;
            		}
HXDLIN(2130)		if (_hx_tmp) {
HXLINE(2132)			::openfl::_internal::renderer::opengl::GLBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE(2136)			::openfl::_internal::renderer::opengl::GLTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(2137)			bool _hx_tmp1;
HXDLIN(2137)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE(2137)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE(2137)				_hx_tmp1 = false;
            			}
HXDLIN(2137)			if (!(_hx_tmp1)) {
HXLINE(2137)				bool _hx_tmp2;
HXDLIN(2137)				if (!(!(this->_hx___renderable))) {
HXLINE(2137)					_hx_tmp2 = (this->_hx___worldAlpha <= (int)0);
            				}
            				else {
HXLINE(2137)					_hx_tmp2 = true;
            				}
HXDLIN(2137)				if (!(_hx_tmp2)) {
HXLINE(2137)					bool _hx_tmp3;
HXDLIN(2137)					bool _hx_tmp4;
HXDLIN(2137)					bool _hx_tmp5;
HXDLIN(2137)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(2137)						_hx_tmp5 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(2137)						_hx_tmp5 = false;
            					}
HXDLIN(2137)					if (_hx_tmp5) {
HXLINE(2137)						_hx_tmp4 = (this->get_width() > (int)0);
            					}
            					else {
HXLINE(2137)						_hx_tmp4 = false;
            					}
HXDLIN(2137)					if (_hx_tmp4) {
HXLINE(2137)						_hx_tmp3 = (this->get_height() > (int)0);
            					}
            					else {
HXLINE(2137)						_hx_tmp3 = false;
            					}
HXDLIN(2137)					if (_hx_tmp3) {
HXLINE(2137)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN(2137)						renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(2137)						 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXDLIN(2137)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXDLIN(2137)						Float _hx_tmp6 = this->get_width();
HXDLIN(2137)						rect->setTo((int)0,(int)0,_hx_tmp6,this->get_height());
HXDLIN(2137)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN(2137)						int color = this->opaqueBackground;
HXDLIN(2137)						gl->clearColor(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1);
HXDLIN(2137)						gl->clear(gl->COLOR_BUFFER_BIT);
HXDLIN(2137)						renderer->_hx___popMaskRect();
HXDLIN(2137)						renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(2137)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(2137)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(2137)						::openfl::_internal::renderer::opengl::GLShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
            		}
HXLINE(2141)		this->_hx___renderEvent(renderer);
            	}


void TextField_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2146___renderGLMask)
HXLINE(2148)		::openfl::_internal::renderer::opengl::GLTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(2150)		this->super::_hx___renderGLMask(renderer);
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,hx::Null< bool >  __o_restrict){
bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2155___replaceSelectedText)
HXLINE(2157)		if (hx::IsNull( value )) {
HXLINE(2157)			value = HX_("",00,00,00,00);
            		}
HXLINE(2158)		bool _hx_tmp;
HXDLIN(2158)		if ((value == HX_("",00,00,00,00))) {
HXLINE(2158)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2158)			_hx_tmp = false;
            		}
HXDLIN(2158)		if (_hx_tmp) {
HXLINE(2158)			return;
            		}
HXLINE(2160)		int startIndex;
HXDLIN(2160)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(2160)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2160)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(2161)		int endIndex;
HXDLIN(2161)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(2161)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2161)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(2163)		bool _hx_tmp1;
HXDLIN(2163)		bool _hx_tmp2;
HXDLIN(2163)		if ((startIndex == endIndex)) {
HXLINE(2163)			_hx_tmp2 = (this->_hx___textEngine->maxChars > (int)0);
            		}
            		else {
HXLINE(2163)			_hx_tmp2 = false;
            		}
HXDLIN(2163)		if (_hx_tmp2) {
HXLINE(2163)			int _hx_tmp3 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN(2163)			_hx_tmp1 = (_hx_tmp3 == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(2163)			_hx_tmp1 = false;
            		}
HXDLIN(2163)		if (_hx_tmp1) {
HXLINE(2163)			return;
            		}
HXLINE(2165)		if ((startIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(2165)			startIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2166)		if ((endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(2166)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2167)		if ((endIndex < startIndex)) {
HXLINE(2169)			int cache = endIndex;
HXLINE(2170)			endIndex = startIndex;
HXLINE(2171)			startIndex = cache;
            		}
HXLINE(2174)		if ((startIndex < (int)0)) {
HXLINE(2174)			startIndex = (int)0;
            		}
HXLINE(2176)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
HXLINE(2178)		int i = (startIndex + ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value));
HXLINE(2179)		if ((i > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(2179)			i = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2181)		this->setSelection(i,i);
HXLINE(2184)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2189___replaceText)
HXLINE(2191)		bool _hx_tmp;
HXDLIN(2191)		bool _hx_tmp1;
HXDLIN(2191)		bool _hx_tmp2;
HXDLIN(2191)		if ((endIndex >= beginIndex)) {
HXLINE(2191)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE(2191)			_hx_tmp2 = true;
            		}
HXDLIN(2191)		if (!(_hx_tmp2)) {
HXLINE(2191)			_hx_tmp1 = (endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE(2191)			_hx_tmp1 = true;
            		}
HXDLIN(2191)		if (!(_hx_tmp1)) {
HXLINE(2191)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE(2191)			_hx_tmp = true;
            		}
HXDLIN(2191)		if (_hx_tmp) {
HXLINE(2191)			return;
            		}
HXLINE(2193)		if (restrict) {
HXLINE(2195)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(2197)			if ((this->_hx___textEngine->maxChars > (int)0)) {
HXLINE(2199)				int removeLength = (endIndex - beginIndex);
HXLINE(2200)				int maxLength = this->_hx___textEngine->maxChars;
HXDLIN(2200)				int maxLength1 = ((maxLength - ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text)) + removeLength);
HXLINE(2202)				if ((maxLength1 <= (int)0)) {
HXLINE(2204)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(2206)					if ((maxLength1 < newText.length)) {
HXLINE(2208)						newText = newText.substr((int)0,maxLength1);
            					}
            				}
            			}
            		}
HXLINE(2216)		::String _hx_tmp3 = (::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,(int)0,beginIndex) + newText);
HXDLIN(2216)		this->_hx___updateText((_hx_tmp3 + ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,endIndex,null())));
HXLINE(2217)		if ((endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(2217)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2219)		int newText1 = newText.length;
HXDLIN(2219)		int offset = (newText1 - (endIndex - beginIndex));
HXLINE(2221)		int i = (int)0;
HXLINE(2222)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(2224)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(2226)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2228)			bool _hx_tmp4;
HXDLIN(2228)			if ((range->start <= beginIndex)) {
HXLINE(2228)				_hx_tmp4 = (range->end >= endIndex);
            			}
            			else {
HXLINE(2228)				_hx_tmp4 = false;
            			}
HXDLIN(2228)			if (_hx_tmp4) {
HXLINE(2230)				 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN(2230)				range1->end = (range1->end + offset);
HXLINE(2231)				i = (i + (int)1);
            			}
            			else {
HXLINE(2233)				bool _hx_tmp5;
HXDLIN(2233)				if ((range->start >= beginIndex)) {
HXLINE(2233)					_hx_tmp5 = (range->end <= endIndex);
            				}
            				else {
HXLINE(2233)					_hx_tmp5 = false;
            				}
HXDLIN(2233)				if (_hx_tmp5) {
HXLINE(2235)					if ((i > (int)0)) {
HXLINE(2237)						this->_hx___textEngine->textFormatRanges->splice(i,(int)1);
            					}
            					else {
HXLINE(2241)						range->start = (int)0;
HXLINE(2242)						range->end = (beginIndex + newText.length);
HXLINE(2243)						i = (i + (int)1);
            					}
HXLINE(2247)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE(2249)					bool _hx_tmp6;
HXDLIN(2249)					if ((range->start > beginIndex)) {
HXLINE(2249)						_hx_tmp6 = (range->start <= endIndex);
            					}
            					else {
HXLINE(2249)						_hx_tmp6 = false;
            					}
HXDLIN(2249)					if (_hx_tmp6) {
HXLINE(2251)						 ::openfl::_internal::text::TextFormatRange range2 = range;
HXDLIN(2251)						range2->start = (range2->start + offset);
HXLINE(2252)						i = (i + (int)1);
            					}
            					else {
HXLINE(2256)						i = (i + (int)1);
            					}
            				}
            			}
            		}
HXLINE(2262)		this->_hx___updateScrollH();
HXLINE(2264)		this->_hx___dirty = true;
HXLINE(2265)		this->_hx___layoutDirty = true;
HXLINE(2266)		if (!(this->_hx___renderDirty)) {
HXLINE(2266)			this->_hx___renderDirty = true;
HXDLIN(2266)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

 ::Dynamic TextField_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2273___shouldCacheHardware)
HXDLIN(2273)		if (hx::IsEq( value,true )) {
HXDLIN(2273)			return true;
            		}
            		else {
HXDLIN(2273)			return false;
            		}
HXDLIN(2273)		return false;
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2278___startCursorTimer)
HXLINE(2280)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE(2281)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(2282)		this->_hx___dirty = true;
HXLINE(2283)		if (!(this->_hx___renderDirty)) {
HXLINE(2283)			this->_hx___renderDirty = true;
HXDLIN(2283)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2288___startTextInput)
HXLINE(2290)		if ((this->_hx___caretIndex < (int)0)) {
HXLINE(2292)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(2293)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(2297)		bool enableInput = true;
HXLINE(2299)		if (enableInput) {
HXLINE(2301)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2308___stopCursorTimer)
HXLINE(2310)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(2312)			this->_hx___cursorTimer->stop();
HXLINE(2313)			this->_hx___cursorTimer = null();
            		}
HXLINE(2317)		if (this->_hx___showCursor) {
HXLINE(2319)			this->_hx___showCursor = false;
HXLINE(2320)			this->_hx___dirty = true;
HXLINE(2321)			if (!(this->_hx___renderDirty)) {
HXLINE(2321)				this->_hx___renderDirty = true;
HXDLIN(2321)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2328___stopTextInput)
HXLINE(2330)		bool disableInput = true;
HXLINE(2332)		if (disableInput) {
HXLINE(2334)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

bool TextField_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2341___updateCacheBitmap)
HXLINE(2343)		bool _hx_tmp;
HXDLIN(2343)		bool _hx_tmp1;
HXDLIN(2343)		bool _hx_tmp2;
HXDLIN(2343)		if (hx::IsNull( this->_hx___filters )) {
HXLINE(2343)			_hx_tmp2 = (renderer->_hx___type == HX_("opengl",6f,64,94,21));
            		}
            		else {
HXLINE(2343)			_hx_tmp2 = false;
            		}
HXDLIN(2343)		if (_hx_tmp2) {
HXLINE(2343)			_hx_tmp1 = hx::IsNull( this->_hx___cacheBitmap );
            		}
            		else {
HXLINE(2343)			_hx_tmp1 = false;
            		}
HXDLIN(2343)		if (_hx_tmp1) {
HXLINE(2343)			_hx_tmp = !(this->_hx___domRender);
            		}
            		else {
HXLINE(2343)			_hx_tmp = false;
            		}
HXDLIN(2343)		if (_hx_tmp) {
HXLINE(2343)			return false;
            		}
HXLINE(2345)		bool _hx_tmp3;
HXDLIN(2345)		if (!(force)) {
HXLINE(2345)			_hx_tmp3 = this->_hx___dirty;
            		}
            		else {
HXLINE(2345)			_hx_tmp3 = true;
            		}
HXDLIN(2345)		if (this->super::_hx___updateCacheBitmap(renderer,_hx_tmp3)) {
HXLINE(2347)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2349)				 ::openfl::geom::Matrix _hx_tmp4 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(2349)				_hx_tmp4->tx = (_hx_tmp4->tx - this->_hx___offsetX);
HXLINE(2350)				 ::openfl::geom::Matrix _hx_tmp5 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(2350)				_hx_tmp5->ty = (_hx_tmp5->ty - this->_hx___offsetY);
            			}
HXLINE(2354)			return true;
            		}
HXLINE(2358)		return false;
            	}


void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2365___updateLayout)
HXDLIN(2365)		if (this->_hx___layoutDirty) {
HXLINE(2367)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(2368)			Float cacheHeight = this->_hx___textEngine->height;
HXLINE(2370)			this->_hx___textEngine->update();
HXLINE(2372)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 )) {
HXLINE(2374)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(2376)					 ::Dynamic _g = this->_hx___textEngine->autoSize;
HXDLIN(2376)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(2384)						 ::openfl::text::TextField _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2384)						Float _hx_tmp = _g1->get_x();
HXDLIN(2384)						_g1->set_x((_hx_tmp + ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2)));
HXDLIN(2384)						goto _hx_goto_80;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(2380)						 ::openfl::text::TextField _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2380)						Float _hx_tmp1 = _g2->get_x();
HXDLIN(2380)						_g2->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(2380)						goto _hx_goto_80;
            					}
            					/* default */{
            					}
            					_hx_goto_80:;
            				}
HXLINE(2394)				this->_hx___textEngine->getBounds();
            			}
HXLINE(2398)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2407___updateScrollH)
HXDLIN(2407)		bool _hx_tmp;
HXDLIN(2407)		if (!(this->get_multiline())) {
HXDLIN(2407)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(2407)			_hx_tmp = false;
            		}
HXDLIN(2407)		if (_hx_tmp) {
HXLINE(2409)			this->_hx___layoutDirty = true;
HXLINE(2410)			this->_hx___updateLayout();
HXLINE(2412)			Float offsetX = ((this->_hx___textEngine->textWidth - this->_hx___textEngine->width) + (int)4);
HXLINE(2414)			if ((offsetX > (int)0)) {
HXLINE(2419)				int _hx_tmp1 = this->_hx___caretIndex;
HXDLIN(2419)				if ((_hx_tmp1 >= ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()))) {
HXLINE(2421)					this->set_scrollH(::Math_obj::ceil(offsetX));
            				}
            				else {
HXLINE(2425)					 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(2426)					this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
HXLINE(2428)					Float caret1 = caret->x;
HXDLIN(2428)					if ((caret1 < this->get_scrollH())) {
HXLINE(2430)						this->set_scrollH(::Math_obj::floor((caret->x - (int)2)));
            					}
            					else {
HXLINE(2432)						Float caret2 = caret->x;
HXDLIN(2432)						int _hx_tmp2 = this->get_scrollH();
HXDLIN(2432)						if ((caret2 > (_hx_tmp2 + this->_hx___textEngine->width))) {
HXLINE(2434)							this->set_scrollH(::Math_obj::ceil(((caret->x - this->_hx___textEngine->width) - (int)2)));
            						}
            					}
HXLINE(2438)					::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            				}
            			}
            			else {
HXLINE(2444)				this->set_scrollH((int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2453___updateText)
HXLINE(2465)		this->_hx___textEngine->set_text(value);
HXLINE(2466)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(2468)		int _hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN(2468)		if ((_hx_tmp < this->_hx___caretIndex)) {
HXLINE(2470)			this->_hx___selectionIndex = (this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
HXLINE(2474)		if (!(this->_hx___displayAsPassword)) {
HXLINE(2476)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(2480)			int length = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE(2481)			::String mask = HX_("",00,00,00,00);
HXLINE(2483)			{
HXLINE(2483)				int _g1 = (int)0;
HXDLIN(2483)				int _g = length;
HXDLIN(2483)				while((_g1 < _g)){
HXLINE(2483)					_g1 = (_g1 + (int)1);
HXDLIN(2483)					int i = (_g1 - (int)1);
HXLINE(2485)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(2489)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2496___updateTransforms)
HXLINE(2498)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(2499)		{
HXLINE(2499)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2499)			Float px = this->_hx___offsetX;
HXDLIN(2499)			Float py = this->_hx___offsetY;
HXDLIN(2499)			Float _hx_tmp = (px * _this->a);
HXDLIN(2499)			_this->tx = ((_hx_tmp + (py * _this->c)) + _this->tx);
HXDLIN(2499)			Float _hx_tmp1 = (px * _this->b);
HXDLIN(2499)			_this->ty = ((_hx_tmp1 + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2513_get_antiAliasType)
HXDLIN(2513)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2518_set_antiAliasType)
HXLINE(2520)		bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(2526)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2533_get_autoSize)
HXDLIN(2533)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2538_set_autoSize)
HXLINE(2540)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(2542)			this->_hx___dirty = true;
HXLINE(2543)			this->_hx___layoutDirty = true;
HXLINE(2544)			if (!(this->_hx___renderDirty)) {
HXLINE(2544)				this->_hx___renderDirty = true;
HXDLIN(2544)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2548)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2555_get_background)
HXDLIN(2555)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2560_set_background)
HXLINE(2562)		if ((value != this->_hx___textEngine->background)) {
HXLINE(2564)			this->_hx___dirty = true;
HXLINE(2565)			if (!(this->_hx___renderDirty)) {
HXLINE(2565)				this->_hx___renderDirty = true;
HXDLIN(2565)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2569)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2576_get_backgroundColor)
HXDLIN(2576)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2581_set_backgroundColor)
HXLINE(2583)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(2585)			this->_hx___dirty = true;
HXLINE(2586)			if (!(this->_hx___renderDirty)) {
HXLINE(2586)				this->_hx___renderDirty = true;
HXDLIN(2586)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2590)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2597_get_border)
HXDLIN(2597)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2602_set_border)
HXLINE(2604)		if ((value != this->_hx___textEngine->border)) {
HXLINE(2606)			this->_hx___dirty = true;
HXLINE(2607)			if (!(this->_hx___renderDirty)) {
HXLINE(2607)				this->_hx___renderDirty = true;
HXDLIN(2607)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2611)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2618_get_borderColor)
HXDLIN(2618)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2623_set_borderColor)
HXLINE(2625)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(2627)			this->_hx___dirty = true;
HXLINE(2628)			if (!(this->_hx___renderDirty)) {
HXLINE(2628)				this->_hx___renderDirty = true;
HXDLIN(2628)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2632)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2637_get_bottomScrollV)
HXLINE(2639)		this->_hx___updateLayout();
HXLINE(2641)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2648_get_caretIndex)
HXDLIN(2648)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2655_get_defaultTextFormat)
HXDLIN(2655)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2660_set_defaultTextFormat)
HXLINE(2662)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2664)		this->_hx___layoutDirty = true;
HXLINE(2665)		this->_hx___dirty = true;
HXLINE(2666)		if (!(this->_hx___renderDirty)) {
HXLINE(2666)			this->_hx___renderDirty = true;
HXDLIN(2666)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2668)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2675_get_displayAsPassword)
HXDLIN(2675)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2680_set_displayAsPassword)
HXLINE(2682)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2684)			this->_hx___dirty = true;
HXLINE(2685)			this->_hx___layoutDirty = true;
HXLINE(2686)			if (!(this->_hx___renderDirty)) {
HXLINE(2686)				this->_hx___renderDirty = true;
HXDLIN(2686)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2688)			this->_hx___displayAsPassword = value;
HXLINE(2689)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2693)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2700_get_embedFonts)
HXDLIN(2700)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2714_set_embedFonts)
HXDLIN(2714)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2721_get_gridFitType)
HXDLIN(2721)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2735_set_gridFitType)
HXDLIN(2735)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2740_get_height)
HXLINE(2742)		this->_hx___updateLayout();
HXLINE(2743)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2743)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2748_set_height)
HXLINE(2750)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2752)			this->_hx___setTransformDirty();
HXLINE(2753)			this->_hx___dirty = true;
HXLINE(2754)			this->_hx___layoutDirty = true;
HXLINE(2755)			if (!(this->_hx___renderDirty)) {
HXLINE(2755)				this->_hx___renderDirty = true;
HXDLIN(2755)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2757)			this->_hx___textEngine->height = value;
            		}
HXLINE(2761)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2761)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2771_get_htmlText)
HXDLIN(2771)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2777_set_htmlText)
HXLINE(2779)		bool _hx_tmp;
HXDLIN(2779)		if (!(!(this->_hx___isHTML))) {
HXLINE(2779)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2779)			_hx_tmp = true;
            		}
HXDLIN(2779)		if (_hx_tmp) {
HXLINE(2781)			this->_hx___dirty = true;
HXLINE(2782)			this->_hx___layoutDirty = true;
HXLINE(2783)			if (!(this->_hx___renderDirty)) {
HXLINE(2783)				this->_hx___renderDirty = true;
HXDLIN(2783)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2787)		this->_hx___isHTML = true;
HXLINE(2793)		value = ::openfl::_internal::text::HTMLParser_obj::parse(value,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2827)		this->_hx___updateText(value);
HXLINE(2830)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2835_get_length)
HXLINE(2837)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(2839)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2843)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2850_get_maxChars)
HXDLIN(2850)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2855_set_maxChars)
HXLINE(2857)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2859)			this->_hx___textEngine->maxChars = value;
HXLINE(2861)			this->_hx___dirty = true;
HXLINE(2862)			this->_hx___layoutDirty = true;
HXLINE(2863)			if (!(this->_hx___renderDirty)) {
HXLINE(2863)				this->_hx___renderDirty = true;
HXDLIN(2863)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2867)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2872_get_maxScrollH)
HXLINE(2874)		this->_hx___updateLayout();
HXLINE(2876)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2881_get_maxScrollV)
HXLINE(2883)		this->_hx___updateLayout();
HXLINE(2885)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2892_get_mouseWheelEnabled)
HXDLIN(2892)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2899_set_mouseWheelEnabled)
HXDLIN(2899)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2906_get_multiline)
HXDLIN(2906)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2911_set_multiline)
HXLINE(2913)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(2915)			this->_hx___dirty = true;
HXLINE(2916)			this->_hx___layoutDirty = true;
HXLINE(2917)			this->_hx___updateText(this->_hx___text);
HXLINE(2918)			this->_hx___updateScrollH();
HXLINE(2919)			if (!(this->_hx___renderDirty)) {
HXLINE(2919)				this->_hx___renderDirty = true;
HXDLIN(2919)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2923)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2928_get_numLines)
HXLINE(2930)		this->_hx___updateLayout();
HXLINE(2932)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2939_get_restrict)
HXDLIN(2939)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2944_set_restrict)
HXLINE(2946)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2948)			this->_hx___textEngine->set_restrict(value);
HXLINE(2949)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2953)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2960_get_scrollH)
HXDLIN(2960)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2965_set_scrollH)
HXLINE(2967)		this->_hx___updateLayout();
HXLINE(2969)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2969)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2970)		if ((value < (int)0)) {
HXLINE(2970)			value = (int)0;
            		}
HXLINE(2972)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2974)			this->_hx___dirty = true;
HXLINE(2975)			if (!(this->_hx___renderDirty)) {
HXLINE(2975)				this->_hx___renderDirty = true;
HXDLIN(2975)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2976)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2980)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2987_get_scrollV)
HXDLIN(2987)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2992_set_scrollV)
HXLINE(2994)		this->_hx___updateLayout();
HXLINE(2996)		if ((value > this->_hx___textEngine->maxScrollV)) {
HXLINE(2996)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(2997)		if ((value < (int)1)) {
HXLINE(2997)			value = (int)1;
            		}
HXLINE(2999)		if ((value != this->_hx___textEngine->scrollV)) {
HXLINE(3001)			this->_hx___dirty = true;
HXLINE(3002)			if (!(this->_hx___renderDirty)) {
HXLINE(3002)				this->_hx___renderDirty = true;
HXDLIN(3002)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3003)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(3007)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3014_get_selectable)
HXDLIN(3014)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3019_set_selectable)
HXLINE(3021)		bool _hx_tmp;
HXDLIN(3021)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(3021)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(3021)			_hx_tmp = false;
            		}
HXDLIN(3021)		if (_hx_tmp) {
HXLINE(3023)			bool _hx_tmp1;
HXDLIN(3023)			if (hx::IsNotNull( this->stage )) {
HXLINE(3023)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(3023)				_hx_tmp1 = false;
            			}
HXDLIN(3023)			if (_hx_tmp1) {
HXLINE(3025)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(3027)				if (!(value)) {
HXLINE(3029)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(3035)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3042_get_selectionBeginIndex)
HXDLIN(3042)		return ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3049_get_selectionEndIndex)
HXDLIN(3049)		return ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3056_get_sharpness)
HXDLIN(3056)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3061_set_sharpness)
HXLINE(3063)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(3065)			this->_hx___dirty = true;
HXLINE(3066)			if (!(this->_hx___renderDirty)) {
HXLINE(3066)				this->_hx___renderDirty = true;
HXDLIN(3066)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3070)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3077_get_tabEnabled)
HXDLIN(3077)		if (hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(3077)			return hx::IsEq( this->_hx___textEngine->type,(int)1 );
            		}
            		else {
HXDLIN(3077)			return this->_hx___tabEnabled;
            		}
HXDLIN(3077)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3084_get_text)
HXDLIN(3084)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3089_set_text)
HXLINE(3091)		bool _hx_tmp;
HXDLIN(3091)		if (!(this->_hx___isHTML)) {
HXLINE(3091)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(3091)			_hx_tmp = true;
            		}
HXDLIN(3091)		if (_hx_tmp) {
HXLINE(3093)			this->_hx___dirty = true;
HXLINE(3094)			this->_hx___layoutDirty = true;
HXLINE(3095)			if (!(this->_hx___renderDirty)) {
HXLINE(3095)				this->_hx___renderDirty = true;
HXDLIN(3095)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(3099)			return value;
            		}
HXLINE(3103)		if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(3105)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3105)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            		}
HXLINE(3109)		::String utfValue = value;
HXLINE(3110)		 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(3111)		range->format = this->_hx___textFormat;
HXLINE(3112)		range->start = (int)0;
HXLINE(3113)		range->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(utfValue);
HXLINE(3115)		this->_hx___isHTML = false;
HXLINE(3117)		this->_hx___updateText(value);
HXLINE(3119)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3126_get_textColor)
HXDLIN(3126)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3131_set_textColor)
HXLINE(3133)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(3135)			this->_hx___dirty = true;
HXLINE(3136)			if (!(this->_hx___renderDirty)) {
HXLINE(3136)				this->_hx___renderDirty = true;
HXDLIN(3136)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3140)		{
HXLINE(3140)			int _g = (int)0;
HXDLIN(3140)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3140)			while((_g < _g1->get_length())){
HXLINE(3140)				 ::openfl::_internal::text::TextFormatRange range = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(3140)				_g = (_g + (int)1);
HXLINE(3142)				range->format->color = value;
            			}
            		}
HXLINE(3146)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3150_get_textWidth)
HXLINE(3152)		this->_hx___updateLayout();
HXLINE(3153)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3158_get_textHeight)
HXLINE(3160)		this->_hx___updateLayout();
HXLINE(3161)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3168_get_type)
HXDLIN(3168)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3173_set_type)
HXLINE(3175)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(3177)			if (hx::IsEq( value,(int)1 )) {
HXLINE(3179)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(3181)				this->this_onFocusIn(null());
HXLINE(3182)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(3186)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(3188)				this->_hx___stopTextInput();
HXLINE(3189)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(3193)			this->_hx___dirty = true;
HXLINE(3194)			this->_hx___layoutDirty = true;
HXLINE(3195)			if (!(this->_hx___renderDirty)) {
HXLINE(3195)				this->_hx___renderDirty = true;
HXDLIN(3195)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3199)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3204_get_width)
HXLINE(3206)		this->_hx___updateLayout();
HXLINE(3207)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(3207)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3212_set_width)
HXLINE(3214)		if ((value != this->_hx___textEngine->width)) {
HXLINE(3216)			this->_hx___setTransformDirty();
HXLINE(3217)			this->_hx___dirty = true;
HXLINE(3218)			this->_hx___layoutDirty = true;
HXLINE(3219)			if (!(this->_hx___renderDirty)) {
HXLINE(3219)				this->_hx___renderDirty = true;
HXDLIN(3219)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3221)			this->_hx___textEngine->width = value;
            		}
HXLINE(3225)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(3225)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3232_get_wordWrap)
HXDLIN(3232)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3237_set_wordWrap)
HXLINE(3239)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(3241)			this->_hx___dirty = true;
HXLINE(3242)			this->_hx___layoutDirty = true;
HXLINE(3243)			if (!(this->_hx___renderDirty)) {
HXLINE(3243)				this->_hx___renderDirty = true;
HXDLIN(3243)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3247)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3254_get_x)
HXDLIN(3254)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3259_set_x)
HXLINE(3261)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(3261)			this->_hx___setTransformDirty();
            		}
HXLINE(3262)		return (this->_hx___transform->tx = (value - this->_hx___offsetX));
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3269_get_y)
HXDLIN(3269)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3274_set_y)
HXLINE(3276)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(3276)			this->_hx___setTransformDirty();
            		}
HXLINE(3277)		return (this->_hx___transform->ty = (value - this->_hx___offsetY));
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3289_stage_onMouseMove)
HXLINE(3291)		if (hx::IsNull( this->stage )) {
HXLINE(3291)			return;
            		}
HXLINE(3293)		bool _hx_tmp;
HXDLIN(3293)		if (this->_hx___textEngine->selectable) {
HXLINE(3293)			_hx_tmp = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(3293)			_hx_tmp = false;
            		}
HXDLIN(3293)		if (_hx_tmp) {
HXLINE(3295)			this->_hx___updateLayout();
HXLINE(3297)			Float position = this->get_mouseX();
HXDLIN(3297)			Float position1 = (position + this->get_scrollH());
HXDLIN(3297)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(3299)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(3301)				this->_hx___caretIndex = position2;
HXLINE(3309)				{
HXLINE(3311)					this->_hx___dirty = true;
HXLINE(3312)					if (!(this->_hx___renderDirty)) {
HXLINE(3312)						this->_hx___renderDirty = true;
HXDLIN(3312)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3323_stage_onMouseUp)
HXLINE(3325)		if (hx::IsNull( this->stage )) {
HXLINE(3325)			return;
            		}
HXLINE(3327)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(3328)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(3330)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3332)			this->_hx___getWorldTransform();
HXLINE(3333)			this->_hx___updateLayout();
HXLINE(3335)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(3335)			Float px = this->get_x();
HXDLIN(3335)			Float py = this->get_y();
HXDLIN(3335)			Float norm = (_this->a * _this->d);
HXDLIN(3335)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(3335)			Float px1;
HXDLIN(3335)			if ((norm1 == (int)0)) {
HXLINE(3335)				px1 = -(_this->tx);
            			}
            			else {
HXLINE(3335)				Float _this1 = _this->c;
HXDLIN(3335)				Float px2 = (_this1 * (_this->ty - py));
HXDLIN(3335)				Float _this2 = _this->d;
HXDLIN(3335)				px1 = (((Float)((Float)1.0) / (Float)norm1) * (px2 + (_this2 * (px - _this->tx))));
            			}
HXLINE(3336)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(3336)			Float px3 = this->get_x();
HXDLIN(3336)			Float py1 = this->get_y();
HXDLIN(3336)			Float norm2 = (_this3->a * _this3->d);
HXDLIN(3336)			Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(3336)			Float py2;
HXDLIN(3336)			if ((norm3 == (int)0)) {
HXLINE(3336)				py2 = -(_this3->ty);
            			}
            			else {
HXLINE(3336)				Float _this4 = _this3->a;
HXDLIN(3336)				Float py3 = (_this4 * (py1 - _this3->ty));
HXDLIN(3336)				Float _this5 = _this3->b;
HXDLIN(3336)				py2 = (((Float)((Float)1.0) / (Float)norm3) * (py3 + (_this5 * (_this3->tx - px3))));
            			}
HXLINE(3338)			Float upPos = this->get_mouseX();
HXDLIN(3338)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(3338)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(3339)			int leftPos;
HXLINE(3340)			int rightPos;
HXLINE(3342)			leftPos = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___selectionIndex,upPos2));
HXLINE(3343)			rightPos = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___selectionIndex,upPos2));
HXLINE(3345)			this->_hx___selectionIndex = leftPos;
HXLINE(3346)			this->_hx___caretIndex = rightPos;
HXLINE(3348)			if (this->_hx___inputEnabled) {
HXLINE(3350)				this->this_onFocusIn(null());
HXLINE(3352)				this->_hx___stopCursorTimer();
HXLINE(3353)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3370_this_onAddedToStage)
HXDLIN(3370)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3377_this_onFocusIn)
HXDLIN(3377)		bool _hx_tmp;
HXDLIN(3377)		bool _hx_tmp1;
HXDLIN(3377)		if (hx::IsEq( this->get_type(),(int)1 )) {
HXDLIN(3377)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(3377)			_hx_tmp1 = false;
            		}
HXDLIN(3377)		if (_hx_tmp1) {
HXDLIN(3377)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(3377)			_hx_tmp = false;
            		}
HXDLIN(3377)		if (_hx_tmp) {
HXLINE(3379)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3386_this_onFocusOut)
HXLINE(3388)		this->_hx___stopCursorTimer();
HXLINE(3392)		bool _hx_tmp;
HXDLIN(3392)		if (hx::IsNotNull( event->relatedObject )) {
HXLINE(3392)			_hx_tmp = !(::Std_obj::is(event->relatedObject,hx::ClassOf< ::openfl::text::TextField >()));
            		}
            		else {
HXLINE(3392)			_hx_tmp = true;
            		}
HXDLIN(3392)		if (_hx_tmp) {
HXLINE(3394)			this->_hx___stopTextInput();
            		}
            		else {
HXLINE(3398)			if (hx::IsNotNull( this->stage )) {
HXLINE(3400)				this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(3401)				this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
            			}
HXLINE(3405)			this->_hx___inputEnabled = false;
            		}
HXLINE(3409)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3411)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3412)			this->_hx___dirty = true;
HXLINE(3413)			if (!(this->_hx___renderDirty)) {
HXLINE(3413)				this->_hx___renderDirty = true;
HXDLIN(3413)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3422_this_onKeyDown)
HXDLIN(3422)		bool _hx_tmp;
HXDLIN(3422)		bool _hx_tmp1;
HXDLIN(3422)		bool _hx_tmp2;
HXDLIN(3422)		if (this->get_selectable()) {
HXDLIN(3422)			_hx_tmp2 = hx::IsNotEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(3422)			_hx_tmp2 = false;
            		}
HXDLIN(3422)		if (_hx_tmp2) {
HXDLIN(3422)			_hx_tmp1 = (event->keyCode == (int)67);
            		}
            		else {
HXDLIN(3422)			_hx_tmp1 = false;
            		}
HXDLIN(3422)		if (_hx_tmp1) {
HXDLIN(3422)			if (!(event->commandKey)) {
HXDLIN(3422)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(3422)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(3422)			_hx_tmp = false;
            		}
HXDLIN(3422)		if (_hx_tmp) {
HXLINE(3424)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3426)				::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3435_this_onMouseDown)
HXLINE(3437)		bool _hx_tmp;
HXDLIN(3437)		if (!(this->get_selectable())) {
HXLINE(3437)			_hx_tmp = hx::IsNotEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(3437)			_hx_tmp = false;
            		}
HXDLIN(3437)		if (_hx_tmp) {
HXLINE(3437)			return;
            		}
HXLINE(3439)		this->_hx___updateLayout();
HXLINE(3441)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(3441)		Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(3441)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp2,this->get_mouseY());
HXLINE(3442)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3444)		{
HXLINE(3446)			this->_hx___dirty = true;
HXLINE(3447)			if (!(this->_hx___renderDirty)) {
HXLINE(3447)				this->_hx___renderDirty = true;
HXDLIN(3447)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3451)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(3452)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3459_window_onKeyDown)
HXDLIN(3459)		switch((int)(key)){
            			case (int)8: {
HXLINE(3481)				bool _hx_tmp;
HXDLIN(3481)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3481)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(3481)					_hx_tmp = false;
            				}
HXDLIN(3481)				if (_hx_tmp) {
HXLINE(3483)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(3487)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3489)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3490)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3492)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3709)				if (this->get_selectable()) {
HXLINE(3711)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3713)						this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(3714)						this->_hx___selectionIndex = (int)0;
            					}
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3655)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3657)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3659)						::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3683)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3685)					if (hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() )) {
HXLINE(3687)						 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,::lime::_hx_system::Clipboard_obj::get_text());
HXLINE(3689)						this->dispatchEvent(te);
HXLINE(3691)						if (!(te->isDefaultPrevented())) {
HXLINE(3693)							this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3695)							this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            						}
            					}
            				}
            				else {
HXLINE(3704)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3704)					( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1,(::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges) - (int)1))) )->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3667)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3669)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3671)						::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3673)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3674)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(3498)				bool _hx_tmp1;
HXDLIN(3498)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3498)					int _hx_tmp2 = this->_hx___caretIndex;
HXDLIN(3498)					_hx_tmp1 = (_hx_tmp2 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            				}
            				else {
HXLINE(3498)					_hx_tmp1 = false;
            				}
HXDLIN(3498)				if (_hx_tmp1) {
HXLINE(3500)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(3504)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3506)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3507)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3509)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(3641)				if (this->get_selectable()) {
HXLINE(3643)					this->_hx___caretBeginningOfLine();
HXLINE(3644)					this->_hx___stopCursorTimer();
HXLINE(3645)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3647)				if (this->get_selectable()) {
HXLINE(3649)					this->_hx___caretEndOfLine();
HXLINE(3650)					this->_hx___stopCursorTimer();
HXLINE(3651)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(3549)				if (this->get_selectable()) {
HXLINE(3551)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3553)						this->_hx___caretEndOfLine();
HXLINE(3555)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3557)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
            					else {
HXLINE(3561)						if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3563)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(3567)							if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3569)								this->_hx___caretNextCharacter();
            							}
            							else {
HXLINE(3573)								this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            							}
HXLINE(3577)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
HXLINE(3581)					this->_hx___updateScrollH();
HXLINE(3582)					this->_hx___stopCursorTimer();
HXLINE(3583)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741904: {
HXLINE(3513)				if (this->get_selectable()) {
HXLINE(3515)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3517)						this->_hx___caretBeginningOfLine();
HXLINE(3519)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3521)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
            					else {
HXLINE(3525)						if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3527)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(3531)							if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3533)								this->_hx___caretPreviousCharacter();
            							}
            							else {
HXLINE(3537)								this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            							}
HXLINE(3541)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
HXLINE(3545)					this->_hx___updateScrollH();
HXLINE(3546)					this->_hx___stopCursorTimer();
HXLINE(3547)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741905: {
HXLINE(3585)				if (this->get_selectable()) {
HXLINE(3587)					if (!(this->_hx___textEngine->multiline)) {
HXLINE(3587)						return;
            					}
HXLINE(3589)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3591)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(3595)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3597)							this->_hx___caretNextLine(null(),null());
            						}
            						else {
HXLINE(3601)							int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(3602)							this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            						}
HXLINE(3606)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3610)					this->_hx___stopCursorTimer();
HXLINE(3611)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741906: {
HXLINE(3613)				if (this->get_selectable()) {
HXLINE(3615)					if (!(this->_hx___textEngine->multiline)) {
HXLINE(3615)						return;
            					}
HXLINE(3617)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3619)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(3623)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3625)							this->_hx___caretPreviousLine(null(),null());
            						}
            						else {
HXLINE(3629)							int lineIndex1 = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(3630)							this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            						}
HXLINE(3634)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3638)					this->_hx___stopCursorTimer();
HXLINE(3639)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(3463)				if (this->_hx___textEngine->multiline) {
HXLINE(3465)					 ::openfl::events::TextEvent te1 =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,HX_("\n",0a,00,00,00));
HXLINE(3467)					this->dispatchEvent(te1);
HXLINE(3469)					if (!(te1->isDefaultPrevented())) {
HXLINE(3471)						this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(3473)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3725_window_onTextInput)
HXLINE(3727)		this->_hx___replaceSelectedText(value,true);
HXLINE(3730)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { return hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__domRender","\x58","\x38","\xba","\x4f"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_HCSTRING("__domRender","\x58","\x38","\xba","\x4f")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::symbols::DynamicTextSymbol*/ ,(int)offsetof(TextField_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__domRender","\x58","\x38","\xba","\x4f"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__allowMouseFocus","\x3c","\x92","\x71","\x07"),
	HX_HCSTRING("__caretBeginningOfLine","\x45","\xc9","\x47","\xfd"),
	HX_HCSTRING("__caretEndOfLine","\x03","\x74","\xb1","\x5c"),
	HX_HCSTRING("__caretNextCharacter","\xd3","\x7b","\x4f","\xea"),
	HX_HCSTRING("__caretNextLine","\x0a","\x68","\xad","\x0d"),
	HX_HCSTRING("__caretPreviousCharacter","\x8f","\xce","\x6c","\x11"),
	HX_HCSTRING("__caretPreviousLine","\xce","\x0e","\x89","\x48"),
	HX_HCSTRING("__disableInput","\x22","\x64","\x62","\x1d"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__enableInput","\x67","\x4b","\x65","\xd1"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getAdvance","\xac","\x09","\x01","\x77"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCharBoundaries","\x54","\xae","\x91","\x3e"),
	HX_HCSTRING("__getCharIndexOnDifferentLine","\x08","\x76","\x0f","\x0a"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getGroup","\xe9","\x35","\x04","\x9d"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__replaceSelectedText","\xdc","\x1f","\x28","\x29"),
	HX_HCSTRING("__replaceText","\xe1","\xab","\x0d","\xaa"),
	HX_HCSTRING("__shouldCacheHardware","\xb7","\xaf","\xf5","\x89"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateCacheBitmap","\x28","\x11","\x07","\x27"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateScrollH","\x72","\xd1","\xf8","\x83"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_tabEnabled","\xf5","\x7e","\xfe","\xb5"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onKeyDown","\xe1","\x85","\xbf","\x37"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_151_boot)
HXDLIN( 151)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
