// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_568_isAccessible,"openfl.ui.Keyboard","isAccessible",0xa9f8adcb,"openfl.ui.Keyboard.isAccessible","openfl/ui/Keyboard.hx",568,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_575___convertKeyCode,"openfl.ui.Keyboard","__convertKeyCode",0x9705d864,"openfl.ui.Keyboard.__convertKeyCode","openfl/ui/Keyboard.hx",575,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_819___getCharCode,"openfl.ui.Keyboard","__getCharCode",0x5c5ae14e,"openfl.ui.Keyboard.__getCharCode","openfl/ui/Keyboard.hx",819,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_918___getKeyLocation,"openfl.ui.Keyboard","__getKeyLocation",0xfd1dd5a9,"openfl.ui.Keyboard.__getKeyLocation","openfl/ui/Keyboard.hx",918,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_27_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",27,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_32_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",32,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_37_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",37,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_42_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",42,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_47_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",47,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_52_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",52,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_57_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",57,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_62_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",62,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_67_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",67,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_72_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",72,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_77_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",77,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_82_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",82,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_87_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",87,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_92_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",92,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_97_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",97,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_102_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",102,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_107_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",107,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_112_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",112,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_117_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",117,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_122_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",122,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_127_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",127,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_132_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",132,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_137_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",137,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_142_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",142,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_147_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",147,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_152_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",152,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_157_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",157,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_162_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",162,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_167_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",167,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_172_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",172,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_177_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",177,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_182_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",182,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_187_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",187,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_192_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",192,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_197_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",197,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_202_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",202,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_208_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",208,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_214_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",214,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_220_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",220,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_226_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",226,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_232_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",232,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_238_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",238,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_244_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",244,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_250_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",250,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_256_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",256,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_262_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",262,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_268_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",268,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_274_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",274,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_280_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",280,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_286_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",286,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_292_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",292,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_298_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",298,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_303_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",303,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_308_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",308,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_313_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",313,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_318_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",318,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_323_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",323,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_328_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",328,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_333_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",333,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_338_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",338,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_343_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",343,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_348_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",348,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_353_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",353,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_358_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",358,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_363_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",363,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_368_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",368,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_373_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",373,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_378_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",378,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_383_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",383,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_389_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",389,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_394_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",394,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_400_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",400,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_405_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",405,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_410_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",410,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_412_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",412,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_417_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",417,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_423_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",423,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_428_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",428,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_433_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",433,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_438_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",438,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_443_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",443,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_448_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",448,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_453_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",453,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_458_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",458,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_463_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",463,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_468_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",468,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_473_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",473,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_478_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",478,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_483_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",483,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_485_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",485,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_490_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",490,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_495_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",495,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_500_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",500,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_505_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",505,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_510_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",510,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_515_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",515,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_520_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",520,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_525_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",525,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_530_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",530,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_535_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",535,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_540_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",540,0x5fb867bb)
namespace openfl{
namespace ui{

void Keyboard_obj::__construct() { }

Dynamic Keyboard_obj::__CreateEmpty() { return new Keyboard_obj; }

void *Keyboard_obj::_hx_vtable = 0;

Dynamic Keyboard_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Keyboard_obj > _hx_result = new Keyboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Keyboard_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2dde5f8f;
}

int Keyboard_obj::NUMBER_0;

int Keyboard_obj::NUMBER_1;

int Keyboard_obj::NUMBER_2;

int Keyboard_obj::NUMBER_3;

int Keyboard_obj::NUMBER_4;

int Keyboard_obj::NUMBER_5;

int Keyboard_obj::NUMBER_6;

int Keyboard_obj::NUMBER_7;

int Keyboard_obj::NUMBER_8;

int Keyboard_obj::NUMBER_9;

int Keyboard_obj::A;

int Keyboard_obj::B;

int Keyboard_obj::C;

int Keyboard_obj::D;

int Keyboard_obj::E;

int Keyboard_obj::F;

int Keyboard_obj::G;

int Keyboard_obj::H;

int Keyboard_obj::I;

int Keyboard_obj::J;

int Keyboard_obj::K;

int Keyboard_obj::L;

int Keyboard_obj::M;

int Keyboard_obj::N;

int Keyboard_obj::O;

int Keyboard_obj::P;

int Keyboard_obj::Q;

int Keyboard_obj::R;

int Keyboard_obj::S;

int Keyboard_obj::T;

int Keyboard_obj::U;

int Keyboard_obj::V;

int Keyboard_obj::W;

int Keyboard_obj::X;

int Keyboard_obj::Y;

int Keyboard_obj::Z;

int Keyboard_obj::NUMPAD_0;

int Keyboard_obj::NUMPAD_1;

int Keyboard_obj::NUMPAD_2;

int Keyboard_obj::NUMPAD_3;

int Keyboard_obj::NUMPAD_4;

int Keyboard_obj::NUMPAD_5;

int Keyboard_obj::NUMPAD_6;

int Keyboard_obj::NUMPAD_7;

int Keyboard_obj::NUMPAD_8;

int Keyboard_obj::NUMPAD_9;

int Keyboard_obj::NUMPAD_MULTIPLY;

int Keyboard_obj::NUMPAD_ADD;

int Keyboard_obj::NUMPAD_ENTER;

int Keyboard_obj::NUMPAD_SUBTRACT;

int Keyboard_obj::NUMPAD_DECIMAL;

int Keyboard_obj::NUMPAD_DIVIDE;

int Keyboard_obj::F1;

int Keyboard_obj::F2;

int Keyboard_obj::F3;

int Keyboard_obj::F4;

int Keyboard_obj::F5;

int Keyboard_obj::F6;

int Keyboard_obj::F7;

int Keyboard_obj::F8;

int Keyboard_obj::F9;

int Keyboard_obj::F10;

int Keyboard_obj::F11;

int Keyboard_obj::F12;

int Keyboard_obj::F13;

int Keyboard_obj::F14;

int Keyboard_obj::F15;

int Keyboard_obj::BACKSPACE;

int Keyboard_obj::TAB;

int Keyboard_obj::ALTERNATE;

int Keyboard_obj::ENTER;

int Keyboard_obj::COMMAND;

int Keyboard_obj::SHIFT;

int Keyboard_obj::CONTROL;

int Keyboard_obj::BREAK;

int Keyboard_obj::CAPS_LOCK;

int Keyboard_obj::NUMPAD;

int Keyboard_obj::ESCAPE;

int Keyboard_obj::SPACE;

int Keyboard_obj::PAGE_UP;

int Keyboard_obj::PAGE_DOWN;

int Keyboard_obj::END;

int Keyboard_obj::HOME;

int Keyboard_obj::LEFT;

int Keyboard_obj::RIGHT;

int Keyboard_obj::UP;

int Keyboard_obj::DOWN;

int Keyboard_obj::INSERT;

int Keyboard_obj::DELETE;

int Keyboard_obj::NUMLOCK;

int Keyboard_obj::SEMICOLON;

int Keyboard_obj::EQUAL;

int Keyboard_obj::COMMA;

int Keyboard_obj::MINUS;

int Keyboard_obj::PERIOD;

int Keyboard_obj::SLASH;

int Keyboard_obj::BACKQUOTE;

int Keyboard_obj::LEFTBRACKET;

int Keyboard_obj::BACKSLASH;

int Keyboard_obj::RIGHTBRACKET;

int Keyboard_obj::QUOTE;

bool Keyboard_obj::capsLock;

bool Keyboard_obj::numLock;

bool Keyboard_obj::isAccessible(){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_568_isAccessible)
HXDLIN( 568)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Keyboard_obj,isAccessible,return )

int Keyboard_obj::_hx___convertKeyCode(int key){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_575___convertKeyCode)
HXDLIN( 575)		switch((int)(key)){
            			case (int)8: {
HXLINE( 577)				return (int)8;
            			}
            			break;
            			case (int)9: {
HXLINE( 578)				return (int)9;
            			}
            			break;
            			case (int)13: {
HXLINE( 579)				return (int)13;
            			}
            			break;
            			case (int)27: {
HXLINE( 580)				return (int)27;
            			}
            			break;
            			case (int)32: {
HXLINE( 581)				return (int)32;
            			}
            			break;
            			case (int)33: {
HXLINE( 582)				return (int)49;
            			}
            			break;
            			case (int)34: {
HXLINE( 583)				return (int)222;
            			}
            			break;
            			case (int)35: {
HXLINE( 584)				return (int)51;
            			}
            			break;
            			case (int)36: {
HXLINE( 585)				return (int)52;
            			}
            			break;
            			case (int)37: {
HXLINE( 586)				return (int)53;
            			}
            			break;
            			case (int)38: {
HXLINE( 587)				return (int)55;
            			}
            			break;
            			case (int)39: {
HXLINE( 588)				return (int)222;
            			}
            			break;
            			case (int)40: {
HXLINE( 589)				return (int)57;
            			}
            			break;
            			case (int)41: {
HXLINE( 590)				return (int)48;
            			}
            			break;
            			case (int)42: {
HXLINE( 591)				return (int)56;
            			}
            			break;
            			case (int)44: {
HXLINE( 593)				return (int)188;
            			}
            			break;
            			case (int)45: {
HXLINE( 594)				return (int)189;
            			}
            			break;
            			case (int)46: {
HXLINE( 595)				return (int)190;
            			}
            			break;
            			case (int)47: {
HXLINE( 596)				return (int)191;
            			}
            			break;
            			case (int)48: {
HXLINE( 597)				return (int)48;
            			}
            			break;
            			case (int)49: {
HXLINE( 598)				return (int)49;
            			}
            			break;
            			case (int)50: {
HXLINE( 599)				return (int)50;
            			}
            			break;
            			case (int)51: {
HXLINE( 600)				return (int)51;
            			}
            			break;
            			case (int)52: {
HXLINE( 601)				return (int)52;
            			}
            			break;
            			case (int)53: {
HXLINE( 602)				return (int)53;
            			}
            			break;
            			case (int)54: {
HXLINE( 603)				return (int)54;
            			}
            			break;
            			case (int)55: {
HXLINE( 604)				return (int)55;
            			}
            			break;
            			case (int)56: {
HXLINE( 605)				return (int)56;
            			}
            			break;
            			case (int)57: {
HXLINE( 606)				return (int)57;
            			}
            			break;
            			case (int)58: {
HXLINE( 607)				return (int)186;
            			}
            			break;
            			case (int)59: {
HXLINE( 608)				return (int)186;
            			}
            			break;
            			case (int)60: {
HXLINE( 609)				return (int)60;
            			}
            			break;
            			case (int)61: {
HXLINE( 610)				return (int)187;
            			}
            			break;
            			case (int)62: {
HXLINE( 611)				return (int)190;
            			}
            			break;
            			case (int)63: {
HXLINE( 612)				return (int)191;
            			}
            			break;
            			case (int)64: {
HXLINE( 613)				return (int)50;
            			}
            			break;
            			case (int)91: {
HXLINE( 614)				return (int)219;
            			}
            			break;
            			case (int)92: {
HXLINE( 615)				return (int)220;
            			}
            			break;
            			case (int)93: {
HXLINE( 616)				return (int)221;
            			}
            			break;
            			case (int)94: {
HXLINE( 617)				return (int)54;
            			}
            			break;
            			case (int)95: {
HXLINE( 618)				return (int)189;
            			}
            			break;
            			case (int)96: {
HXLINE( 619)				return (int)192;
            			}
            			break;
            			case (int)97: {
HXLINE( 620)				return (int)65;
            			}
            			break;
            			case (int)98: {
HXLINE( 621)				return (int)66;
            			}
            			break;
            			case (int)99: {
HXLINE( 622)				return (int)67;
            			}
            			break;
            			case (int)100: {
HXLINE( 623)				return (int)68;
            			}
            			break;
            			case (int)101: {
HXLINE( 624)				return (int)69;
            			}
            			break;
            			case (int)102: {
HXLINE( 625)				return (int)70;
            			}
            			break;
            			case (int)103: {
HXLINE( 626)				return (int)71;
            			}
            			break;
            			case (int)104: {
HXLINE( 627)				return (int)72;
            			}
            			break;
            			case (int)105: {
HXLINE( 628)				return (int)73;
            			}
            			break;
            			case (int)106: {
HXLINE( 629)				return (int)74;
            			}
            			break;
            			case (int)107: {
HXLINE( 630)				return (int)75;
            			}
            			break;
            			case (int)108: {
HXLINE( 631)				return (int)76;
            			}
            			break;
            			case (int)109: {
HXLINE( 632)				return (int)77;
            			}
            			break;
            			case (int)110: {
HXLINE( 633)				return (int)78;
            			}
            			break;
            			case (int)111: {
HXLINE( 634)				return (int)79;
            			}
            			break;
            			case (int)112: {
HXLINE( 635)				return (int)80;
            			}
            			break;
            			case (int)113: {
HXLINE( 636)				return (int)81;
            			}
            			break;
            			case (int)114: {
HXLINE( 637)				return (int)82;
            			}
            			break;
            			case (int)115: {
HXLINE( 638)				return (int)83;
            			}
            			break;
            			case (int)116: {
HXLINE( 639)				return (int)84;
            			}
            			break;
            			case (int)117: {
HXLINE( 640)				return (int)85;
            			}
            			break;
            			case (int)118: {
HXLINE( 641)				return (int)86;
            			}
            			break;
            			case (int)119: {
HXLINE( 642)				return (int)87;
            			}
            			break;
            			case (int)120: {
HXLINE( 643)				return (int)88;
            			}
            			break;
            			case (int)121: {
HXLINE( 644)				return (int)89;
            			}
            			break;
            			case (int)122: {
HXLINE( 645)				return (int)90;
            			}
            			break;
            			case (int)127: {
HXLINE( 646)				return (int)46;
            			}
            			break;
            			case (int)1073741881: {
HXLINE( 647)				return (int)20;
            			}
            			break;
            			case (int)1073741882: {
HXLINE( 648)				return (int)112;
            			}
            			break;
            			case (int)1073741883: {
HXLINE( 649)				return (int)113;
            			}
            			break;
            			case (int)1073741884: {
HXLINE( 650)				return (int)114;
            			}
            			break;
            			case (int)1073741885: {
HXLINE( 651)				return (int)115;
            			}
            			break;
            			case (int)1073741886: {
HXLINE( 652)				return (int)116;
            			}
            			break;
            			case (int)1073741887: {
HXLINE( 653)				return (int)117;
            			}
            			break;
            			case (int)1073741888: {
HXLINE( 654)				return (int)118;
            			}
            			break;
            			case (int)1073741889: {
HXLINE( 655)				return (int)119;
            			}
            			break;
            			case (int)1073741890: {
HXLINE( 656)				return (int)120;
            			}
            			break;
            			case (int)1073741891: {
HXLINE( 657)				return (int)121;
            			}
            			break;
            			case (int)1073741892: {
HXLINE( 658)				return (int)122;
            			}
            			break;
            			case (int)1073741893: {
HXLINE( 659)				return (int)123;
            			}
            			break;
            			case (int)1073741894: {
HXLINE( 660)				return (int)301;
            			}
            			break;
            			case (int)1073741895: {
HXLINE( 661)				return (int)145;
            			}
            			break;
            			case (int)1073741896: {
HXLINE( 662)				return (int)19;
            			}
            			break;
            			case (int)1073741897: {
HXLINE( 663)				return (int)45;
            			}
            			break;
            			case (int)1073741898: {
HXLINE( 664)				return (int)36;
            			}
            			break;
            			case (int)1073741899: {
HXLINE( 665)				return (int)33;
            			}
            			break;
            			case (int)1073741901: {
HXLINE( 666)				return (int)35;
            			}
            			break;
            			case (int)1073741902: {
HXLINE( 667)				return (int)34;
            			}
            			break;
            			case (int)1073741903: {
HXLINE( 668)				return (int)39;
            			}
            			break;
            			case (int)1073741904: {
HXLINE( 669)				return (int)37;
            			}
            			break;
            			case (int)1073741905: {
HXLINE( 670)				return (int)40;
            			}
            			break;
            			case (int)1073741906: {
HXLINE( 671)				return (int)38;
            			}
            			break;
            			case (int)1073741907: {
HXLINE( 672)				return (int)144;
            			}
            			break;
            			case (int)1073741908: {
HXLINE( 673)				return (int)111;
            			}
            			break;
            			case (int)1073741909: {
HXLINE( 674)				return (int)106;
            			}
            			break;
            			case (int)1073741910: {
HXLINE( 675)				return (int)109;
            			}
            			break;
            			case (int)1073741911: {
HXLINE( 676)				return (int)107;
            			}
            			break;
            			case (int)1073741912: {
HXLINE( 677)				return (int)13;
            			}
            			break;
            			case (int)1073741913: {
HXLINE( 678)				return (int)97;
            			}
            			break;
            			case (int)1073741914: {
HXLINE( 679)				return (int)98;
            			}
            			break;
            			case (int)1073741915: {
HXLINE( 680)				return (int)99;
            			}
            			break;
            			case (int)1073741916: {
HXLINE( 681)				return (int)100;
            			}
            			break;
            			case (int)1073741917: {
HXLINE( 682)				return (int)101;
            			}
            			break;
            			case (int)1073741918: {
HXLINE( 683)				return (int)102;
            			}
            			break;
            			case (int)1073741919: {
HXLINE( 684)				return (int)103;
            			}
            			break;
            			case (int)1073741920: {
HXLINE( 685)				return (int)104;
            			}
            			break;
            			case (int)1073741921: {
HXLINE( 686)				return (int)105;
            			}
            			break;
            			case (int)1073741922: {
HXLINE( 687)				return (int)96;
            			}
            			break;
            			case (int)1073741923: {
HXLINE( 688)				return (int)110;
            			}
            			break;
            			case (int)1073741925: {
HXLINE( 689)				return (int)302;
            			}
            			break;
            			case (int)1073741928: {
HXLINE( 692)				return (int)124;
            			}
            			break;
            			case (int)1073741929: {
HXLINE( 693)				return (int)125;
            			}
            			break;
            			case (int)1073741930: {
HXLINE( 694)				return (int)126;
            			}
            			break;
            			case (int)1073741982: {
HXLINE( 725)				return (int)13;
            			}
            			break;
            			case (int)1073742044: {
HXLINE( 776)				return (int)110;
            			}
            			break;
            			case (int)1073742048: {
HXLINE( 778)				return (int)17;
            			}
            			break;
            			case (int)1073742049: {
HXLINE( 779)				return (int)16;
            			}
            			break;
            			case (int)1073742050: {
HXLINE( 780)				return (int)18;
            			}
            			break;
            			case (int)1073742051: {
HXLINE( 781)				return (int)15;
            			}
            			break;
            			case (int)1073742052: {
HXLINE( 782)				return (int)17;
            			}
            			break;
            			case (int)1073742053: {
HXLINE( 783)				return (int)16;
            			}
            			break;
            			case (int)1073742054: {
HXLINE( 784)				return (int)18;
            			}
            			break;
            			case (int)1073742055: {
HXLINE( 785)				return (int)15;
            			}
            			break;
            			default:{
HXLINE( 812)				return key;
            			}
            		}
HXLINE( 575)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,_hx___convertKeyCode,return )

int Keyboard_obj::_hx___getCharCode(int key,hx::Null< bool >  __o_shift){
bool shift = __o_shift.Default(false);
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_819___getCharCode)
HXLINE( 821)		if (!(shift)) {
HXLINE( 823)			switch((int)(key)){
            				case (int)8: {
HXLINE( 825)					return (int)8;
            				}
            				break;
            				case (int)9: {
HXLINE( 826)					return (int)9;
            				}
            				break;
            				case (int)13: {
HXLINE( 827)					return (int)13;
            				}
            				break;
            				case (int)27: {
HXLINE( 828)					return (int)27;
            				}
            				break;
            				case (int)32: {
HXLINE( 829)					return (int)32;
            				}
            				break;
            				case (int)186: {
HXLINE( 830)					return (int)59;
            				}
            				break;
            				case (int)187: {
HXLINE( 831)					return (int)61;
            				}
            				break;
            				case (int)188: {
HXLINE( 832)					return (int)44;
            				}
            				break;
            				case (int)189: {
HXLINE( 833)					return (int)45;
            				}
            				break;
            				case (int)190: {
HXLINE( 834)					return (int)46;
            				}
            				break;
            				case (int)191: {
HXLINE( 835)					return (int)47;
            				}
            				break;
            				case (int)192: {
HXLINE( 836)					return (int)96;
            				}
            				break;
            				case (int)219: {
HXLINE( 837)					return (int)91;
            				}
            				break;
            				case (int)220: {
HXLINE( 838)					return (int)92;
            				}
            				break;
            				case (int)221: {
HXLINE( 839)					return (int)93;
            				}
            				break;
            				case (int)222: {
HXLINE( 840)					return (int)39;
            				}
            				break;
            			}
HXLINE( 844)			bool _hx_tmp;
HXDLIN( 844)			if ((key >= (int)48)) {
HXLINE( 844)				_hx_tmp = (key <= (int)57);
            			}
            			else {
HXLINE( 844)				_hx_tmp = false;
            			}
HXDLIN( 844)			if (_hx_tmp) {
HXLINE( 846)				return ((key - (int)48) + (int)48);
            			}
HXLINE( 850)			bool _hx_tmp1;
HXDLIN( 850)			if ((key >= (int)65)) {
HXLINE( 850)				_hx_tmp1 = (key <= (int)90);
            			}
            			else {
HXLINE( 850)				_hx_tmp1 = false;
            			}
HXDLIN( 850)			if (_hx_tmp1) {
HXLINE( 852)				return ((key - (int)65) + (int)97);
            			}
            		}
            		else {
HXLINE( 858)			switch((int)(key)){
            				case (int)48: {
HXLINE( 860)					return (int)41;
            				}
            				break;
            				case (int)49: {
HXLINE( 861)					return (int)33;
            				}
            				break;
            				case (int)50: {
HXLINE( 862)					return (int)64;
            				}
            				break;
            				case (int)51: {
HXLINE( 863)					return (int)35;
            				}
            				break;
            				case (int)52: {
HXLINE( 864)					return (int)36;
            				}
            				break;
            				case (int)53: {
HXLINE( 865)					return (int)37;
            				}
            				break;
            				case (int)54: {
HXLINE( 866)					return (int)94;
            				}
            				break;
            				case (int)55: {
HXLINE( 867)					return (int)38;
            				}
            				break;
            				case (int)56: {
HXLINE( 868)					return (int)42;
            				}
            				break;
            				case (int)57: {
HXLINE( 869)					return (int)40;
            				}
            				break;
            				case (int)186: {
HXLINE( 870)					return (int)58;
            				}
            				break;
            				case (int)187: {
HXLINE( 871)					return (int)43;
            				}
            				break;
            				case (int)188: {
HXLINE( 872)					return (int)60;
            				}
            				break;
            				case (int)189: {
HXLINE( 873)					return (int)95;
            				}
            				break;
            				case (int)190: {
HXLINE( 874)					return (int)62;
            				}
            				break;
            				case (int)191: {
HXLINE( 875)					return (int)63;
            				}
            				break;
            				case (int)192: {
HXLINE( 876)					return (int)126;
            				}
            				break;
            				case (int)219: {
HXLINE( 877)					return (int)123;
            				}
            				break;
            				case (int)220: {
HXLINE( 878)					return (int)124;
            				}
            				break;
            				case (int)221: {
HXLINE( 879)					return (int)125;
            				}
            				break;
            				case (int)222: {
HXLINE( 880)					return (int)34;
            				}
            				break;
            			}
HXLINE( 884)			bool _hx_tmp2;
HXDLIN( 884)			if ((key >= (int)65)) {
HXLINE( 884)				_hx_tmp2 = (key <= (int)90);
            			}
            			else {
HXLINE( 884)				_hx_tmp2 = false;
            			}
HXDLIN( 884)			if (_hx_tmp2) {
HXLINE( 886)				return ((key - (int)65) + (int)65);
            			}
            		}
HXLINE( 892)		bool _hx_tmp3;
HXDLIN( 892)		if ((key >= (int)96)) {
HXLINE( 892)			_hx_tmp3 = (key <= (int)105);
            		}
            		else {
HXLINE( 892)			_hx_tmp3 = false;
            		}
HXDLIN( 892)		if (_hx_tmp3) {
HXLINE( 894)			return ((key - (int)96) + (int)48);
            		}
HXLINE( 898)		switch((int)(key)){
            			case (int)8: {
HXLINE( 907)				return (int)8;
            			}
            			break;
            			case (int)13: {
HXLINE( 906)				return (int)13;
            			}
            			break;
            			case (int)46: {
HXLINE( 905)				return (int)127;
            			}
            			break;
            			case (int)106: {
HXLINE( 900)				return (int)42;
            			}
            			break;
            			case (int)107: {
HXLINE( 901)				return (int)43;
            			}
            			break;
            			case (int)108: {
HXLINE( 902)				return (int)44;
            			}
            			break;
            			case (int)110: {
HXLINE( 903)				return (int)45;
            			}
            			break;
            			case (int)111: {
HXLINE( 904)				return (int)46;
            			}
            			break;
            		}
HXLINE( 911)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Keyboard_obj,_hx___getCharCode,return )

int Keyboard_obj::_hx___getKeyLocation(int key){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_918___getKeyLocation)
HXDLIN( 918)		switch((int)(key)){
            			case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE( 925)				return (int)3;
            			}
            			break;
            			case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE( 920)				return (int)1;
            			}
            			break;
            			case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE( 921)				return (int)2;
            			}
            			break;
            			default:{
HXLINE( 926)				return (int)0;
            			}
            		}
HXLINE( 918)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,_hx___getKeyLocation,return )


Keyboard_obj::Keyboard_obj()
{
}

bool Keyboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"numLock") ) { outValue = ( numLock ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capsLock") ) { outValue = ( capsLock ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isAccessible") ) { outValue = isAccessible_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__getCharCode") ) { outValue = _hx___getCharCode_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__convertKeyCode") ) { outValue = _hx___convertKeyCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getKeyLocation") ) { outValue = _hx___getKeyLocation_dyn(); return true; }
	}
	return false;
}

bool Keyboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"numLock") ) { numLock=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capsLock") ) { capsLock=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Keyboard_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Keyboard_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_0,HX_HCSTRING("NUMBER_0","\xfa","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_1,HX_HCSTRING("NUMBER_1","\xfb","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_2,HX_HCSTRING("NUMBER_2","\xfc","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_3,HX_HCSTRING("NUMBER_3","\xfd","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_4,HX_HCSTRING("NUMBER_4","\xfe","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_5,HX_HCSTRING("NUMBER_5","\xff","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_6,HX_HCSTRING("NUMBER_6","\x00","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_7,HX_HCSTRING("NUMBER_7","\x01","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_8,HX_HCSTRING("NUMBER_8","\x02","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_9,HX_HCSTRING("NUMBER_9","\x03","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::A,HX_HCSTRING("A","\x41","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::B,HX_HCSTRING("B","\x42","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::C,HX_HCSTRING("C","\x43","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::D,HX_HCSTRING("D","\x44","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::E,HX_HCSTRING("E","\x45","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F,HX_HCSTRING("F","\x46","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::G,HX_HCSTRING("G","\x47","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::H,HX_HCSTRING("H","\x48","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::I,HX_HCSTRING("I","\x49","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::J,HX_HCSTRING("J","\x4a","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::K,HX_HCSTRING("K","\x4b","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::L,HX_HCSTRING("L","\x4c","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::M,HX_HCSTRING("M","\x4d","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::N,HX_HCSTRING("N","\x4e","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::O,HX_HCSTRING("O","\x4f","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::P,HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::Q,HX_HCSTRING("Q","\x51","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::R,HX_HCSTRING("R","\x52","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::S,HX_HCSTRING("S","\x53","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::T,HX_HCSTRING("T","\x54","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::U,HX_HCSTRING("U","\x55","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::V,HX_HCSTRING("V","\x56","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::W,HX_HCSTRING("W","\x57","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::X,HX_HCSTRING("X","\x58","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::Y,HX_HCSTRING("Y","\x59","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::Z,HX_HCSTRING("Z","\x5a","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_0,HX_HCSTRING("NUMPAD_0","\xfe","\x2e","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_1,HX_HCSTRING("NUMPAD_1","\xff","\x2e","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_2,HX_HCSTRING("NUMPAD_2","\x00","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_3,HX_HCSTRING("NUMPAD_3","\x01","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_4,HX_HCSTRING("NUMPAD_4","\x02","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_5,HX_HCSTRING("NUMPAD_5","\x03","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_6,HX_HCSTRING("NUMPAD_6","\x04","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_7,HX_HCSTRING("NUMPAD_7","\x05","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_8,HX_HCSTRING("NUMPAD_8","\x06","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_9,HX_HCSTRING("NUMPAD_9","\x07","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_MULTIPLY,HX_HCSTRING("NUMPAD_MULTIPLY","\x16","\xd9","\xd8","\x96")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_ADD,HX_HCSTRING("NUMPAD_ADD","\x4f","\x8c","\x28","\x37")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_ENTER,HX_HCSTRING("NUMPAD_ENTER","\xc6","\x52","\xe2","\x0f")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_SUBTRACT,HX_HCSTRING("NUMPAD_SUBTRACT","\x06","\x6c","\x5d","\xf4")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_DECIMAL,HX_HCSTRING("NUMPAD_DECIMAL","\xbf","\xc5","\x36","\x01")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_DIVIDE,HX_HCSTRING("NUMPAD_DIVIDE","\xeb","\x41","\x1f","\x90")},
	{hx::fsInt,(void *) &Keyboard_obj::F1,HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F2,HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F3,HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F4,HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F5,HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F6,HX_HCSTRING("F6","\x30","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F7,HX_HCSTRING("F7","\x31","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F8,HX_HCSTRING("F8","\x32","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F9,HX_HCSTRING("F9","\x33","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F10,HX_HCSTRING("F10","\xa5","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F11,HX_HCSTRING("F11","\xa6","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F12,HX_HCSTRING("F12","\xa7","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F13,HX_HCSTRING("F13","\xa8","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F14,HX_HCSTRING("F14","\xa9","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F15,HX_HCSTRING("F15","\xaa","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::BACKSPACE,HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6")},
	{hx::fsInt,(void *) &Keyboard_obj::TAB,HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::ALTERNATE,HX_HCSTRING("ALTERNATE","\x1a","\x39","\x8c","\x30")},
	{hx::fsInt,(void *) &Keyboard_obj::ENTER,HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee")},
	{hx::fsInt,(void *) &Keyboard_obj::COMMAND,HX_HCSTRING("COMMAND","\x2b","\x45","\x41","\x01")},
	{hx::fsInt,(void *) &Keyboard_obj::SHIFT,HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa")},
	{hx::fsInt,(void *) &Keyboard_obj::CONTROL,HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99")},
	{hx::fsInt,(void *) &Keyboard_obj::BREAK,HX_HCSTRING("BREAK","\x9f","\x5c","\xda","\x36")},
	{hx::fsInt,(void *) &Keyboard_obj::CAPS_LOCK,HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD,HX_HCSTRING("NUMPAD","\xcd","\xce","\x07","\x54")},
	{hx::fsInt,(void *) &Keyboard_obj::ESCAPE,HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d")},
	{hx::fsInt,(void *) &Keyboard_obj::SPACE,HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff")},
	{hx::fsInt,(void *) &Keyboard_obj::PAGE_UP,HX_HCSTRING("PAGE_UP","\x8b","\xd9","\x3e","\x0b")},
	{hx::fsInt,(void *) &Keyboard_obj::PAGE_DOWN,HX_HCSTRING("PAGE_DOWN","\x92","\x7b","\x93","\x70")},
	{hx::fsInt,(void *) &Keyboard_obj::END,HX_HCSTRING("END","\xbb","\x9f","\x34","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::HOME,HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f")},
	{hx::fsInt,(void *) &Keyboard_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &Keyboard_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &Keyboard_obj::UP,HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::DOWN,HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d")},
	{hx::fsInt,(void *) &Keyboard_obj::INSERT,HX_HCSTRING("INSERT","\x39","\xef","\x5f","\x50")},
	{hx::fsInt,(void *) &Keyboard_obj::DELETE,HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMLOCK,HX_HCSTRING("NUMLOCK","\x11","\xe9","\x32","\x30")},
	{hx::fsInt,(void *) &Keyboard_obj::SEMICOLON,HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49")},
	{hx::fsInt,(void *) &Keyboard_obj::EQUAL,HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0")},
	{hx::fsInt,(void *) &Keyboard_obj::COMMA,HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8")},
	{hx::fsInt,(void *) &Keyboard_obj::MINUS,HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86")},
	{hx::fsInt,(void *) &Keyboard_obj::PERIOD,HX_HCSTRING("PERIOD","\x01","\x0d","\x9e","\xed")},
	{hx::fsInt,(void *) &Keyboard_obj::SLASH,HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc")},
	{hx::fsInt,(void *) &Keyboard_obj::BACKQUOTE,HX_HCSTRING("BACKQUOTE","\x95","\x8b","\xce","\xa2")},
	{hx::fsInt,(void *) &Keyboard_obj::LEFTBRACKET,HX_HCSTRING("LEFTBRACKET","\xe1","\xa8","\x04","\xa4")},
	{hx::fsInt,(void *) &Keyboard_obj::BACKSLASH,HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3")},
	{hx::fsInt,(void *) &Keyboard_obj::RIGHTBRACKET,HX_HCSTRING("RIGHTBRACKET","\xcc","\x45","\x32","\x57")},
	{hx::fsInt,(void *) &Keyboard_obj::QUOTE,HX_HCSTRING("QUOTE","\x1c","\x5b","\xe0","\xdb")},
	{hx::fsBool,(void *) &Keyboard_obj::capsLock,HX_HCSTRING("capsLock","\xac","\x08","\xc2","\x11")},
	{hx::fsBool,(void *) &Keyboard_obj::numLock,HX_HCSTRING("numLock","\x51","\x41","\x38","\x9b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Keyboard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Keyboard_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_0,"NUMBER_0");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_1,"NUMBER_1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_2,"NUMBER_2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_3,"NUMBER_3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_4,"NUMBER_4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_5,"NUMBER_5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_6,"NUMBER_6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_7,"NUMBER_7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_8,"NUMBER_8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_9,"NUMBER_9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::A,"A");
	HX_MARK_MEMBER_NAME(Keyboard_obj::B,"B");
	HX_MARK_MEMBER_NAME(Keyboard_obj::C,"C");
	HX_MARK_MEMBER_NAME(Keyboard_obj::D,"D");
	HX_MARK_MEMBER_NAME(Keyboard_obj::E,"E");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F,"F");
	HX_MARK_MEMBER_NAME(Keyboard_obj::G,"G");
	HX_MARK_MEMBER_NAME(Keyboard_obj::H,"H");
	HX_MARK_MEMBER_NAME(Keyboard_obj::I,"I");
	HX_MARK_MEMBER_NAME(Keyboard_obj::J,"J");
	HX_MARK_MEMBER_NAME(Keyboard_obj::K,"K");
	HX_MARK_MEMBER_NAME(Keyboard_obj::L,"L");
	HX_MARK_MEMBER_NAME(Keyboard_obj::M,"M");
	HX_MARK_MEMBER_NAME(Keyboard_obj::N,"N");
	HX_MARK_MEMBER_NAME(Keyboard_obj::O,"O");
	HX_MARK_MEMBER_NAME(Keyboard_obj::P,"P");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Q,"Q");
	HX_MARK_MEMBER_NAME(Keyboard_obj::R,"R");
	HX_MARK_MEMBER_NAME(Keyboard_obj::S,"S");
	HX_MARK_MEMBER_NAME(Keyboard_obj::T,"T");
	HX_MARK_MEMBER_NAME(Keyboard_obj::U,"U");
	HX_MARK_MEMBER_NAME(Keyboard_obj::V,"V");
	HX_MARK_MEMBER_NAME(Keyboard_obj::W,"W");
	HX_MARK_MEMBER_NAME(Keyboard_obj::X,"X");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Y,"Y");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Z,"Z");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_0,"NUMPAD_0");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_1,"NUMPAD_1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_2,"NUMPAD_2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_3,"NUMPAD_3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_4,"NUMPAD_4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_5,"NUMPAD_5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_6,"NUMPAD_6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_7,"NUMPAD_7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_8,"NUMPAD_8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_9,"NUMPAD_9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F1,"F1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F2,"F2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F3,"F3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F4,"F4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F5,"F5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F6,"F6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F7,"F7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F8,"F8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F9,"F9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F10,"F10");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F11,"F11");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F12,"F12");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F13,"F13");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F14,"F14");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F15,"F15");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ALTERNATE,"ALTERNATE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ENTER,"ENTER");
	HX_MARK_MEMBER_NAME(Keyboard_obj::COMMAND,"COMMAND");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::CONTROL,"CONTROL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BREAK,"BREAK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD,"NUMPAD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ESCAPE,"ESCAPE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PAGE_UP,"PAGE_UP");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_MARK_MEMBER_NAME(Keyboard_obj::END,"END");
	HX_MARK_MEMBER_NAME(Keyboard_obj::HOME,"HOME");
	HX_MARK_MEMBER_NAME(Keyboard_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(Keyboard_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(Keyboard_obj::INSERT,"INSERT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::DELETE,"DELETE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMLOCK,"NUMLOCK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SEMICOLON,"SEMICOLON");
	HX_MARK_MEMBER_NAME(Keyboard_obj::EQUAL,"EQUAL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::COMMA,"COMMA");
	HX_MARK_MEMBER_NAME(Keyboard_obj::MINUS,"MINUS");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PERIOD,"PERIOD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SLASH,"SLASH");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKQUOTE,"BACKQUOTE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::LEFTBRACKET,"LEFTBRACKET");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKSLASH,"BACKSLASH");
	HX_MARK_MEMBER_NAME(Keyboard_obj::RIGHTBRACKET,"RIGHTBRACKET");
	HX_MARK_MEMBER_NAME(Keyboard_obj::QUOTE,"QUOTE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::capsLock,"capsLock");
	HX_MARK_MEMBER_NAME(Keyboard_obj::numLock,"numLock");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Keyboard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Keyboard_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_0,"NUMBER_0");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_1,"NUMBER_1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_2,"NUMBER_2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_3,"NUMBER_3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_4,"NUMBER_4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_5,"NUMBER_5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_6,"NUMBER_6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_7,"NUMBER_7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_8,"NUMBER_8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_9,"NUMBER_9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::A,"A");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::B,"B");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::C,"C");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::D,"D");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F,"F");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::G,"G");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::H,"H");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::I,"I");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::J,"J");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::K,"K");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::L,"L");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::M,"M");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::N,"N");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::O,"O");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::P,"P");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Q,"Q");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::R,"R");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::S,"S");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::T,"T");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::U,"U");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::V,"V");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::W,"W");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::X,"X");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Y,"Y");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Z,"Z");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_0,"NUMPAD_0");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_1,"NUMPAD_1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_2,"NUMPAD_2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_3,"NUMPAD_3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_4,"NUMPAD_4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_5,"NUMPAD_5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_6,"NUMPAD_6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_7,"NUMPAD_7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_8,"NUMPAD_8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_9,"NUMPAD_9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F1,"F1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F2,"F2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F3,"F3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F4,"F4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F5,"F5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F6,"F6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F7,"F7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F8,"F8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F9,"F9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F10,"F10");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F11,"F11");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F12,"F12");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F13,"F13");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F14,"F14");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F15,"F15");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ALTERNATE,"ALTERNATE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ENTER,"ENTER");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::COMMAND,"COMMAND");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::CONTROL,"CONTROL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BREAK,"BREAK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD,"NUMPAD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ESCAPE,"ESCAPE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PAGE_UP,"PAGE_UP");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::END,"END");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::HOME,"HOME");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::INSERT,"INSERT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::DELETE,"DELETE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMLOCK,"NUMLOCK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SEMICOLON,"SEMICOLON");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::EQUAL,"EQUAL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::COMMA,"COMMA");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::MINUS,"MINUS");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PERIOD,"PERIOD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SLASH,"SLASH");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKQUOTE,"BACKQUOTE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::LEFTBRACKET,"LEFTBRACKET");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKSLASH,"BACKSLASH");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::RIGHTBRACKET,"RIGHTBRACKET");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::QUOTE,"QUOTE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::capsLock,"capsLock");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::numLock,"numLock");
};

#endif

hx::Class Keyboard_obj::__mClass;

static ::String Keyboard_obj_sStaticFields[] = {
	HX_HCSTRING("NUMBER_0","\xfa","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_1","\xfb","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_2","\xfc","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_3","\xfd","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_4","\xfe","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_5","\xff","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_6","\x00","\x8a","\xc6","\x33"),
	HX_HCSTRING("NUMBER_7","\x01","\x8a","\xc6","\x33"),
	HX_HCSTRING("NUMBER_8","\x02","\x8a","\xc6","\x33"),
	HX_HCSTRING("NUMBER_9","\x03","\x8a","\xc6","\x33"),
	HX_HCSTRING("A","\x41","\x00","\x00","\x00"),
	HX_HCSTRING("B","\x42","\x00","\x00","\x00"),
	HX_HCSTRING("C","\x43","\x00","\x00","\x00"),
	HX_HCSTRING("D","\x44","\x00","\x00","\x00"),
	HX_HCSTRING("E","\x45","\x00","\x00","\x00"),
	HX_HCSTRING("F","\x46","\x00","\x00","\x00"),
	HX_HCSTRING("G","\x47","\x00","\x00","\x00"),
	HX_HCSTRING("H","\x48","\x00","\x00","\x00"),
	HX_HCSTRING("I","\x49","\x00","\x00","\x00"),
	HX_HCSTRING("J","\x4a","\x00","\x00","\x00"),
	HX_HCSTRING("K","\x4b","\x00","\x00","\x00"),
	HX_HCSTRING("L","\x4c","\x00","\x00","\x00"),
	HX_HCSTRING("M","\x4d","\x00","\x00","\x00"),
	HX_HCSTRING("N","\x4e","\x00","\x00","\x00"),
	HX_HCSTRING("O","\x4f","\x00","\x00","\x00"),
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	HX_HCSTRING("Q","\x51","\x00","\x00","\x00"),
	HX_HCSTRING("R","\x52","\x00","\x00","\x00"),
	HX_HCSTRING("S","\x53","\x00","\x00","\x00"),
	HX_HCSTRING("T","\x54","\x00","\x00","\x00"),
	HX_HCSTRING("U","\x55","\x00","\x00","\x00"),
	HX_HCSTRING("V","\x56","\x00","\x00","\x00"),
	HX_HCSTRING("W","\x57","\x00","\x00","\x00"),
	HX_HCSTRING("X","\x58","\x00","\x00","\x00"),
	HX_HCSTRING("Y","\x59","\x00","\x00","\x00"),
	HX_HCSTRING("Z","\x5a","\x00","\x00","\x00"),
	HX_HCSTRING("NUMPAD_0","\xfe","\x2e","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_1","\xff","\x2e","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_2","\x00","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_3","\x01","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_4","\x02","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_5","\x03","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_6","\x04","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_7","\x05","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_8","\x06","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_9","\x07","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_MULTIPLY","\x16","\xd9","\xd8","\x96"),
	HX_HCSTRING("NUMPAD_ADD","\x4f","\x8c","\x28","\x37"),
	HX_HCSTRING("NUMPAD_ENTER","\xc6","\x52","\xe2","\x0f"),
	HX_HCSTRING("NUMPAD_SUBTRACT","\x06","\x6c","\x5d","\xf4"),
	HX_HCSTRING("NUMPAD_DECIMAL","\xbf","\xc5","\x36","\x01"),
	HX_HCSTRING("NUMPAD_DIVIDE","\xeb","\x41","\x1f","\x90"),
	HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00"),
	HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00"),
	HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00"),
	HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00"),
	HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00"),
	HX_HCSTRING("F6","\x30","\x3d","\x00","\x00"),
	HX_HCSTRING("F7","\x31","\x3d","\x00","\x00"),
	HX_HCSTRING("F8","\x32","\x3d","\x00","\x00"),
	HX_HCSTRING("F9","\x33","\x3d","\x00","\x00"),
	HX_HCSTRING("F10","\xa5","\x48","\x35","\x00"),
	HX_HCSTRING("F11","\xa6","\x48","\x35","\x00"),
	HX_HCSTRING("F12","\xa7","\x48","\x35","\x00"),
	HX_HCSTRING("F13","\xa8","\x48","\x35","\x00"),
	HX_HCSTRING("F14","\xa9","\x48","\x35","\x00"),
	HX_HCSTRING("F15","\xaa","\x48","\x35","\x00"),
	HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6"),
	HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00"),
	HX_HCSTRING("ALTERNATE","\x1a","\x39","\x8c","\x30"),
	HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee"),
	HX_HCSTRING("COMMAND","\x2b","\x45","\x41","\x01"),
	HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa"),
	HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99"),
	HX_HCSTRING("BREAK","\x9f","\x5c","\xda","\x36"),
	HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce"),
	HX_HCSTRING("NUMPAD","\xcd","\xce","\x07","\x54"),
	HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d"),
	HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff"),
	HX_HCSTRING("PAGE_UP","\x8b","\xd9","\x3e","\x0b"),
	HX_HCSTRING("PAGE_DOWN","\x92","\x7b","\x93","\x70"),
	HX_HCSTRING("END","\xbb","\x9f","\x34","\x00"),
	HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),
	HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),
	HX_HCSTRING("INSERT","\x39","\xef","\x5f","\x50"),
	HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d"),
	HX_HCSTRING("NUMLOCK","\x11","\xe9","\x32","\x30"),
	HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49"),
	HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0"),
	HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8"),
	HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86"),
	HX_HCSTRING("PERIOD","\x01","\x0d","\x9e","\xed"),
	HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc"),
	HX_HCSTRING("BACKQUOTE","\x95","\x8b","\xce","\xa2"),
	HX_HCSTRING("LEFTBRACKET","\xe1","\xa8","\x04","\xa4"),
	HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3"),
	HX_HCSTRING("RIGHTBRACKET","\xcc","\x45","\x32","\x57"),
	HX_HCSTRING("QUOTE","\x1c","\x5b","\xe0","\xdb"),
	HX_HCSTRING("capsLock","\xac","\x08","\xc2","\x11"),
	HX_HCSTRING("numLock","\x51","\x41","\x38","\x9b"),
	HX_HCSTRING("isAccessible","\xc0","\x82","\xfd","\x3f"),
	HX_HCSTRING("__convertKeyCode","\xd9","\xcb","\x30","\x83"),
	HX_HCSTRING("__getCharCode","\xb9","\x62","\x90","\x0a"),
	HX_HCSTRING("__getKeyLocation","\x1e","\xc9","\x48","\xe9"),
	::String(null())
};

void Keyboard_obj::__register()
{
	hx::Object *dummy = new Keyboard_obj;
	Keyboard_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.ui.Keyboard","\x43","\xb4","\x37","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Keyboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Keyboard_obj::__SetStatic;
	__mClass->mMarkFunc = Keyboard_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Keyboard_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Keyboard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Keyboard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Keyboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Keyboard_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Keyboard_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_27_boot)
HXDLIN(  27)		NUMBER_0 = (int)48;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_32_boot)
HXDLIN(  32)		NUMBER_1 = (int)49;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_37_boot)
HXDLIN(  37)		NUMBER_2 = (int)50;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_42_boot)
HXDLIN(  42)		NUMBER_3 = (int)51;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_47_boot)
HXDLIN(  47)		NUMBER_4 = (int)52;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_52_boot)
HXDLIN(  52)		NUMBER_5 = (int)53;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_57_boot)
HXDLIN(  57)		NUMBER_6 = (int)54;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_62_boot)
HXDLIN(  62)		NUMBER_7 = (int)55;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_67_boot)
HXDLIN(  67)		NUMBER_8 = (int)56;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_72_boot)
HXDLIN(  72)		NUMBER_9 = (int)57;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_77_boot)
HXDLIN(  77)		A = (int)65;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_82_boot)
HXDLIN(  82)		B = (int)66;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_87_boot)
HXDLIN(  87)		C = (int)67;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_92_boot)
HXDLIN(  92)		D = (int)68;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_97_boot)
HXDLIN(  97)		E = (int)69;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_102_boot)
HXDLIN( 102)		F = (int)70;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_107_boot)
HXDLIN( 107)		G = (int)71;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_112_boot)
HXDLIN( 112)		H = (int)72;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_117_boot)
HXDLIN( 117)		I = (int)73;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_122_boot)
HXDLIN( 122)		J = (int)74;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_127_boot)
HXDLIN( 127)		K = (int)75;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_132_boot)
HXDLIN( 132)		L = (int)76;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_137_boot)
HXDLIN( 137)		M = (int)77;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_142_boot)
HXDLIN( 142)		N = (int)78;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_147_boot)
HXDLIN( 147)		O = (int)79;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_152_boot)
HXDLIN( 152)		P = (int)80;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_157_boot)
HXDLIN( 157)		Q = (int)81;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_162_boot)
HXDLIN( 162)		R = (int)82;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_167_boot)
HXDLIN( 167)		S = (int)83;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_172_boot)
HXDLIN( 172)		T = (int)84;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_177_boot)
HXDLIN( 177)		U = (int)85;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_182_boot)
HXDLIN( 182)		V = (int)86;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_187_boot)
HXDLIN( 187)		W = (int)87;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_192_boot)
HXDLIN( 192)		X = (int)88;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_197_boot)
HXDLIN( 197)		Y = (int)89;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_202_boot)
HXDLIN( 202)		Z = (int)90;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_208_boot)
HXDLIN( 208)		NUMPAD_0 = (int)96;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_214_boot)
HXDLIN( 214)		NUMPAD_1 = (int)97;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_220_boot)
HXDLIN( 220)		NUMPAD_2 = (int)98;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_226_boot)
HXDLIN( 226)		NUMPAD_3 = (int)99;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_232_boot)
HXDLIN( 232)		NUMPAD_4 = (int)100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_238_boot)
HXDLIN( 238)		NUMPAD_5 = (int)101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_244_boot)
HXDLIN( 244)		NUMPAD_6 = (int)102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_250_boot)
HXDLIN( 250)		NUMPAD_7 = (int)103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_256_boot)
HXDLIN( 256)		NUMPAD_8 = (int)104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_262_boot)
HXDLIN( 262)		NUMPAD_9 = (int)105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_268_boot)
HXDLIN( 268)		NUMPAD_MULTIPLY = (int)106;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_274_boot)
HXDLIN( 274)		NUMPAD_ADD = (int)107;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_280_boot)
HXDLIN( 280)		NUMPAD_ENTER = (int)108;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_286_boot)
HXDLIN( 286)		NUMPAD_SUBTRACT = (int)109;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_292_boot)
HXDLIN( 292)		NUMPAD_DECIMAL = (int)110;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_298_boot)
HXDLIN( 298)		NUMPAD_DIVIDE = (int)111;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_303_boot)
HXDLIN( 303)		F1 = (int)112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_308_boot)
HXDLIN( 308)		F2 = (int)113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_313_boot)
HXDLIN( 313)		F3 = (int)114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_318_boot)
HXDLIN( 318)		F4 = (int)115;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_323_boot)
HXDLIN( 323)		F5 = (int)116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_328_boot)
HXDLIN( 328)		F6 = (int)117;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_333_boot)
HXDLIN( 333)		F7 = (int)118;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_338_boot)
HXDLIN( 338)		F8 = (int)119;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_343_boot)
HXDLIN( 343)		F9 = (int)120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_348_boot)
HXDLIN( 348)		F10 = (int)121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_353_boot)
HXDLIN( 353)		F11 = (int)122;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_358_boot)
HXDLIN( 358)		F12 = (int)123;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_363_boot)
HXDLIN( 363)		F13 = (int)124;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_368_boot)
HXDLIN( 368)		F14 = (int)125;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_373_boot)
HXDLIN( 373)		F15 = (int)126;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_378_boot)
HXDLIN( 378)		BACKSPACE = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_383_boot)
HXDLIN( 383)		TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_389_boot)
HXDLIN( 389)		ALTERNATE = (int)18;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_394_boot)
HXDLIN( 394)		ENTER = (int)13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_400_boot)
HXDLIN( 400)		COMMAND = (int)15;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_405_boot)
HXDLIN( 405)		SHIFT = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_410_boot)
HXDLIN( 410)		CONTROL = (int)17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_412_boot)
HXDLIN( 412)		BREAK = (int)19;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_417_boot)
HXDLIN( 417)		CAPS_LOCK = (int)20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_423_boot)
HXDLIN( 423)		NUMPAD = (int)21;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_428_boot)
HXDLIN( 428)		ESCAPE = (int)27;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_433_boot)
HXDLIN( 433)		SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_438_boot)
HXDLIN( 438)		PAGE_UP = (int)33;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_443_boot)
HXDLIN( 443)		PAGE_DOWN = (int)34;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_448_boot)
HXDLIN( 448)		END = (int)35;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_453_boot)
HXDLIN( 453)		HOME = (int)36;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_458_boot)
HXDLIN( 458)		LEFT = (int)37;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_463_boot)
HXDLIN( 463)		RIGHT = (int)39;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_468_boot)
HXDLIN( 468)		UP = (int)38;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_473_boot)
HXDLIN( 473)		DOWN = (int)40;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_478_boot)
HXDLIN( 478)		INSERT = (int)45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_483_boot)
HXDLIN( 483)		DELETE = (int)46;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_485_boot)
HXDLIN( 485)		NUMLOCK = (int)144;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_490_boot)
HXDLIN( 490)		SEMICOLON = (int)186;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_495_boot)
HXDLIN( 495)		EQUAL = (int)187;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_500_boot)
HXDLIN( 500)		COMMA = (int)188;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_505_boot)
HXDLIN( 505)		MINUS = (int)189;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_510_boot)
HXDLIN( 510)		PERIOD = (int)190;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_515_boot)
HXDLIN( 515)		SLASH = (int)191;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_520_boot)
HXDLIN( 520)		BACKQUOTE = (int)192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_525_boot)
HXDLIN( 525)		LEFTBRACKET = (int)219;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_530_boot)
HXDLIN( 530)		BACKSLASH = (int)220;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_535_boot)
HXDLIN( 535)		RIGHTBRACKET = (int)221;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_540_boot)
HXDLIN( 540)		QUOTE = (int)222;
            	}
}

} // end namespace openfl
} // end namespace ui
