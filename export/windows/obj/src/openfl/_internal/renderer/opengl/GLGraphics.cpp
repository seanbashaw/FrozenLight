// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLGraphics
#include <openfl/_internal/renderer/opengl/GLGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskShader
#include <openfl/_internal/renderer/opengl/GLMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_48_buildBuffer,"openfl._internal.renderer.opengl.GLGraphics","buildBuffer",0x416b8d54,"openfl._internal.renderer.opengl.GLGraphics.buildBuffer","openfl/_internal/renderer/opengl/GLGraphics.hx",48,0xa27422a8)
HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_336_isCompatible,"openfl._internal.renderer.opengl.GLGraphics","isCompatible",0x43094e98,"openfl._internal.renderer.opengl.GLGraphics.isCompatible","openfl/_internal/renderer/opengl/GLGraphics.hx",336,0xa27422a8)
HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_437_render,"openfl._internal.renderer.opengl.GLGraphics","render",0xcc578e90,"openfl._internal.renderer.opengl.GLGraphics.render","openfl/_internal/renderer/opengl/GLGraphics.hx",437,0xa27422a8)
HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_786_renderMask,"openfl._internal.renderer.opengl.GLGraphics","renderMask",0x4719839c,"openfl._internal.renderer.opengl.GLGraphics.renderMask","openfl/_internal/renderer/opengl/GLGraphics.hx",786,0xa27422a8)
HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_797_resizeBuffer,"openfl._internal.renderer.opengl.GLGraphics","resizeBuffer",0xed69c4ce,"openfl._internal.renderer.opengl.GLGraphics.resizeBuffer","openfl/_internal/renderer/opengl/GLGraphics.hx",797,0xa27422a8)
HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_43_boot,"openfl._internal.renderer.opengl.GLGraphics","boot",0x6d7c84ec,"openfl._internal.renderer.opengl.GLGraphics.boot","openfl/_internal/renderer/opengl/GLGraphics.hx",43,0xa27422a8)
HX_LOCAL_STACK_FRAME(_hx_pos_cf8846fcc1aefa4f_45_boot,"openfl._internal.renderer.opengl.GLGraphics","boot",0x6d7c84ec,"openfl._internal.renderer.opengl.GLGraphics.boot","openfl/_internal/renderer/opengl/GLGraphics.hx",45,0xa27422a8)
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLGraphics_obj::__construct() { }

Dynamic GLGraphics_obj::__CreateEmpty() { return new GLGraphics_obj; }

void *GLGraphics_obj::_hx_vtable = 0;

Dynamic GLGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLGraphics_obj > _hx_result = new GLGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLGraphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b6e1f86;
}

 ::openfl::display::BitmapData GLGraphics_obj::blankBitmapData;

bool GLGraphics_obj::maskRender;

 ::openfl::geom::ColorTransform GLGraphics_obj::tempColorTransform;

void GLGraphics_obj::buildBuffer( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_48_buildBuffer)
HXLINE(  50)		int bufferLength = (int)0;
HXLINE(  51)		int bufferPosition = (int)0;
HXLINE(  53)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE(  56)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE(  61)		 ::openfl::geom::Rectangle tileRect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(  62)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(  64)		 ::openfl::display::BitmapData bitmap = null();
HXLINE(  66)		{
HXLINE(  66)			int _g = (int)0;
HXDLIN(  66)			::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN(  66)			while((_g < _g1->length)){
HXLINE(  66)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(  66)				_g = (_g + (int)1);
HXLINE(  68)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE(  72)						{
HXLINE(  72)							 ::openfl::_internal::renderer::DrawCommandType _g2 = data->prev;
HXDLIN(  72)							switch((int)(_hx_getEnumValueIndex(_g2))){
            								case (int)0: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  72)									data1->oPos = (data1->oPos + (int)2);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  72)									data2->bPos = (data2->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  72)									data3->iPos = (data3->iPos + (int)1);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  72)									data4->fPos = (data4->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN(  72)									data5->oPos = (data5->oPos + (int)4);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN(  72)									data6->iiPos = (data6->iiPos + (int)2);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN(  72)									data7->ffPos = (data7->ffPos + (int)1);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN(  72)									data8->fPos = (data8->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN(  72)									data9->oPos = (data9->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN(  72)									data10->fPos = (data10->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN(  72)									data11->fPos = (data11->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN(  72)									data12->fPos = (data12->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN(  72)									data13->fPos = (data13->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN(  72)									data14->oPos = (data14->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN(  72)									data15->fPos = (data15->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN(  72)									data16->fPos = (data16->fPos + (int)5);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN(  72)									data17->oPos = (data17->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN(  72)									data18->oPos = (data18->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN(  72)									data19->oPos = (data19->oPos + (int)2);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN(  72)									data20->bPos = (data20->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN(  72)									data21->oPos = (data21->oPos + (int)4);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN(  72)									data22->iiPos = (data22->iiPos + (int)2);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN(  72)									data23->ffPos = (data23->ffPos + (int)1);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN(  72)									data24->fPos = (data24->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN(  72)									data25->oPos = (data25->oPos + (int)4);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN(  72)									data26->iPos = (data26->iPos + (int)1);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN(  72)									data27->fPos = (data27->fPos + (int)2);
HXDLIN(  72)									 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN(  72)									data28->bPos = (data28->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN(  72)									data29->fPos = (data29->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN(  72)									data30->fPos = (data30->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(  72)									 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN(  72)									data31->oPos = (data31->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  72)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(  72)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(  72)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(  73)						bitmap = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
            					}
            					break;
            					case (int)1: {
HXLINE(  77)						bitmap = null();
HXLINE(  78)						{
HXLINE(  78)							{
HXLINE(  78)								 ::openfl::_internal::renderer::DrawCommandType _g3 = data->prev;
HXDLIN(  78)								switch((int)(_hx_getEnumValueIndex(_g3))){
            									case (int)0: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN(  78)										data32->oPos = (data32->oPos + (int)2);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN(  78)										data33->bPos = (data33->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN(  78)										data34->iPos = (data34->iPos + (int)1);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN(  78)										data35->fPos = (data35->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN(  78)										data36->oPos = (data36->oPos + (int)4);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN(  78)										data37->iiPos = (data37->iiPos + (int)2);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN(  78)										data38->ffPos = (data38->ffPos + (int)1);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN(  78)										data39->fPos = (data39->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN(  78)										data40->oPos = (data40->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN(  78)										data41->fPos = (data41->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN(  78)										data42->fPos = (data42->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN(  78)										data43->fPos = (data43->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN(  78)										data44->fPos = (data44->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN(  78)										data45->oPos = (data45->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN(  78)										data46->fPos = (data46->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN(  78)										data47->fPos = (data47->fPos + (int)5);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN(  78)										data48->oPos = (data48->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN(  78)										data49->oPos = (data49->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN(  78)										data50->oPos = (data50->oPos + (int)2);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN(  78)										data51->bPos = (data51->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN(  78)										data52->oPos = (data52->oPos + (int)4);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN(  78)										data53->iiPos = (data53->iiPos + (int)2);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN(  78)										data54->ffPos = (data54->ffPos + (int)1);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN(  78)										data55->fPos = (data55->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN(  78)										data56->oPos = (data56->oPos + (int)4);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN(  78)										data57->iPos = (data57->iPos + (int)1);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN(  78)										data58->fPos = (data58->fPos + (int)2);
HXDLIN(  78)										 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN(  78)										data59->bPos = (data59->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN(  78)										data60->fPos = (data60->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN(  78)										data61->fPos = (data61->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE(  78)										 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN(  78)										data62->oPos = (data62->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(  78)							data->prev = type;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(  82)						{
HXLINE(  82)							 ::openfl::_internal::renderer::DrawCommandType _g4 = data->prev;
HXDLIN(  82)							switch((int)(_hx_getEnumValueIndex(_g4))){
            								case (int)0: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN(  82)									data63->oPos = (data63->oPos + (int)2);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN(  82)									data64->bPos = (data64->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN(  82)									data65->iPos = (data65->iPos + (int)1);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN(  82)									data66->fPos = (data66->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN(  82)									data67->oPos = (data67->oPos + (int)4);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN(  82)									data68->iiPos = (data68->iiPos + (int)2);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN(  82)									data69->ffPos = (data69->ffPos + (int)1);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN(  82)									data70->fPos = (data70->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN(  82)									data71->oPos = (data71->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN(  82)									data72->fPos = (data72->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN(  82)									data73->fPos = (data73->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN(  82)									data74->fPos = (data74->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN(  82)									data75->fPos = (data75->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN(  82)									data76->oPos = (data76->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN(  82)									data77->fPos = (data77->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN(  82)									data78->fPos = (data78->fPos + (int)5);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN(  82)									data79->oPos = (data79->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN(  82)									data80->oPos = (data80->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN(  82)									data81->oPos = (data81->oPos + (int)2);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN(  82)									data82->bPos = (data82->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN(  82)									data83->oPos = (data83->oPos + (int)4);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN(  82)									data84->iiPos = (data84->iiPos + (int)2);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN(  82)									data85->ffPos = (data85->ffPos + (int)1);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN(  82)									data86->fPos = (data86->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN(  82)									data87->oPos = (data87->oPos + (int)4);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN(  82)									data88->iPos = (data88->iPos + (int)1);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN(  82)									data89->fPos = (data89->fPos + (int)2);
HXDLIN(  82)									 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN(  82)									data90->bPos = (data90->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN(  82)									data91->fPos = (data91->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN(  82)									data92->fPos = (data92->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(  82)									 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN(  82)									data93->oPos = (data93->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  82)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_SHADER_FILL_dyn();
HXDLIN(  82)						 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN(  82)						 ::openfl::_internal::renderer::DrawCommandReader c1 = this2;
HXLINE(  83)						 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c1->buffer->o->__get(c1->oPos)) );
HXLINE(  85)						bool _hx_tmp;
HXDLIN(  85)						bool _hx_tmp1;
HXDLIN(  85)						if (hx::IsNotNull( shaderBuffer )) {
HXLINE(  85)							_hx_tmp1 = hx::IsNull( shaderBuffer->shader );
            						}
            						else {
HXLINE(  85)							_hx_tmp1 = true;
            						}
HXDLIN(  85)						if (!(_hx_tmp1)) {
HXLINE(  85)							_hx_tmp = hx::IsNull( shaderBuffer->shader->_hx___bitmap );
            						}
            						else {
HXLINE(  85)							_hx_tmp = true;
            						}
HXDLIN(  85)						if (_hx_tmp) {
HXLINE(  87)							bitmap = null();
            						}
            						else {
HXLINE(  91)							bitmap = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c1->buffer->o->__get(c1->oPos)) )->shader->_hx___bitmap->input;
            						}
            					}
            					break;
            					case (int)8: {
HXLINE(  99)						if (hx::IsNotNull( bitmap )) {
HXLINE( 101)							{
HXLINE( 101)								 ::openfl::_internal::renderer::DrawCommandType _g5 = data->prev;
HXDLIN( 101)								switch((int)(_hx_getEnumValueIndex(_g5))){
            									case (int)0: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN( 101)										data94->oPos = (data94->oPos + (int)2);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN( 101)										data95->bPos = (data95->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN( 101)										data96->iPos = (data96->iPos + (int)1);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN( 101)										data97->fPos = (data97->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN( 101)										data98->oPos = (data98->oPos + (int)4);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN( 101)										data99->iiPos = (data99->iiPos + (int)2);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN( 101)										data100->ffPos = (data100->ffPos + (int)1);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN( 101)										data101->fPos = (data101->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN( 101)										data102->oPos = (data102->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN( 101)										data103->fPos = (data103->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN( 101)										data104->fPos = (data104->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN( 101)										data105->fPos = (data105->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN( 101)										data106->fPos = (data106->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN( 101)										data107->oPos = (data107->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN( 101)										data108->fPos = (data108->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN( 101)										data109->fPos = (data109->fPos + (int)5);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN( 101)										data110->oPos = (data110->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN( 101)										data111->oPos = (data111->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN( 101)										data112->oPos = (data112->oPos + (int)2);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN( 101)										data113->bPos = (data113->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN( 101)										data114->oPos = (data114->oPos + (int)4);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN( 101)										data115->iiPos = (data115->iiPos + (int)2);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN( 101)										data116->ffPos = (data116->ffPos + (int)1);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN( 101)										data117->fPos = (data117->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN( 101)										data118->oPos = (data118->oPos + (int)4);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN( 101)										data119->iPos = (data119->iPos + (int)1);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN( 101)										data120->fPos = (data120->fPos + (int)2);
HXDLIN( 101)										 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN( 101)										data121->bPos = (data121->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN( 101)										data122->fPos = (data122->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN( 101)										data123->fPos = (data123->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 101)										 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN( 101)										data124->oPos = (data124->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 101)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_QUADS_dyn();
HXDLIN( 101)							 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN( 101)							 ::openfl::_internal::renderer::DrawCommandReader c2 = this3;
HXLINE( 102)							 ::openfl::_Vector::FloatVector rects = ( ( ::openfl::_Vector::FloatVector)(c2->buffer->o->__get(c2->oPos)) );
HXLINE( 103)							::cpp::VirtualArray c3 = c2->buffer->o;
HXDLIN( 103)							 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c3->__get((c2->oPos + (int)1))) );
HXLINE( 104)							::cpp::VirtualArray c4 = c2->buffer->o;
HXDLIN( 104)							 ::openfl::_Vector::FloatVector transforms = ( ( ::openfl::_Vector::FloatVector)(c4->__get((c2->oPos + (int)2))) );
HXLINE( 107)							::Array< Float > rects1;
HXDLIN( 107)							if (hx::IsNull( rects )) {
HXLINE( 107)								rects1 = null();
            							}
            							else {
HXLINE( 107)								rects1 = ( (::Array< Float >)(rects->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            							}
HXLINE( 108)							::Array< int > indices1;
HXDLIN( 108)							if (hx::IsNull( indices )) {
HXLINE( 108)								indices1 = null();
            							}
            							else {
HXLINE( 108)								indices1 = ( (::Array< int >)(indices->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            							}
HXLINE( 109)							::Array< Float > transforms1;
HXDLIN( 109)							if (hx::IsNull( transforms )) {
HXLINE( 109)								transforms1 = null();
            							}
            							else {
HXLINE( 109)								transforms1 = ( (::Array< Float >)(transforms->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            							}
HXLINE( 112)							bool hasIndices = hx::IsNotNull( indices1 );
HXLINE( 113)							bool transformABCD = false;
HXDLIN( 113)							bool transformXY = false;
HXLINE( 115)							int length;
HXDLIN( 115)							if (hasIndices) {
HXLINE( 115)								length = indices1->length;
            							}
            							else {
HXLINE( 115)								length = ::Math_obj::floor(((Float)rects1->length / (Float)(int)4));
            							}
HXLINE( 116)							if ((length == (int)0)) {
HXLINE( 116)								return;
            							}
HXLINE( 118)							if (hx::IsNotNull( transforms1 )) {
HXLINE( 120)								int transforms2 = transforms1->length;
HXDLIN( 120)								if ((transforms2 >= (length * (int)6))) {
HXLINE( 122)									transformABCD = true;
HXLINE( 123)									transformXY = true;
            								}
            								else {
HXLINE( 125)									int transforms3 = transforms1->length;
HXDLIN( 125)									if ((transforms3 >= (length * (int)4))) {
HXLINE( 127)										transformABCD = true;
            									}
            									else {
HXLINE( 129)										int transforms4 = transforms1->length;
HXDLIN( 129)										if ((transforms4 >= (length * (int)2))) {
HXLINE( 131)											transformXY = true;
            										}
            									}
            								}
            							}
HXLINE( 137)							int dataLength = (int)4;
HXLINE( 138)							int stride = (dataLength * (int)6);
HXLINE( 139)							int bufferLength1 = (length * stride);
HXLINE( 141)							::openfl::_internal::renderer::opengl::GLGraphics_obj::resizeBuffer(graphics,(bufferPosition + (length * stride)));
HXLINE( 143)							int offset = bufferPosition;
HXLINE( 144)							Float alpha = ((Float)1.0);
HXDLIN( 144)							 ::Dynamic tileData;
HXDLIN( 144)							 ::Dynamic id;
HXLINE( 145)							int bitmapWidth;
HXDLIN( 145)							int bitmapHeight;
HXDLIN( 145)							Float tileWidth;
HXDLIN( 145)							Float tileHeight;
HXLINE( 146)							Float uvX;
HXDLIN( 146)							Float uvY;
HXDLIN( 146)							Float uvWidth;
HXDLIN( 146)							Float uvHeight;
HXLINE( 147)							Float x;
HXDLIN( 147)							Float y;
HXDLIN( 147)							Float x2;
HXDLIN( 147)							Float y2;
HXDLIN( 147)							Float x3;
HXDLIN( 147)							Float y3;
HXDLIN( 147)							Float x4;
HXDLIN( 147)							Float y4;
HXLINE( 148)							int ri;
HXDLIN( 148)							int ti;
HXLINE( 150)							 ::lime::utils::ArrayBufferView _hx___bufferData = graphics->_hx___bufferData;
HXLINE( 166)							bitmapWidth = bitmap->width;
HXLINE( 167)							bitmapHeight = bitmap->height;
HXLINE( 170)							 ::openfl::geom::Rectangle sourceRect = bitmap->rect;
HXLINE( 172)							{
HXLINE( 172)								int _g31 = (int)0;
HXDLIN( 172)								int _g21 = length;
HXDLIN( 172)								while((_g31 < _g21)){
HXLINE( 172)									_g31 = (_g31 + (int)1);
HXDLIN( 172)									int i = (_g31 - (int)1);
HXLINE( 174)									offset = (bufferPosition + (i * stride));
HXLINE( 176)									if (hasIndices) {
HXLINE( 176)										ri = (indices1->__get(i) * (int)4);
            									}
            									else {
HXLINE( 176)										ri = (i * (int)4);
            									}
HXLINE( 177)									if ((ri < (int)0)) {
HXLINE( 177)										continue;
            									}
HXLINE( 178)									tileRect->setTo(rects1->__get(ri),rects1->__get((ri + (int)1)),rects1->__get((ri + (int)2)),rects1->__get((ri + (int)3)));
HXLINE( 180)									tileWidth = tileRect->width;
HXLINE( 181)									tileHeight = tileRect->height;
HXLINE( 183)									bool _hx_tmp2;
HXDLIN( 183)									if (!((tileWidth <= (int)0))) {
HXLINE( 183)										_hx_tmp2 = (tileHeight <= (int)0);
            									}
            									else {
HXLINE( 183)										_hx_tmp2 = true;
            									}
HXDLIN( 183)									if (_hx_tmp2) {
HXLINE( 185)										continue;
            									}
HXLINE( 189)									bool _hx_tmp3;
HXDLIN( 189)									if (transformABCD) {
HXLINE( 189)										_hx_tmp3 = transformXY;
            									}
            									else {
HXLINE( 189)										_hx_tmp3 = false;
            									}
HXDLIN( 189)									if (_hx_tmp3) {
HXLINE( 191)										ti = (i * (int)6);
HXLINE( 192)										tileTransform->setTo(transforms1->__get(ti),transforms1->__get((ti + (int)1)),transforms1->__get((ti + (int)2)),transforms1->__get((ti + (int)3)),transforms1->__get((ti + (int)4)),transforms1->__get((ti + (int)5)));
            									}
            									else {
HXLINE( 194)										if (transformABCD) {
HXLINE( 196)											ti = (i * (int)4);
HXLINE( 197)											tileTransform->setTo(transforms1->__get(ti),transforms1->__get((ti + (int)1)),transforms1->__get((ti + (int)2)),transforms1->__get((ti + (int)3)),tileRect->x,tileRect->y);
            										}
            										else {
HXLINE( 199)											if (transformXY) {
HXLINE( 201)												ti = (i * (int)2);
HXLINE( 202)												tileTransform->tx = transforms1->__get(ti);
HXLINE( 203)												tileTransform->ty = transforms1->__get((ti + (int)1));
            											}
            											else {
HXLINE( 207)												tileTransform->tx = tileRect->x;
HXLINE( 208)												tileTransform->ty = tileRect->y;
            											}
            										}
            									}
HXLINE( 212)									uvX = ((Float)tileRect->x / (Float)bitmapWidth);
HXLINE( 213)									uvY = ((Float)tileRect->y / (Float)bitmapHeight);
HXLINE( 214)									uvWidth = ((Float)tileRect->get_right() / (Float)bitmapWidth);
HXLINE( 215)									uvHeight = ((Float)tileRect->get_bottom() / (Float)bitmapHeight);
HXLINE( 217)									Float x1 = ((int)0 * tileTransform->a);
HXDLIN( 217)									x = ((x1 + ((int)0 * tileTransform->c)) + tileTransform->tx);
HXLINE( 218)									Float y1 = ((int)0 * tileTransform->b);
HXDLIN( 218)									y = ((y1 + ((int)0 * tileTransform->d)) + tileTransform->ty);
HXLINE( 219)									Float x21 = (tileWidth * tileTransform->a);
HXDLIN( 219)									x2 = ((x21 + ((int)0 * tileTransform->c)) + tileTransform->tx);
HXLINE( 220)									Float y21 = (tileWidth * tileTransform->b);
HXDLIN( 220)									y2 = ((y21 + ((int)0 * tileTransform->d)) + tileTransform->ty);
HXLINE( 221)									Float x31 = ((int)0 * tileTransform->a);
HXDLIN( 221)									x3 = ((x31 + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 222)									Float y31 = ((int)0 * tileTransform->b);
HXDLIN( 222)									y3 = ((y31 + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 223)									Float x41 = (tileWidth * tileTransform->a);
HXDLIN( 223)									x4 = ((x41 + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 224)									Float y41 = (tileWidth * tileTransform->b);
HXDLIN( 224)									y4 = ((y41 + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 226)									{
HXLINE( 226)										int _hx___bufferData1 = _hx___bufferData->byteOffset;
HXDLIN( 226)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData1 + (offset * (int)4)),x);
            									}
HXLINE( 227)									{
HXLINE( 227)										int _hx___bufferData2 = _hx___bufferData->byteOffset;
HXDLIN( 227)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData2 + ((offset + (int)1) * (int)4)),y);
            									}
HXLINE( 228)									{
HXLINE( 228)										int _hx___bufferData3 = _hx___bufferData->byteOffset;
HXDLIN( 228)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData3 + ((offset + (int)2) * (int)4)),uvX);
            									}
HXLINE( 229)									{
HXLINE( 229)										int _hx___bufferData4 = _hx___bufferData->byteOffset;
HXDLIN( 229)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData4 + ((offset + (int)3) * (int)4)),uvY);
            									}
HXLINE( 231)									{
HXLINE( 231)										int _hx___bufferData5 = _hx___bufferData->byteOffset;
HXDLIN( 231)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData5 + ((offset + dataLength) * (int)4)),x2);
            									}
HXLINE( 232)									{
HXLINE( 232)										int _hx___bufferData6 = _hx___bufferData->byteOffset;
HXDLIN( 232)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData6 + (((offset + dataLength) + (int)1) * (int)4)),y2);
            									}
HXLINE( 233)									{
HXLINE( 233)										int _hx___bufferData7 = _hx___bufferData->byteOffset;
HXDLIN( 233)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData7 + (((offset + dataLength) + (int)2) * (int)4)),uvWidth);
            									}
HXLINE( 234)									{
HXLINE( 234)										int _hx___bufferData8 = _hx___bufferData->byteOffset;
HXDLIN( 234)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData8 + (((offset + dataLength) + (int)3) * (int)4)),uvY);
            									}
HXLINE( 236)									{
HXLINE( 236)										int _hx___bufferData9 = _hx___bufferData->byteOffset;
HXDLIN( 236)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData9 + ((offset + (dataLength * (int)2)) * (int)4)),x3);
            									}
HXLINE( 237)									{
HXLINE( 237)										int _hx___bufferData10 = _hx___bufferData->byteOffset;
HXDLIN( 237)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData10 + (((offset + (dataLength * (int)2)) + (int)1) * (int)4)),y3);
            									}
HXLINE( 238)									{
HXLINE( 238)										int _hx___bufferData11 = _hx___bufferData->byteOffset;
HXDLIN( 238)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData11 + (((offset + (dataLength * (int)2)) + (int)2) * (int)4)),uvX);
            									}
HXLINE( 239)									{
HXLINE( 239)										int _hx___bufferData12 = _hx___bufferData->byteOffset;
HXDLIN( 239)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData12 + (((offset + (dataLength * (int)2)) + (int)3) * (int)4)),uvHeight);
            									}
HXLINE( 241)									{
HXLINE( 241)										int _hx___bufferData13 = _hx___bufferData->byteOffset;
HXDLIN( 241)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData13 + ((offset + (dataLength * (int)3)) * (int)4)),x3);
            									}
HXLINE( 242)									{
HXLINE( 242)										int _hx___bufferData14 = _hx___bufferData->byteOffset;
HXDLIN( 242)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData14 + (((offset + (dataLength * (int)3)) + (int)1) * (int)4)),y3);
            									}
HXLINE( 243)									{
HXLINE( 243)										int _hx___bufferData15 = _hx___bufferData->byteOffset;
HXDLIN( 243)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData15 + (((offset + (dataLength * (int)3)) + (int)2) * (int)4)),uvX);
            									}
HXLINE( 244)									{
HXLINE( 244)										int _hx___bufferData16 = _hx___bufferData->byteOffset;
HXDLIN( 244)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData16 + (((offset + (dataLength * (int)3)) + (int)3) * (int)4)),uvHeight);
            									}
HXLINE( 246)									{
HXLINE( 246)										int _hx___bufferData17 = _hx___bufferData->byteOffset;
HXDLIN( 246)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData17 + ((offset + (dataLength * (int)4)) * (int)4)),x2);
            									}
HXLINE( 247)									{
HXLINE( 247)										int _hx___bufferData18 = _hx___bufferData->byteOffset;
HXDLIN( 247)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData18 + (((offset + (dataLength * (int)4)) + (int)1) * (int)4)),y2);
            									}
HXLINE( 248)									{
HXLINE( 248)										int _hx___bufferData19 = _hx___bufferData->byteOffset;
HXDLIN( 248)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData19 + (((offset + (dataLength * (int)4)) + (int)2) * (int)4)),uvWidth);
            									}
HXLINE( 249)									{
HXLINE( 249)										int _hx___bufferData20 = _hx___bufferData->byteOffset;
HXDLIN( 249)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData20 + (((offset + (dataLength * (int)4)) + (int)3) * (int)4)),uvY);
            									}
HXLINE( 251)									{
HXLINE( 251)										int _hx___bufferData21 = _hx___bufferData->byteOffset;
HXDLIN( 251)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData21 + ((offset + (dataLength * (int)5)) * (int)4)),x4);
            									}
HXLINE( 252)									{
HXLINE( 252)										int _hx___bufferData22 = _hx___bufferData->byteOffset;
HXDLIN( 252)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData22 + (((offset + (dataLength * (int)5)) + (int)1) * (int)4)),y4);
            									}
HXLINE( 253)									{
HXLINE( 253)										int _hx___bufferData23 = _hx___bufferData->byteOffset;
HXDLIN( 253)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData23 + (((offset + (dataLength * (int)5)) + (int)2) * (int)4)),uvWidth);
            									}
HXLINE( 254)									{
HXLINE( 254)										int _hx___bufferData24 = _hx___bufferData->byteOffset;
HXDLIN( 254)										::__hxcpp_memory_set_float(_hx___bufferData->buffer->b,(_hx___bufferData24 + (((offset + (dataLength * (int)5)) + (int)3) * (int)4)),uvHeight);
            									}
            								}
            							}
HXLINE( 258)							bufferPosition = (bufferPosition + (length * stride));
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 264)						{
HXLINE( 264)							 ::openfl::_internal::renderer::DrawCommandType _g6 = data->prev;
HXDLIN( 264)							switch((int)(_hx_getEnumValueIndex(_g6))){
            								case (int)0: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN( 264)									data125->oPos = (data125->oPos + (int)2);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN( 264)									data126->bPos = (data126->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN( 264)									data127->iPos = (data127->iPos + (int)1);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN( 264)									data128->fPos = (data128->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 264)									data129->oPos = (data129->oPos + (int)4);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 264)									data130->iiPos = (data130->iiPos + (int)2);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 264)									data131->ffPos = (data131->ffPos + (int)1);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 264)									data132->fPos = (data132->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 264)									data133->oPos = (data133->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 264)									data134->fPos = (data134->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 264)									data135->fPos = (data135->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 264)									data136->fPos = (data136->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 264)									data137->fPos = (data137->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 264)									data138->oPos = (data138->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 264)									data139->fPos = (data139->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 264)									data140->fPos = (data140->fPos + (int)5);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 264)									data141->oPos = (data141->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 264)									data142->oPos = (data142->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 264)									data143->oPos = (data143->oPos + (int)2);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 264)									data144->bPos = (data144->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 264)									data145->oPos = (data145->oPos + (int)4);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 264)									data146->iiPos = (data146->iiPos + (int)2);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 264)									data147->ffPos = (data147->ffPos + (int)1);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 264)									data148->fPos = (data148->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 264)									data149->oPos = (data149->oPos + (int)4);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 264)									data150->iPos = (data150->iPos + (int)1);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 264)									data151->fPos = (data151->fPos + (int)2);
HXDLIN( 264)									 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 264)									data152->bPos = (data152->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 264)									data153->fPos = (data153->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 264)									data154->fPos = (data154->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE( 264)									 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 264)									data155->oPos = (data155->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 264)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 264)						 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN( 264)						 ::openfl::_internal::renderer::DrawCommandReader c5 = this4;
HXLINE( 265)						 ::openfl::_Vector::FloatVector vertices = ( ( ::openfl::_Vector::FloatVector)(c5->buffer->o->__get(c5->oPos)) );
HXLINE( 266)						::cpp::VirtualArray c6 = c5->buffer->o;
HXDLIN( 266)						 ::openfl::_Vector::IntVector indices2 = ( ( ::openfl::_Vector::IntVector)(c6->__get((c5->oPos + (int)1))) );
HXLINE( 267)						::cpp::VirtualArray c7 = c5->buffer->o;
HXDLIN( 267)						 ::openfl::_Vector::FloatVector uvtData = ( ( ::openfl::_Vector::FloatVector)(c7->__get((c5->oPos + (int)2))) );
HXLINE( 268)						::cpp::VirtualArray c8 = c5->buffer->o;
HXDLIN( 268)						 ::Dynamic culling = c8->__get((c5->oPos + (int)3));
HXLINE( 270)						bool hasIndices1 = hx::IsNotNull( indices2 );
HXLINE( 271)						int numVertices = ::Math_obj::floor(((Float)vertices->get_length() / (Float)(int)2));
HXLINE( 272)						int length1;
HXDLIN( 272)						if (hasIndices1) {
HXLINE( 272)							length1 = indices2->get_length();
            						}
            						else {
HXLINE( 272)							length1 = numVertices;
            						}
HXLINE( 274)						bool hasUVData = hx::IsNotNull( uvtData );
HXLINE( 275)						bool hasUVTData;
HXDLIN( 275)						if (hasUVData) {
HXLINE( 275)							int hasUVTData1 = uvtData->get_length();
HXDLIN( 275)							hasUVTData = (hasUVTData1 >= (numVertices * (int)3));
            						}
            						else {
HXLINE( 275)							hasUVTData = false;
            						}
HXLINE( 276)						int vertLength;
HXDLIN( 276)						if (hasUVTData) {
HXLINE( 276)							vertLength = (int)4;
            						}
            						else {
HXLINE( 276)							vertLength = (int)2;
            						}
HXLINE( 277)						int uvStride;
HXDLIN( 277)						if (hasUVTData) {
HXLINE( 277)							uvStride = (int)3;
            						}
            						else {
HXLINE( 277)							uvStride = (int)2;
            						}
HXLINE( 279)						int stride1 = (vertLength + (int)2);
HXLINE( 280)						int offset1 = bufferPosition;
HXLINE( 282)						::openfl::_internal::renderer::opengl::GLGraphics_obj::resizeBuffer(graphics,(bufferPosition + (length1 * stride1)));
HXLINE( 284)						 ::lime::utils::ArrayBufferView _hx___bufferData25 = graphics->_hx___bufferData;
HXLINE( 285)						int vertOffset;
HXDLIN( 285)						int uvOffset;
HXDLIN( 285)						Float t;
HXLINE( 289)						{
HXLINE( 289)							int _g32 = (int)0;
HXDLIN( 289)							int _g22 = length1;
HXDLIN( 289)							while((_g32 < _g22)){
HXLINE( 289)								_g32 = (_g32 + (int)1);
HXDLIN( 289)								int i1 = (_g32 - (int)1);
HXLINE( 291)								offset1 = (bufferPosition + (i1 * stride1));
HXLINE( 292)								if (hasIndices1) {
HXLINE( 292)									vertOffset = (indices2->get(i1) * (int)2);
            								}
            								else {
HXLINE( 292)									vertOffset = (i1 * (int)2);
            								}
HXLINE( 293)								if (hasIndices1) {
HXLINE( 293)									uvOffset = (indices2->get(i1) * uvStride);
            								}
            								else {
HXLINE( 293)									uvOffset = (i1 * uvStride);
            								}
HXLINE( 295)								if (hasUVTData) {
HXLINE( 297)									t = uvtData->get((uvOffset + (int)2));
HXLINE( 299)									{
HXLINE( 299)										Float val = ((Float)vertices->get(vertOffset) / (Float)t);
HXDLIN( 299)										{
HXLINE( 299)											int _hx___bufferData26 = _hx___bufferData25->byteOffset;
HXDLIN( 299)											::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData26 + (offset1 * (int)4)),val);
            										}
            									}
HXLINE( 300)									{
HXLINE( 300)										Float val1 = ((Float)vertices->get((vertOffset + (int)1)) / (Float)t);
HXDLIN( 300)										{
HXLINE( 300)											int _hx___bufferData27 = _hx___bufferData25->byteOffset;
HXDLIN( 300)											::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData27 + ((offset1 + (int)1) * (int)4)),val1);
            										}
            									}
HXLINE( 301)									{
HXLINE( 301)										int _hx___bufferData28 = _hx___bufferData25->byteOffset;
HXDLIN( 301)										::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData28 + ((offset1 + (int)2) * (int)4)),(int)0);
            									}
HXLINE( 302)									{
HXLINE( 302)										Float val2 = ((Float)(int)1 / (Float)t);
HXDLIN( 302)										{
HXLINE( 302)											int _hx___bufferData29 = _hx___bufferData25->byteOffset;
HXDLIN( 302)											::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData29 + ((offset1 + (int)3) * (int)4)),val2);
            										}
            									}
            								}
            								else {
HXLINE( 306)									{
HXLINE( 306)										Float val3 = vertices->get(vertOffset);
HXDLIN( 306)										{
HXLINE( 306)											int _hx___bufferData30 = _hx___bufferData25->byteOffset;
HXDLIN( 306)											::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData30 + (offset1 * (int)4)),val3);
            										}
            									}
HXLINE( 307)									{
HXLINE( 307)										Float val4 = vertices->get((vertOffset + (int)1));
HXDLIN( 307)										{
HXLINE( 307)											int _hx___bufferData31 = _hx___bufferData25->byteOffset;
HXDLIN( 307)											::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData31 + ((offset1 + (int)1) * (int)4)),val4);
            										}
            									}
            								}
HXLINE( 311)								{
HXLINE( 311)									Float val5;
HXDLIN( 311)									if (hasUVData) {
HXLINE( 311)										val5 = uvtData->get(uvOffset);
            									}
            									else {
HXLINE( 311)										val5 = (int)0;
            									}
HXDLIN( 311)									{
HXLINE( 311)										int _hx___bufferData32 = _hx___bufferData25->byteOffset;
HXDLIN( 311)										::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData32 + ((offset1 + vertLength) * (int)4)),val5);
            									}
            								}
HXLINE( 312)								{
HXLINE( 312)									Float val6;
HXDLIN( 312)									if (hasUVData) {
HXLINE( 312)										val6 = uvtData->get((uvOffset + (int)1));
            									}
            									else {
HXLINE( 312)										val6 = (int)0;
            									}
HXDLIN( 312)									{
HXLINE( 312)										int _hx___bufferData33 = _hx___bufferData25->byteOffset;
HXDLIN( 312)										::__hxcpp_memory_set_float(_hx___bufferData25->buffer->b,(_hx___bufferData33 + (((offset1 + vertLength) + (int)1) * (int)4)),val6);
            									}
            								}
            							}
            						}
HXLINE( 316)						bufferPosition = (bufferPosition + (length1 * stride1));
            					}
            					break;
            					case (int)13: {
HXLINE( 320)						bitmap = null();
            					}
            					break;
            					default:{
HXLINE( 324)						{
HXLINE( 324)							 ::openfl::_internal::renderer::DrawCommandType _g7 = data->prev;
HXDLIN( 324)							switch((int)(_hx_getEnumValueIndex(_g7))){
            								case (int)0: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 324)									data156->oPos = (data156->oPos + (int)2);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 324)									data157->bPos = (data157->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 324)									data158->iPos = (data158->iPos + (int)1);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 324)									data159->fPos = (data159->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 324)									data160->oPos = (data160->oPos + (int)4);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 324)									data161->iiPos = (data161->iiPos + (int)2);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 324)									data162->ffPos = (data162->ffPos + (int)1);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 324)									data163->fPos = (data163->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 324)									data164->oPos = (data164->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 324)									data165->fPos = (data165->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 324)									data166->fPos = (data166->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 324)									data167->fPos = (data167->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 324)									data168->fPos = (data168->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 324)									data169->oPos = (data169->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 324)									data170->fPos = (data170->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 324)									data171->fPos = (data171->fPos + (int)5);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 324)									data172->oPos = (data172->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 324)									data173->oPos = (data173->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 324)									data174->oPos = (data174->oPos + (int)2);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 324)									data175->bPos = (data175->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 324)									data176->oPos = (data176->oPos + (int)4);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 324)									data177->iiPos = (data177->iiPos + (int)2);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 324)									data178->ffPos = (data178->ffPos + (int)1);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 324)									data179->fPos = (data179->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 324)									data180->oPos = (data180->oPos + (int)4);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 324)									data181->iPos = (data181->iPos + (int)1);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 324)									data182->fPos = (data182->fPos + (int)2);
HXDLIN( 324)									 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 324)									data183->bPos = (data183->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 324)									data184->fPos = (data184->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 324)									data185->fPos = (data185->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE( 324)									 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 324)									data186->oPos = (data186->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 324)						data->prev = type;
            					}
            				}
            			}
            		}
HXLINE( 330)		::openfl::geom::Rectangle_obj::_hx___pool->release(tileRect);
HXLINE( 331)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLGraphics_obj,buildBuffer,(void))

bool GLGraphics_obj::isCompatible( ::openfl::display::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_336_isCompatible)
HXLINE( 344)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 345)		bool hasColorFill = false;
HXDLIN( 345)		bool hasBitmapFill = false;
HXDLIN( 345)		bool hasShaderFill = false;
HXLINE( 347)		{
HXLINE( 347)			int _g = (int)0;
HXDLIN( 347)			::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN( 347)			while((_g < _g1->length)){
HXLINE( 347)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 347)				_g = (_g + (int)1);
HXLINE( 349)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE( 353)						hasBitmapFill = true;
HXLINE( 354)						hasColorFill = false;
HXLINE( 355)						hasShaderFill = false;
HXLINE( 356)						{
HXLINE( 356)							{
HXLINE( 356)								 ::openfl::_internal::renderer::DrawCommandType _g2 = data->prev;
HXDLIN( 356)								switch((int)(_hx_getEnumValueIndex(_g2))){
            									case (int)0: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 356)										data1->oPos = (data1->oPos + (int)2);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 356)										data2->bPos = (data2->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 356)										data3->iPos = (data3->iPos + (int)1);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 356)										data4->fPos = (data4->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN( 356)										data5->oPos = (data5->oPos + (int)4);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN( 356)										data6->iiPos = (data6->iiPos + (int)2);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN( 356)										data7->ffPos = (data7->ffPos + (int)1);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN( 356)										data8->fPos = (data8->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN( 356)										data9->oPos = (data9->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN( 356)										data10->fPos = (data10->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN( 356)										data11->fPos = (data11->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN( 356)										data12->fPos = (data12->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN( 356)										data13->fPos = (data13->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN( 356)										data14->oPos = (data14->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN( 356)										data15->fPos = (data15->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN( 356)										data16->fPos = (data16->fPos + (int)5);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN( 356)										data17->oPos = (data17->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN( 356)										data18->oPos = (data18->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN( 356)										data19->oPos = (data19->oPos + (int)2);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN( 356)										data20->bPos = (data20->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN( 356)										data21->oPos = (data21->oPos + (int)4);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN( 356)										data22->iiPos = (data22->iiPos + (int)2);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN( 356)										data23->ffPos = (data23->ffPos + (int)1);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN( 356)										data24->fPos = (data24->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN( 356)										data25->oPos = (data25->oPos + (int)4);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN( 356)										data26->iPos = (data26->iPos + (int)1);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN( 356)										data27->fPos = (data27->fPos + (int)2);
HXDLIN( 356)										 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN( 356)										data28->bPos = (data28->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN( 356)										data29->fPos = (data29->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN( 356)										data30->fPos = (data30->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 356)										 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN( 356)										data31->oPos = (data31->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 356)							data->prev = type;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 360)						hasBitmapFill = false;
HXLINE( 361)						hasColorFill = true;
HXLINE( 362)						hasShaderFill = false;
HXLINE( 363)						{
HXLINE( 363)							{
HXLINE( 363)								 ::openfl::_internal::renderer::DrawCommandType _g3 = data->prev;
HXDLIN( 363)								switch((int)(_hx_getEnumValueIndex(_g3))){
            									case (int)0: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN( 363)										data32->oPos = (data32->oPos + (int)2);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN( 363)										data33->bPos = (data33->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN( 363)										data34->iPos = (data34->iPos + (int)1);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN( 363)										data35->fPos = (data35->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN( 363)										data36->oPos = (data36->oPos + (int)4);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN( 363)										data37->iiPos = (data37->iiPos + (int)2);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN( 363)										data38->ffPos = (data38->ffPos + (int)1);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN( 363)										data39->fPos = (data39->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN( 363)										data40->oPos = (data40->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN( 363)										data41->fPos = (data41->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN( 363)										data42->fPos = (data42->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN( 363)										data43->fPos = (data43->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN( 363)										data44->fPos = (data44->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN( 363)										data45->oPos = (data45->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN( 363)										data46->fPos = (data46->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN( 363)										data47->fPos = (data47->fPos + (int)5);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN( 363)										data48->oPos = (data48->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN( 363)										data49->oPos = (data49->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN( 363)										data50->oPos = (data50->oPos + (int)2);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN( 363)										data51->bPos = (data51->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN( 363)										data52->oPos = (data52->oPos + (int)4);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN( 363)										data53->iiPos = (data53->iiPos + (int)2);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN( 363)										data54->ffPos = (data54->ffPos + (int)1);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN( 363)										data55->fPos = (data55->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN( 363)										data56->oPos = (data56->oPos + (int)4);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN( 363)										data57->iPos = (data57->iPos + (int)1);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN( 363)										data58->fPos = (data58->fPos + (int)2);
HXDLIN( 363)										 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN( 363)										data59->bPos = (data59->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN( 363)										data60->fPos = (data60->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN( 363)										data61->fPos = (data61->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 363)										 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN( 363)										data62->oPos = (data62->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 363)							data->prev = type;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 367)						hasBitmapFill = false;
HXLINE( 368)						hasColorFill = false;
HXLINE( 369)						hasShaderFill = true;
HXLINE( 370)						{
HXLINE( 370)							{
HXLINE( 370)								 ::openfl::_internal::renderer::DrawCommandType _g4 = data->prev;
HXDLIN( 370)								switch((int)(_hx_getEnumValueIndex(_g4))){
            									case (int)0: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN( 370)										data63->oPos = (data63->oPos + (int)2);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN( 370)										data64->bPos = (data64->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN( 370)										data65->iPos = (data65->iPos + (int)1);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN( 370)										data66->fPos = (data66->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN( 370)										data67->oPos = (data67->oPos + (int)4);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN( 370)										data68->iiPos = (data68->iiPos + (int)2);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN( 370)										data69->ffPos = (data69->ffPos + (int)1);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN( 370)										data70->fPos = (data70->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN( 370)										data71->oPos = (data71->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN( 370)										data72->fPos = (data72->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN( 370)										data73->fPos = (data73->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN( 370)										data74->fPos = (data74->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN( 370)										data75->fPos = (data75->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN( 370)										data76->oPos = (data76->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN( 370)										data77->fPos = (data77->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN( 370)										data78->fPos = (data78->fPos + (int)5);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN( 370)										data79->oPos = (data79->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN( 370)										data80->oPos = (data80->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN( 370)										data81->oPos = (data81->oPos + (int)2);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN( 370)										data82->bPos = (data82->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN( 370)										data83->oPos = (data83->oPos + (int)4);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN( 370)										data84->iiPos = (data84->iiPos + (int)2);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN( 370)										data85->ffPos = (data85->ffPos + (int)1);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN( 370)										data86->fPos = (data86->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN( 370)										data87->oPos = (data87->oPos + (int)4);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN( 370)										data88->iPos = (data88->iPos + (int)1);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN( 370)										data89->fPos = (data89->fPos + (int)2);
HXDLIN( 370)										 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN( 370)										data90->bPos = (data90->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN( 370)										data91->fPos = (data91->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN( 370)										data92->fPos = (data92->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 370)										 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN( 370)										data93->oPos = (data93->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 370)							data->prev = type;
            						}
            					}
            					break;
            					case (int)8: {
HXLINE( 374)						bool _hx_tmp;
HXDLIN( 374)						if (!(hasBitmapFill)) {
HXLINE( 374)							_hx_tmp = hasShaderFill;
            						}
            						else {
HXLINE( 374)							_hx_tmp = true;
            						}
HXDLIN( 374)						if (_hx_tmp) {
HXLINE( 376)							{
HXLINE( 376)								 ::openfl::_internal::renderer::DrawCommandType _g5 = data->prev;
HXDLIN( 376)								switch((int)(_hx_getEnumValueIndex(_g5))){
            									case (int)0: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN( 376)										data94->oPos = (data94->oPos + (int)2);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN( 376)										data95->bPos = (data95->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN( 376)										data96->iPos = (data96->iPos + (int)1);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN( 376)										data97->fPos = (data97->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN( 376)										data98->oPos = (data98->oPos + (int)4);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN( 376)										data99->iiPos = (data99->iiPos + (int)2);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN( 376)										data100->ffPos = (data100->ffPos + (int)1);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN( 376)										data101->fPos = (data101->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN( 376)										data102->oPos = (data102->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN( 376)										data103->fPos = (data103->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN( 376)										data104->fPos = (data104->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN( 376)										data105->fPos = (data105->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN( 376)										data106->fPos = (data106->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN( 376)										data107->oPos = (data107->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN( 376)										data108->fPos = (data108->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN( 376)										data109->fPos = (data109->fPos + (int)5);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN( 376)										data110->oPos = (data110->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN( 376)										data111->oPos = (data111->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN( 376)										data112->oPos = (data112->oPos + (int)2);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN( 376)										data113->bPos = (data113->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN( 376)										data114->oPos = (data114->oPos + (int)4);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN( 376)										data115->iiPos = (data115->iiPos + (int)2);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN( 376)										data116->ffPos = (data116->ffPos + (int)1);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN( 376)										data117->fPos = (data117->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN( 376)										data118->oPos = (data118->oPos + (int)4);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN( 376)										data119->iPos = (data119->iPos + (int)1);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN( 376)										data120->fPos = (data120->fPos + (int)2);
HXDLIN( 376)										 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN( 376)										data121->bPos = (data121->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN( 376)										data122->fPos = (data122->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN( 376)										data123->fPos = (data123->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 376)										 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN( 376)										data124->oPos = (data124->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 376)							data->prev = type;
            						}
            						else {
HXLINE( 380)							data->destroy();
HXLINE( 381)							return false;
            						}
            					}
            					break;
            					case (int)9: {
HXLINE( 387)						if (hasColorFill) {
HXLINE( 389)							{
HXLINE( 389)								 ::openfl::_internal::renderer::DrawCommandType _g6 = data->prev;
HXDLIN( 389)								switch((int)(_hx_getEnumValueIndex(_g6))){
            									case (int)0: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN( 389)										data125->oPos = (data125->oPos + (int)2);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN( 389)										data126->bPos = (data126->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN( 389)										data127->iPos = (data127->iPos + (int)1);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN( 389)										data128->fPos = (data128->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 389)										data129->oPos = (data129->oPos + (int)4);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 389)										data130->iiPos = (data130->iiPos + (int)2);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 389)										data131->ffPos = (data131->ffPos + (int)1);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 389)										data132->fPos = (data132->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 389)										data133->oPos = (data133->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 389)										data134->fPos = (data134->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 389)										data135->fPos = (data135->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 389)										data136->fPos = (data136->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 389)										data137->fPos = (data137->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 389)										data138->oPos = (data138->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 389)										data139->fPos = (data139->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 389)										data140->fPos = (data140->fPos + (int)5);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 389)										data141->oPos = (data141->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 389)										data142->oPos = (data142->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 389)										data143->oPos = (data143->oPos + (int)2);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 389)										data144->bPos = (data144->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 389)										data145->oPos = (data145->oPos + (int)4);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 389)										data146->iiPos = (data146->iiPos + (int)2);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 389)										data147->ffPos = (data147->ffPos + (int)1);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 389)										data148->fPos = (data148->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 389)										data149->oPos = (data149->oPos + (int)4);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 389)										data150->iPos = (data150->iPos + (int)1);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 389)										data151->fPos = (data151->fPos + (int)2);
HXDLIN( 389)										 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 389)										data152->bPos = (data152->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 389)										data153->fPos = (data153->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 389)										data154->fPos = (data154->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 389)										 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 389)										data155->oPos = (data155->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 389)							data->prev = type;
            						}
            						else {
HXLINE( 393)							data->destroy();
HXLINE( 394)							return false;
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 400)						bool _hx_tmp1;
HXDLIN( 400)						if (!(hasBitmapFill)) {
HXLINE( 400)							_hx_tmp1 = hasShaderFill;
            						}
            						else {
HXLINE( 400)							_hx_tmp1 = true;
            						}
HXDLIN( 400)						if (_hx_tmp1) {
HXLINE( 402)							{
HXLINE( 402)								 ::openfl::_internal::renderer::DrawCommandType _g7 = data->prev;
HXDLIN( 402)								switch((int)(_hx_getEnumValueIndex(_g7))){
            									case (int)0: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 402)										data156->oPos = (data156->oPos + (int)2);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 402)										data157->bPos = (data157->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 402)										data158->iPos = (data158->iPos + (int)1);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 402)										data159->fPos = (data159->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 402)										data160->oPos = (data160->oPos + (int)4);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 402)										data161->iiPos = (data161->iiPos + (int)2);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 402)										data162->ffPos = (data162->ffPos + (int)1);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 402)										data163->fPos = (data163->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 402)										data164->oPos = (data164->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 402)										data165->fPos = (data165->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 402)										data166->fPos = (data166->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 402)										data167->fPos = (data167->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 402)										data168->fPos = (data168->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 402)										data169->oPos = (data169->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 402)										data170->fPos = (data170->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 402)										data171->fPos = (data171->fPos + (int)5);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 402)										data172->oPos = (data172->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 402)										data173->oPos = (data173->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 402)										data174->oPos = (data174->oPos + (int)2);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 402)										data175->bPos = (data175->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 402)										data176->oPos = (data176->oPos + (int)4);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 402)										data177->iiPos = (data177->iiPos + (int)2);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 402)										data178->ffPos = (data178->ffPos + (int)1);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 402)										data179->fPos = (data179->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 402)										data180->oPos = (data180->oPos + (int)4);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 402)										data181->iPos = (data181->iPos + (int)1);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 402)										data182->fPos = (data182->fPos + (int)2);
HXDLIN( 402)										 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 402)										data183->bPos = (data183->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 402)										data184->fPos = (data184->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 402)										data185->fPos = (data185->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 402)										 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 402)										data186->oPos = (data186->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 402)							data->prev = type;
            						}
            						else {
HXLINE( 406)							data->destroy();
HXLINE( 407)							return false;
            						}
            					}
            					break;
            					case (int)13: {
HXLINE( 413)						hasBitmapFill = false;
HXLINE( 414)						hasColorFill = false;
HXLINE( 415)						hasShaderFill = false;
HXLINE( 416)						{
HXLINE( 416)							{
HXLINE( 416)								 ::openfl::_internal::renderer::DrawCommandType _g8 = data->prev;
HXDLIN( 416)								switch((int)(_hx_getEnumValueIndex(_g8))){
            									case (int)0: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN( 416)										data187->oPos = (data187->oPos + (int)2);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN( 416)										data188->bPos = (data188->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN( 416)										data189->iPos = (data189->iPos + (int)1);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN( 416)										data190->fPos = (data190->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN( 416)										data191->oPos = (data191->oPos + (int)4);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN( 416)										data192->iiPos = (data192->iiPos + (int)2);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN( 416)										data193->ffPos = (data193->ffPos + (int)1);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN( 416)										data194->fPos = (data194->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN( 416)										data195->oPos = (data195->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN( 416)										data196->fPos = (data196->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN( 416)										data197->fPos = (data197->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN( 416)										data198->fPos = (data198->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN( 416)										data199->fPos = (data199->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN( 416)										data200->oPos = (data200->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN( 416)										data201->fPos = (data201->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN( 416)										data202->fPos = (data202->fPos + (int)5);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN( 416)										data203->oPos = (data203->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN( 416)										data204->oPos = (data204->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN( 416)										data205->oPos = (data205->oPos + (int)2);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN( 416)										data206->bPos = (data206->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN( 416)										data207->oPos = (data207->oPos + (int)4);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN( 416)										data208->iiPos = (data208->iiPos + (int)2);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN( 416)										data209->ffPos = (data209->ffPos + (int)1);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN( 416)										data210->fPos = (data210->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN( 416)										data211->oPos = (data211->oPos + (int)4);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN( 416)										data212->iPos = (data212->iPos + (int)1);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN( 416)										data213->fPos = (data213->fPos + (int)2);
HXDLIN( 416)										 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN( 416)										data214->bPos = (data214->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN( 416)										data215->fPos = (data215->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN( 416)										data216->fPos = (data216->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE( 416)										 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN( 416)										data217->oPos = (data217->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 416)							data->prev = type;
            						}
            					}
            					break;
            					case (int)18: {
HXLINE( 420)						{
HXLINE( 420)							 ::openfl::_internal::renderer::DrawCommandType _g9 = data->prev;
HXDLIN( 420)							switch((int)(_hx_getEnumValueIndex(_g9))){
            								case (int)0: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN( 420)									data218->oPos = (data218->oPos + (int)2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN( 420)									data219->bPos = (data219->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN( 420)									data220->iPos = (data220->iPos + (int)1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN( 420)									data221->fPos = (data221->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN( 420)									data222->oPos = (data222->oPos + (int)4);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN( 420)									data223->iiPos = (data223->iiPos + (int)2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN( 420)									data224->ffPos = (data224->ffPos + (int)1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN( 420)									data225->fPos = (data225->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN( 420)									data226->oPos = (data226->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN( 420)									data227->fPos = (data227->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN( 420)									data228->fPos = (data228->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN( 420)									data229->fPos = (data229->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN( 420)									data230->fPos = (data230->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN( 420)									data231->oPos = (data231->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN( 420)									data232->fPos = (data232->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN( 420)									data233->fPos = (data233->fPos + (int)5);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN( 420)									data234->oPos = (data234->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN( 420)									data235->oPos = (data235->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN( 420)									data236->oPos = (data236->oPos + (int)2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN( 420)									data237->bPos = (data237->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN( 420)									data238->oPos = (data238->oPos + (int)4);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN( 420)									data239->iiPos = (data239->iiPos + (int)2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN( 420)									data240->ffPos = (data240->ffPos + (int)1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN( 420)									data241->fPos = (data241->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN( 420)									data242->oPos = (data242->oPos + (int)4);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN( 420)									data243->iPos = (data243->iPos + (int)1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN( 420)									data244->fPos = (data244->fPos + (int)2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN( 420)									data245->bPos = (data245->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN( 420)									data246->fPos = (data246->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN( 420)									data247->fPos = (data247->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN( 420)									data248->oPos = (data248->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 420)						data->prev = type;
            					}
            					break;
            					default:{
HXLINE( 424)						data->destroy();
HXLINE( 425)						return false;
            					}
            				}
            			}
            		}
HXLINE( 431)		data->destroy();
HXLINE( 432)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLGraphics_obj,isCompatible,return )

void GLGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_437_render)
HXLINE( 439)		bool _hx_tmp;
HXDLIN( 439)		if (!(!(graphics->_hx___visible))) {
HXLINE( 439)			_hx_tmp = (graphics->_hx___commands->get_length() == (int)0);
            		}
            		else {
HXLINE( 439)			_hx_tmp = true;
            		}
HXDLIN( 439)		if (_hx_tmp) {
HXLINE( 439)			return;
            		}
HXLINE( 441)		bool _hx_tmp1;
HXDLIN( 441)		bool _hx_tmp2;
HXDLIN( 441)		if (hx::IsNotNull( graphics->_hx___bitmap )) {
HXLINE( 441)			_hx_tmp2 = !(graphics->_hx___dirty);
            		}
            		else {
HXLINE( 441)			_hx_tmp2 = false;
            		}
HXDLIN( 441)		if (!(_hx_tmp2)) {
HXLINE( 441)			_hx_tmp1 = !(::openfl::_internal::renderer::opengl::GLGraphics_obj::isCompatible(graphics));
            		}
            		else {
HXLINE( 441)			_hx_tmp1 = true;
            		}
HXDLIN( 441)		if (_hx_tmp1) {
HXLINE( 443)			if (hx::IsNotNull( graphics->_hx___buffer )) {
HXLINE( 445)				graphics->_hx___bufferData = null();
HXLINE( 446)				graphics->_hx___buffer = null();
            			}
HXLINE( 450)			 ::openfl::geom::Matrix cacheTransform = renderer->_hx___softwareRenderer->_hx___worldTransform;
HXLINE( 451)			renderer->_hx___softwareRenderer->_hx___worldTransform = renderer->_hx___worldTransform;
HXLINE( 456)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,( ( ::openfl::display::CairoRenderer)(renderer->_hx___softwareRenderer) ));
HXLINE( 459)			renderer->_hx___softwareRenderer->_hx___worldTransform = cacheTransform;
            		}
            		else {
HXLINE( 463)			graphics->_hx___bitmap = null();
HXLINE( 464)			graphics->_hx___update(renderer->_hx___worldTransform);
HXLINE( 466)			 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXLINE( 468)			int width = graphics->_hx___width;
HXLINE( 469)			int height = graphics->_hx___height;
HXLINE( 471)			bool _hx_tmp3;
HXDLIN( 471)			bool _hx_tmp4;
HXDLIN( 471)			if (hx::IsNotNull( bounds )) {
HXLINE( 471)				_hx_tmp4 = (width >= (int)1);
            			}
            			else {
HXLINE( 471)				_hx_tmp4 = false;
            			}
HXDLIN( 471)			if (_hx_tmp4) {
HXLINE( 471)				_hx_tmp3 = (height >= (int)1);
            			}
            			else {
HXLINE( 471)				_hx_tmp3 = false;
            			}
HXDLIN( 471)			if (_hx_tmp3) {
HXLINE( 473)				bool updatedBuffer = false;
HXLINE( 475)				bool _hx_tmp5;
HXDLIN( 475)				if (!(graphics->_hx___dirty)) {
HXLINE( 475)					_hx_tmp5 = hx::IsNull( graphics->_hx___bufferData );
            				}
            				else {
HXLINE( 475)					_hx_tmp5 = true;
            				}
HXDLIN( 475)				if (_hx_tmp5) {
HXLINE( 477)					::openfl::_internal::renderer::opengl::GLGraphics_obj::buildBuffer(graphics,renderer);
HXLINE( 478)					updatedBuffer = true;
            				}
HXLINE( 482)				 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 485)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE( 490)				 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 492)				 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = null();
HXLINE( 493)				 ::openfl::display::BitmapData bitmap = null();
HXLINE( 494)				bool repeat = false;
HXLINE( 495)				bool smooth = false;
HXLINE( 496)				 ::Dynamic fill = null();
HXLINE( 498)				Float positionX = ((Float)0.0);
HXLINE( 499)				Float positionY = ((Float)0.0);
HXLINE( 501)				int bufferPosition = (int)0;
HXLINE( 503)				{
HXLINE( 503)					int _g = (int)0;
HXDLIN( 503)					::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN( 503)					while((_g < _g1->length)){
HXLINE( 503)						 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 503)						_g = (_g + (int)1);
HXLINE( 505)						switch((int)(_hx_getEnumValueIndex(type))){
            							case (int)0: {
HXLINE( 509)								{
HXLINE( 509)									 ::openfl::_internal::renderer::DrawCommandType _g2 = data->prev;
HXDLIN( 509)									switch((int)(_hx_getEnumValueIndex(_g2))){
            										case (int)0: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 509)											data1->oPos = (data1->oPos + (int)2);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 509)											data2->bPos = (data2->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 509)											data3->iPos = (data3->iPos + (int)1);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 509)											data4->fPos = (data4->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN( 509)											data5->oPos = (data5->oPos + (int)4);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN( 509)											data6->iiPos = (data6->iiPos + (int)2);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN( 509)											data7->ffPos = (data7->ffPos + (int)1);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN( 509)											data8->fPos = (data8->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN( 509)											data9->oPos = (data9->oPos + (int)1);
            										}
            										break;
            										case (int)4: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN( 509)											data10->fPos = (data10->fPos + (int)6);
            										}
            										break;
            										case (int)5: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN( 509)											data11->fPos = (data11->fPos + (int)4);
            										}
            										break;
            										case (int)6: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN( 509)											data12->fPos = (data12->fPos + (int)3);
            										}
            										break;
            										case (int)7: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN( 509)											data13->fPos = (data13->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN( 509)											data14->oPos = (data14->oPos + (int)3);
            										}
            										break;
            										case (int)9: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN( 509)											data15->fPos = (data15->fPos + (int)4);
            										}
            										break;
            										case (int)10: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN( 509)											data16->fPos = (data16->fPos + (int)5);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN( 509)											data17->oPos = (data17->oPos + (int)1);
            										}
            										break;
            										case (int)12: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN( 509)											data18->oPos = (data18->oPos + (int)4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN( 509)											data19->oPos = (data19->oPos + (int)2);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN( 509)											data20->bPos = (data20->bPos + (int)2);
            										}
            										break;
            										case (int)15: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN( 509)											data21->oPos = (data21->oPos + (int)4);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN( 509)											data22->iiPos = (data22->iiPos + (int)2);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN( 509)											data23->ffPos = (data23->ffPos + (int)1);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN( 509)											data24->fPos = (data24->fPos + (int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN( 509)											data25->oPos = (data25->oPos + (int)4);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN( 509)											data26->iPos = (data26->iPos + (int)1);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN( 509)											data27->fPos = (data27->fPos + (int)2);
HXDLIN( 509)											 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN( 509)											data28->bPos = (data28->bPos + (int)1);
            										}
            										break;
            										case (int)17: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN( 509)											data29->fPos = (data29->fPos + (int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN( 509)											data30->fPos = (data30->fPos + (int)2);
            										}
            										break;
            										case (int)19: {
HXLINE( 509)											 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN( 509)											data31->oPos = (data31->oPos + (int)1);
            										}
            										break;
            										case (int)20: case (int)21: {
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 509)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 509)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 509)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 510)								bitmap = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 511)								repeat = c->buffer->b->__get(c->bPos);
HXLINE( 512)								::Array< bool > c1 = c->buffer->b;
HXDLIN( 512)								smooth = c1->__get((c->bPos + (int)1));
HXLINE( 513)								shaderBuffer = null();
HXLINE( 514)								fill = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 518)								{
HXLINE( 518)									 ::openfl::_internal::renderer::DrawCommandType _g3 = data->prev;
HXDLIN( 518)									switch((int)(_hx_getEnumValueIndex(_g3))){
            										case (int)0: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN( 518)											data32->oPos = (data32->oPos + (int)2);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN( 518)											data33->bPos = (data33->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN( 518)											data34->iPos = (data34->iPos + (int)1);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN( 518)											data35->fPos = (data35->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN( 518)											data36->oPos = (data36->oPos + (int)4);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN( 518)											data37->iiPos = (data37->iiPos + (int)2);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN( 518)											data38->ffPos = (data38->ffPos + (int)1);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN( 518)											data39->fPos = (data39->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN( 518)											data40->oPos = (data40->oPos + (int)1);
            										}
            										break;
            										case (int)4: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN( 518)											data41->fPos = (data41->fPos + (int)6);
            										}
            										break;
            										case (int)5: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN( 518)											data42->fPos = (data42->fPos + (int)4);
            										}
            										break;
            										case (int)6: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN( 518)											data43->fPos = (data43->fPos + (int)3);
            										}
            										break;
            										case (int)7: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN( 518)											data44->fPos = (data44->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN( 518)											data45->oPos = (data45->oPos + (int)3);
            										}
            										break;
            										case (int)9: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN( 518)											data46->fPos = (data46->fPos + (int)4);
            										}
            										break;
            										case (int)10: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN( 518)											data47->fPos = (data47->fPos + (int)5);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN( 518)											data48->oPos = (data48->oPos + (int)1);
            										}
            										break;
            										case (int)12: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN( 518)											data49->oPos = (data49->oPos + (int)4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN( 518)											data50->oPos = (data50->oPos + (int)2);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN( 518)											data51->bPos = (data51->bPos + (int)2);
            										}
            										break;
            										case (int)15: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN( 518)											data52->oPos = (data52->oPos + (int)4);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN( 518)											data53->iiPos = (data53->iiPos + (int)2);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN( 518)											data54->ffPos = (data54->ffPos + (int)1);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN( 518)											data55->fPos = (data55->fPos + (int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN( 518)											data56->oPos = (data56->oPos + (int)4);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN( 518)											data57->iPos = (data57->iPos + (int)1);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN( 518)											data58->fPos = (data58->fPos + (int)2);
HXDLIN( 518)											 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN( 518)											data59->bPos = (data59->bPos + (int)1);
            										}
            										break;
            										case (int)17: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN( 518)											data60->fPos = (data60->fPos + (int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN( 518)											data61->fPos = (data61->fPos + (int)2);
            										}
            										break;
            										case (int)19: {
HXLINE( 518)											 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN( 518)											data62->oPos = (data62->oPos + (int)1);
            										}
            										break;
            										case (int)20: case (int)21: {
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 518)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 518)								 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN( 518)								 ::openfl::_internal::renderer::DrawCommandReader c2 = this2;
HXLINE( 519)								int color = ::Std_obj::_hx_int(c2->buffer->i->__get(c2->iPos));
HXLINE( 520)								int alpha = ::Std_obj::_hx_int((c2->buffer->f->__get(c2->fPos) * (int)255));
HXLINE( 522)								fill = ((int)((int)color & (int)(int)16777215) | (int)((int)alpha << (int)(int)24));
HXLINE( 523)								shaderBuffer = null();
HXLINE( 524)								bitmap = null();
            							}
            							break;
            							case (int)3: {
HXLINE( 528)								{
HXLINE( 528)									 ::openfl::_internal::renderer::DrawCommandType _g4 = data->prev;
HXDLIN( 528)									switch((int)(_hx_getEnumValueIndex(_g4))){
            										case (int)0: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN( 528)											data63->oPos = (data63->oPos + (int)2);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN( 528)											data64->bPos = (data64->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN( 528)											data65->iPos = (data65->iPos + (int)1);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN( 528)											data66->fPos = (data66->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN( 528)											data67->oPos = (data67->oPos + (int)4);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN( 528)											data68->iiPos = (data68->iiPos + (int)2);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN( 528)											data69->ffPos = (data69->ffPos + (int)1);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN( 528)											data70->fPos = (data70->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN( 528)											data71->oPos = (data71->oPos + (int)1);
            										}
            										break;
            										case (int)4: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN( 528)											data72->fPos = (data72->fPos + (int)6);
            										}
            										break;
            										case (int)5: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN( 528)											data73->fPos = (data73->fPos + (int)4);
            										}
            										break;
            										case (int)6: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN( 528)											data74->fPos = (data74->fPos + (int)3);
            										}
            										break;
            										case (int)7: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN( 528)											data75->fPos = (data75->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN( 528)											data76->oPos = (data76->oPos + (int)3);
            										}
            										break;
            										case (int)9: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN( 528)											data77->fPos = (data77->fPos + (int)4);
            										}
            										break;
            										case (int)10: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN( 528)											data78->fPos = (data78->fPos + (int)5);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN( 528)											data79->oPos = (data79->oPos + (int)1);
            										}
            										break;
            										case (int)12: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN( 528)											data80->oPos = (data80->oPos + (int)4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN( 528)											data81->oPos = (data81->oPos + (int)2);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN( 528)											data82->bPos = (data82->bPos + (int)2);
            										}
            										break;
            										case (int)15: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN( 528)											data83->oPos = (data83->oPos + (int)4);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN( 528)											data84->iiPos = (data84->iiPos + (int)2);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN( 528)											data85->ffPos = (data85->ffPos + (int)1);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN( 528)											data86->fPos = (data86->fPos + (int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN( 528)											data87->oPos = (data87->oPos + (int)4);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN( 528)											data88->iPos = (data88->iPos + (int)1);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN( 528)											data89->fPos = (data89->fPos + (int)2);
HXDLIN( 528)											 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN( 528)											data90->bPos = (data90->bPos + (int)1);
            										}
            										break;
            										case (int)17: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN( 528)											data91->fPos = (data91->fPos + (int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN( 528)											data92->fPos = (data92->fPos + (int)2);
            										}
            										break;
            										case (int)19: {
HXLINE( 528)											 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN( 528)											data93->oPos = (data93->oPos + (int)1);
            										}
            										break;
            										case (int)20: case (int)21: {
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 528)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_SHADER_FILL_dyn();
HXDLIN( 528)								 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN( 528)								 ::openfl::_internal::renderer::DrawCommandReader c3 = this3;
HXLINE( 529)								shaderBuffer = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c3->buffer->o->__get(c3->oPos)) );
HXLINE( 531)								bool _hx_tmp6;
HXDLIN( 531)								bool _hx_tmp7;
HXDLIN( 531)								if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 531)									_hx_tmp7 = hx::IsNull( shaderBuffer->shader );
            								}
            								else {
HXLINE( 531)									_hx_tmp7 = true;
            								}
HXDLIN( 531)								if (!(_hx_tmp7)) {
HXLINE( 531)									_hx_tmp6 = hx::IsNull( shaderBuffer->shader->_hx___bitmap );
            								}
            								else {
HXLINE( 531)									_hx_tmp6 = true;
            								}
HXDLIN( 531)								if (_hx_tmp6) {
HXLINE( 533)									bitmap = null();
            								}
            								else {
HXLINE( 537)									bitmap = shaderBuffer->shader->_hx___bitmap->input;
            								}
HXLINE( 541)								fill = null();
            							}
            							break;
            							case (int)8: {
HXLINE( 545)								if (hx::IsNotNull( bitmap )) {
HXLINE( 547)									{
HXLINE( 547)										 ::openfl::_internal::renderer::DrawCommandType _g5 = data->prev;
HXDLIN( 547)										switch((int)(_hx_getEnumValueIndex(_g5))){
            											case (int)0: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN( 547)												data94->oPos = (data94->oPos + (int)2);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN( 547)												data95->bPos = (data95->bPos + (int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN( 547)												data96->iPos = (data96->iPos + (int)1);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN( 547)												data97->fPos = (data97->fPos + (int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN( 547)												data98->oPos = (data98->oPos + (int)4);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN( 547)												data99->iiPos = (data99->iiPos + (int)2);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN( 547)												data100->ffPos = (data100->ffPos + (int)1);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN( 547)												data101->fPos = (data101->fPos + (int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN( 547)												data102->oPos = (data102->oPos + (int)1);
            											}
            											break;
            											case (int)4: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN( 547)												data103->fPos = (data103->fPos + (int)6);
            											}
            											break;
            											case (int)5: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN( 547)												data104->fPos = (data104->fPos + (int)4);
            											}
            											break;
            											case (int)6: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN( 547)												data105->fPos = (data105->fPos + (int)3);
            											}
            											break;
            											case (int)7: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN( 547)												data106->fPos = (data106->fPos + (int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN( 547)												data107->oPos = (data107->oPos + (int)3);
            											}
            											break;
            											case (int)9: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN( 547)												data108->fPos = (data108->fPos + (int)4);
            											}
            											break;
            											case (int)10: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN( 547)												data109->fPos = (data109->fPos + (int)5);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN( 547)												data110->oPos = (data110->oPos + (int)1);
            											}
            											break;
            											case (int)12: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN( 547)												data111->oPos = (data111->oPos + (int)4);
            											}
            											break;
            											case (int)13: {
            											}
            											break;
            											case (int)14: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN( 547)												data112->oPos = (data112->oPos + (int)2);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN( 547)												data113->bPos = (data113->bPos + (int)2);
            											}
            											break;
            											case (int)15: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN( 547)												data114->oPos = (data114->oPos + (int)4);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN( 547)												data115->iiPos = (data115->iiPos + (int)2);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN( 547)												data116->ffPos = (data116->ffPos + (int)1);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN( 547)												data117->fPos = (data117->fPos + (int)1);
            											}
            											break;
            											case (int)16: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN( 547)												data118->oPos = (data118->oPos + (int)4);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN( 547)												data119->iPos = (data119->iPos + (int)1);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN( 547)												data120->fPos = (data120->fPos + (int)2);
HXDLIN( 547)												 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN( 547)												data121->bPos = (data121->bPos + (int)1);
            											}
            											break;
            											case (int)17: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN( 547)												data122->fPos = (data122->fPos + (int)2);
            											}
            											break;
            											case (int)18: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN( 547)												data123->fPos = (data123->fPos + (int)2);
            											}
            											break;
            											case (int)19: {
HXLINE( 547)												 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN( 547)												data124->oPos = (data124->oPos + (int)1);
            											}
            											break;
            											case (int)20: case (int)21: {
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 547)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_QUADS_dyn();
HXDLIN( 547)									 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN( 547)									 ::openfl::_internal::renderer::DrawCommandReader c4 = this4;
HXLINE( 548)									 ::openfl::_Vector::FloatVector rects = ( ( ::openfl::_Vector::FloatVector)(c4->buffer->o->__get(c4->oPos)) );
HXLINE( 549)									::cpp::VirtualArray c5 = c4->buffer->o;
HXDLIN( 549)									 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c5->__get((c4->oPos + (int)1))) );
HXLINE( 550)									::cpp::VirtualArray c6 = c4->buffer->o;
HXDLIN( 550)									 ::openfl::_Vector::FloatVector transforms = ( ( ::openfl::_Vector::FloatVector)(c6->__get((c4->oPos + (int)2))) );
HXLINE( 553)									::Array< Float > rects1;
HXDLIN( 553)									if (hx::IsNull( rects )) {
HXLINE( 553)										rects1 = null();
            									}
            									else {
HXLINE( 553)										rects1 = ( (::Array< Float >)(rects->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            									}
HXLINE( 554)									::Array< int > indices1;
HXDLIN( 554)									if (hx::IsNull( indices )) {
HXLINE( 554)										indices1 = null();
            									}
            									else {
HXLINE( 554)										indices1 = ( (::Array< int >)(indices->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            									}
HXLINE( 555)									::Array< Float > transforms1;
HXDLIN( 555)									if (hx::IsNull( transforms )) {
HXLINE( 555)										transforms1 = null();
            									}
            									else {
HXLINE( 555)										transforms1 = ( (::Array< Float >)(transforms->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            									}
HXLINE( 558)									bool hasIndices = hx::IsNotNull( indices1 );
HXLINE( 559)									int length;
HXDLIN( 559)									if (hasIndices) {
HXLINE( 559)										length = indices1->length;
            									}
            									else {
HXLINE( 559)										length = ::Math_obj::floor(((Float)rects1->length / (Float)(int)4));
            									}
HXLINE( 561)									::Array< Float > uMatrix = renderer->_hx___getMatrix(graphics->_hx___owner->_hx___renderTransform);
HXLINE( 562)									 ::openfl::display::Shader shader;
HXLINE( 564)									bool _hx_tmp8;
HXDLIN( 564)									if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 564)										_hx_tmp8 = !(::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender);
            									}
            									else {
HXLINE( 564)										_hx_tmp8 = false;
            									}
HXDLIN( 564)									if (_hx_tmp8) {
HXLINE( 566)										shader = renderer->_hx___initShaderBuffer(shaderBuffer);
HXLINE( 568)										renderer->_hx___setShaderBuffer(shaderBuffer);
HXLINE( 569)										renderer->applyMatrix(uMatrix);
HXLINE( 570)										renderer->applyBitmapData(bitmap,false,repeat);
HXLINE( 571)										renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 572)										renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 573)										renderer->_hx___updateShaderBuffer();
            									}
            									else {
HXLINE( 577)										if (::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender) {
HXLINE( 577)											shader = renderer->_hx___maskShader;
            										}
            										else {
HXLINE( 577)											shader = renderer->_hx___initGraphicsShader(null());
            										}
HXLINE( 578)										renderer->setShader(shader);
HXLINE( 579)										renderer->applyMatrix(uMatrix);
HXLINE( 580)										bool _hx_tmp9;
HXDLIN( 580)										if (renderer->_hx___allowSmoothing) {
HXLINE( 580)											_hx_tmp9 = smooth;
            										}
            										else {
HXLINE( 580)											_hx_tmp9 = false;
            										}
HXDLIN( 580)										renderer->applyBitmapData(bitmap,_hx_tmp9,repeat);
HXLINE( 581)										renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 582)										renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 583)										renderer->updateShader();
            									}
HXLINE( 587)									bool _hx_tmp10;
HXDLIN( 587)									if (hx::IsNotNull( graphics->_hx___buffer )) {
HXLINE( 587)										_hx_tmp10 = hx::IsNotEq( graphics->_hx___bufferContext,renderer->_hx___context );
            									}
            									else {
HXLINE( 587)										_hx_tmp10 = true;
            									}
HXDLIN( 587)									if (_hx_tmp10) {
HXLINE( 589)										graphics->_hx___bufferContext = renderer->_hx___context;
HXLINE( 590)										graphics->_hx___buffer = gl->createBuffer();
            									}
HXLINE( 594)									gl->bindBuffer(gl->ARRAY_BUFFER,graphics->_hx___buffer);
HXLINE( 596)									if (updatedBuffer) {
HXLINE( 598)										::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ARRAY_BUFFER,graphics->_hx___bufferData,gl->DYNAMIC_DRAW);
            									}
HXLINE( 602)									if (hx::IsNotNull( shader->_hx___position )) {
HXLINE( 602)										int indx = shader->_hx___position->index;
HXDLIN( 602)										int type1 = gl->FLOAT;
HXDLIN( 602)										gl->vertexAttribPointer(indx,(int)2,type1,false,(int)16,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((bufferPosition * (int)4)));
            									}
HXLINE( 603)									if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 603)										int indx1 = shader->_hx___textureCoord->index;
HXDLIN( 603)										int type2 = gl->FLOAT;
HXDLIN( 603)										gl->vertexAttribPointer(indx1,(int)2,type2,false,(int)16,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(((bufferPosition + (int)2) * (int)4)));
            									}
HXLINE( 605)									gl->drawArrays(gl->TRIANGLES,(int)0,(length * (int)6));
HXLINE( 606)									bufferPosition = (bufferPosition + (((int)4 * length) * (int)6));
HXLINE( 612)									renderer->_hx___clearShader();
            								}
            							}
            							break;
            							case (int)9: {
HXLINE( 618)								if (hx::IsNotNull( fill )) {
HXLINE( 620)									{
HXLINE( 620)										 ::openfl::_internal::renderer::DrawCommandType _g6 = data->prev;
HXDLIN( 620)										switch((int)(_hx_getEnumValueIndex(_g6))){
            											case (int)0: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN( 620)												data125->oPos = (data125->oPos + (int)2);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN( 620)												data126->bPos = (data126->bPos + (int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN( 620)												data127->iPos = (data127->iPos + (int)1);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN( 620)												data128->fPos = (data128->fPos + (int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 620)												data129->oPos = (data129->oPos + (int)4);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 620)												data130->iiPos = (data130->iiPos + (int)2);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 620)												data131->ffPos = (data131->ffPos + (int)1);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 620)												data132->fPos = (data132->fPos + (int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 620)												data133->oPos = (data133->oPos + (int)1);
            											}
            											break;
            											case (int)4: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 620)												data134->fPos = (data134->fPos + (int)6);
            											}
            											break;
            											case (int)5: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 620)												data135->fPos = (data135->fPos + (int)4);
            											}
            											break;
            											case (int)6: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 620)												data136->fPos = (data136->fPos + (int)3);
            											}
            											break;
            											case (int)7: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 620)												data137->fPos = (data137->fPos + (int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 620)												data138->oPos = (data138->oPos + (int)3);
            											}
            											break;
            											case (int)9: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 620)												data139->fPos = (data139->fPos + (int)4);
            											}
            											break;
            											case (int)10: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 620)												data140->fPos = (data140->fPos + (int)5);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 620)												data141->oPos = (data141->oPos + (int)1);
            											}
            											break;
            											case (int)12: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 620)												data142->oPos = (data142->oPos + (int)4);
            											}
            											break;
            											case (int)13: {
            											}
            											break;
            											case (int)14: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 620)												data143->oPos = (data143->oPos + (int)2);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 620)												data144->bPos = (data144->bPos + (int)2);
            											}
            											break;
            											case (int)15: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 620)												data145->oPos = (data145->oPos + (int)4);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 620)												data146->iiPos = (data146->iiPos + (int)2);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 620)												data147->ffPos = (data147->ffPos + (int)1);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 620)												data148->fPos = (data148->fPos + (int)1);
            											}
            											break;
            											case (int)16: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 620)												data149->oPos = (data149->oPos + (int)4);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 620)												data150->iPos = (data150->iPos + (int)1);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 620)												data151->fPos = (data151->fPos + (int)2);
HXDLIN( 620)												 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 620)												data152->bPos = (data152->bPos + (int)1);
            											}
            											break;
            											case (int)17: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 620)												data153->fPos = (data153->fPos + (int)2);
            											}
            											break;
            											case (int)18: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 620)												data154->fPos = (data154->fPos + (int)2);
            											}
            											break;
            											case (int)19: {
HXLINE( 620)												 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 620)												data155->oPos = (data155->oPos + (int)1);
            											}
            											break;
            											case (int)20: case (int)21: {
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 620)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 620)									 ::openfl::_internal::renderer::DrawCommandReader this5 = data;
HXDLIN( 620)									 ::openfl::_internal::renderer::DrawCommandReader c7 = this5;
HXLINE( 621)									Float x = c7->buffer->f->__get(c7->fPos);
HXLINE( 622)									::Array< Float > c8 = c7->buffer->f;
HXDLIN( 622)									Float y = c8->__get((c7->fPos + (int)1));
HXLINE( 623)									::Array< Float > c9 = c7->buffer->f;
HXDLIN( 623)									Float width1 = c9->__get((c7->fPos + (int)2));
HXLINE( 624)									::Array< Float > c10 = c7->buffer->f;
HXDLIN( 624)									Float height1 = c10->__get((c7->fPos + (int)3));
HXLINE( 626)									int color1 = fill;
HXLINE( 627)									::openfl::_internal::renderer::opengl::GLGraphics_obj::tempColorTransform->redOffset = ((int)hx::UShr(color1,(int)16) & (int)(int)255);
HXLINE( 628)									::openfl::_internal::renderer::opengl::GLGraphics_obj::tempColorTransform->greenOffset = ((int)hx::UShr(color1,(int)8) & (int)(int)255);
HXLINE( 629)									::openfl::_internal::renderer::opengl::GLGraphics_obj::tempColorTransform->blueOffset = ((int)color1 & (int)(int)255);
HXLINE( 630)									::openfl::_internal::renderer::opengl::GLGraphics_obj::tempColorTransform->_hx___combine(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 632)									matrix->identity();
HXLINE( 633)									matrix->scale(width1,height1);
HXLINE( 634)									matrix->tx = x;
HXLINE( 635)									matrix->ty = y;
HXLINE( 636)									matrix->concat(graphics->_hx___owner->_hx___renderTransform);
HXLINE( 638)									 ::openfl::display::Shader shader1;
HXDLIN( 638)									if (::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender) {
HXLINE( 638)										shader1 = renderer->_hx___maskShader;
            									}
            									else {
HXLINE( 638)										shader1 = renderer->_hx___initGraphicsShader(null());
            									}
HXLINE( 639)									renderer->setShader(shader1);
HXLINE( 640)									renderer->applyMatrix(renderer->_hx___getMatrix(matrix));
HXLINE( 641)									renderer->applyBitmapData(::openfl::_internal::renderer::opengl::GLGraphics_obj::blankBitmapData,renderer->_hx___allowSmoothing,repeat);
HXLINE( 642)									renderer->applyAlpha((((Float)((int)hx::UShr(color1,(int)24) & (int)(int)255) / (Float)(int)255) * graphics->_hx___owner->_hx___worldAlpha));
HXLINE( 643)									renderer->applyColorTransform(::openfl::_internal::renderer::opengl::GLGraphics_obj::tempColorTransform);
HXLINE( 644)									renderer->updateShader();
HXLINE( 646)									{
HXLINE( 646)										int target = gl->ARRAY_BUFFER;
HXDLIN( 646)										gl->bindBuffer(target,::openfl::_internal::renderer::opengl::GLGraphics_obj::blankBitmapData->getBuffer(renderer->_hx___context));
            									}
HXLINE( 647)									if (hx::IsNotNull( shader1->_hx___position )) {
HXLINE( 647)										int indx2 = shader1->_hx___position->index;
HXDLIN( 647)										int type3 = gl->FLOAT;
HXDLIN( 647)										gl->vertexAttribPointer(indx2,(int)3,type3,false,(int)56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
            									}
HXLINE( 648)									if (hx::IsNotNull( shader1->_hx___textureCoord )) {
HXLINE( 648)										int indx3 = shader1->_hx___textureCoord->index;
HXDLIN( 648)										int type4 = gl->FLOAT;
HXDLIN( 648)										gl->vertexAttribPointer(indx3,(int)2,type4,false,(int)56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
            									}
HXLINE( 649)									gl->drawArrays(gl->TRIANGLE_STRIP,(int)0,(int)4);
HXLINE( 655)									renderer->_hx___clearShader();
            								}
            							}
            							break;
            							case (int)12: {
HXLINE( 661)								{
HXLINE( 661)									 ::openfl::_internal::renderer::DrawCommandType _g7 = data->prev;
HXDLIN( 661)									switch((int)(_hx_getEnumValueIndex(_g7))){
            										case (int)0: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 661)											data156->oPos = (data156->oPos + (int)2);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 661)											data157->bPos = (data157->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 661)											data158->iPos = (data158->iPos + (int)1);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 661)											data159->fPos = (data159->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 661)											data160->oPos = (data160->oPos + (int)4);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 661)											data161->iiPos = (data161->iiPos + (int)2);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 661)											data162->ffPos = (data162->ffPos + (int)1);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 661)											data163->fPos = (data163->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 661)											data164->oPos = (data164->oPos + (int)1);
            										}
            										break;
            										case (int)4: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 661)											data165->fPos = (data165->fPos + (int)6);
            										}
            										break;
            										case (int)5: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 661)											data166->fPos = (data166->fPos + (int)4);
            										}
            										break;
            										case (int)6: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 661)											data167->fPos = (data167->fPos + (int)3);
            										}
            										break;
            										case (int)7: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 661)											data168->fPos = (data168->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 661)											data169->oPos = (data169->oPos + (int)3);
            										}
            										break;
            										case (int)9: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 661)											data170->fPos = (data170->fPos + (int)4);
            										}
            										break;
            										case (int)10: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 661)											data171->fPos = (data171->fPos + (int)5);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 661)											data172->oPos = (data172->oPos + (int)1);
            										}
            										break;
            										case (int)12: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 661)											data173->oPos = (data173->oPos + (int)4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 661)											data174->oPos = (data174->oPos + (int)2);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 661)											data175->bPos = (data175->bPos + (int)2);
            										}
            										break;
            										case (int)15: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 661)											data176->oPos = (data176->oPos + (int)4);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 661)											data177->iiPos = (data177->iiPos + (int)2);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 661)											data178->ffPos = (data178->ffPos + (int)1);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 661)											data179->fPos = (data179->fPos + (int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 661)											data180->oPos = (data180->oPos + (int)4);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 661)											data181->iPos = (data181->iPos + (int)1);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 661)											data182->fPos = (data182->fPos + (int)2);
HXDLIN( 661)											 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 661)											data183->bPos = (data183->bPos + (int)1);
            										}
            										break;
            										case (int)17: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 661)											data184->fPos = (data184->fPos + (int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 661)											data185->fPos = (data185->fPos + (int)2);
            										}
            										break;
            										case (int)19: {
HXLINE( 661)											 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 661)											data186->oPos = (data186->oPos + (int)1);
            										}
            										break;
            										case (int)20: case (int)21: {
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 661)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 661)								 ::openfl::_internal::renderer::DrawCommandReader this6 = data;
HXDLIN( 661)								 ::openfl::_internal::renderer::DrawCommandReader c11 = this6;
HXLINE( 662)								 ::openfl::_Vector::FloatVector vertices = ( ( ::openfl::_Vector::FloatVector)(c11->buffer->o->__get(c11->oPos)) );
HXLINE( 663)								::cpp::VirtualArray c12 = c11->buffer->o;
HXDLIN( 663)								 ::openfl::_Vector::IntVector indices2 = ( ( ::openfl::_Vector::IntVector)(c12->__get((c11->oPos + (int)1))) );
HXLINE( 664)								::cpp::VirtualArray c13 = c11->buffer->o;
HXDLIN( 664)								 ::openfl::_Vector::FloatVector uvtData = ( ( ::openfl::_Vector::FloatVector)(c13->__get((c11->oPos + (int)2))) );
HXLINE( 665)								::cpp::VirtualArray c14 = c11->buffer->o;
HXDLIN( 665)								 ::Dynamic culling = c14->__get((c11->oPos + (int)3));
HXLINE( 667)								bool hasIndices1 = hx::IsNotNull( indices2 );
HXLINE( 668)								int numVertices = ::Math_obj::floor(((Float)vertices->get_length() / (Float)(int)2));
HXLINE( 669)								int length1;
HXDLIN( 669)								if (hasIndices1) {
HXLINE( 669)									length1 = indices2->get_length();
            								}
            								else {
HXLINE( 669)									length1 = numVertices;
            								}
HXLINE( 671)								bool hasUVData = hx::IsNotNull( uvtData );
HXLINE( 672)								bool hasUVTData;
HXDLIN( 672)								if (hasUVData) {
HXLINE( 672)									int hasUVTData1 = uvtData->get_length();
HXDLIN( 672)									hasUVTData = (hasUVTData1 >= (numVertices * (int)3));
            								}
            								else {
HXLINE( 672)									hasUVTData = false;
            								}
HXLINE( 673)								int vertLength;
HXDLIN( 673)								if (hasUVTData) {
HXLINE( 673)									vertLength = (int)4;
            								}
            								else {
HXLINE( 673)									vertLength = (int)2;
            								}
HXLINE( 674)								int uvStride;
HXDLIN( 674)								if (hasUVTData) {
HXLINE( 674)									uvStride = (int)3;
            								}
            								else {
HXLINE( 674)									uvStride = (int)2;
            								}
HXLINE( 676)								int stride = (vertLength + (int)2);
HXLINE( 678)								::Array< Float > uMatrix1 = renderer->_hx___getMatrix(graphics->_hx___owner->_hx___renderTransform);
HXLINE( 679)								 ::openfl::display::Shader shader2;
HXLINE( 681)								bool _hx_tmp11;
HXDLIN( 681)								if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 681)									_hx_tmp11 = !(::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender);
            								}
            								else {
HXLINE( 681)									_hx_tmp11 = false;
            								}
HXDLIN( 681)								if (_hx_tmp11) {
HXLINE( 683)									shader2 = renderer->_hx___initShaderBuffer(shaderBuffer);
HXLINE( 685)									renderer->_hx___setShaderBuffer(shaderBuffer);
HXLINE( 686)									renderer->applyMatrix(uMatrix1);
HXLINE( 687)									renderer->applyBitmapData(bitmap,false,repeat);
HXLINE( 688)									renderer->applyAlpha((int)1);
HXLINE( 689)									renderer->applyColorTransform(null());
HXLINE( 690)									renderer->_hx___updateShaderBuffer();
            								}
            								else {
HXLINE( 694)									if (::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender) {
HXLINE( 694)										shader2 = renderer->_hx___maskShader;
            									}
            									else {
HXLINE( 694)										shader2 = renderer->_hx___initGraphicsShader(null());
            									}
HXLINE( 695)									renderer->setShader(shader2);
HXLINE( 696)									renderer->applyMatrix(uMatrix1);
HXLINE( 697)									bool _hx_tmp12;
HXDLIN( 697)									if (renderer->_hx___allowSmoothing) {
HXLINE( 697)										_hx_tmp12 = smooth;
            									}
            									else {
HXLINE( 697)										_hx_tmp12 = false;
            									}
HXDLIN( 697)									renderer->applyBitmapData(bitmap,_hx_tmp12,repeat);
HXLINE( 698)									renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 699)									renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 700)									renderer->updateShader();
            								}
HXLINE( 704)								bool _hx_tmp13;
HXDLIN( 704)								if (hx::IsNotNull( graphics->_hx___buffer )) {
HXLINE( 704)									_hx_tmp13 = hx::IsNotEq( graphics->_hx___bufferContext,renderer->_hx___context );
            								}
            								else {
HXLINE( 704)									_hx_tmp13 = true;
            								}
HXDLIN( 704)								if (_hx_tmp13) {
HXLINE( 706)									graphics->_hx___bufferContext = renderer->_hx___context;
HXLINE( 707)									graphics->_hx___buffer = gl->createBuffer();
            								}
HXLINE( 711)								gl->bindBuffer(gl->ARRAY_BUFFER,graphics->_hx___buffer);
HXLINE( 713)								if (updatedBuffer) {
HXLINE( 715)									::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ARRAY_BUFFER,graphics->_hx___bufferData,gl->DYNAMIC_DRAW);
            								}
HXLINE( 719)								if (hx::IsNotNull( shader2->_hx___position )) {
HXLINE( 719)									int indx4 = shader2->_hx___position->index;
HXDLIN( 719)									int type5 = gl->FLOAT;
HXDLIN( 719)									gl->vertexAttribPointer(indx4,vertLength,type5,false,(stride * (int)4),::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((bufferPosition * (int)4)));
            								}
HXLINE( 720)								if (hx::IsNotNull( shader2->_hx___textureCoord )) {
HXLINE( 720)									int indx5 = shader2->_hx___textureCoord->index;
HXDLIN( 720)									int type6 = gl->FLOAT;
HXDLIN( 720)									gl->vertexAttribPointer(indx5,(int)2,type6,false,(stride * (int)4),::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(((bufferPosition + vertLength) * (int)4)));
            								}
HXLINE( 722)								 ::Dynamic _hx_switch_0 = culling;
            								if (  (_hx_switch_0==(int)0) ){
HXLINE( 731)									gl->enable(gl->CULL_FACE);
HXLINE( 732)									gl->cullFace(gl->BACK);
HXLINE( 729)									goto _hx_goto_7;
            								}
            								if (  (_hx_switch_0==(int)2) ){
HXLINE( 726)									gl->enable(gl->CULL_FACE);
HXLINE( 727)									gl->cullFace(gl->FRONT);
HXLINE( 724)									goto _hx_goto_7;
            								}
            								/* default */{
            								}
            								_hx_goto_7:;
HXLINE( 738)								gl->drawArrays(gl->TRIANGLES,(int)0,length1);
HXLINE( 739)								bufferPosition = (bufferPosition + (stride * length1));
HXLINE( 741)								if (hx::IsNotEq( culling,(int)1 )) {
HXLINE( 743)									gl->disable(gl->CULL_FACE);
HXLINE( 744)									gl->cullFace(gl->BACK);
            								}
HXLINE( 752)								renderer->_hx___clearShader();
            							}
            							break;
            							case (int)13: {
HXLINE( 756)								bitmap = null();
HXLINE( 757)								fill = null();
HXLINE( 758)								shaderBuffer = null();
HXLINE( 759)								{
HXLINE( 759)									{
HXLINE( 759)										 ::openfl::_internal::renderer::DrawCommandType _g8 = data->prev;
HXDLIN( 759)										switch((int)(_hx_getEnumValueIndex(_g8))){
            											case (int)0: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN( 759)												data187->oPos = (data187->oPos + (int)2);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN( 759)												data188->bPos = (data188->bPos + (int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN( 759)												data189->iPos = (data189->iPos + (int)1);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN( 759)												data190->fPos = (data190->fPos + (int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN( 759)												data191->oPos = (data191->oPos + (int)4);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN( 759)												data192->iiPos = (data192->iiPos + (int)2);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN( 759)												data193->ffPos = (data193->ffPos + (int)1);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN( 759)												data194->fPos = (data194->fPos + (int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN( 759)												data195->oPos = (data195->oPos + (int)1);
            											}
            											break;
            											case (int)4: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN( 759)												data196->fPos = (data196->fPos + (int)6);
            											}
            											break;
            											case (int)5: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN( 759)												data197->fPos = (data197->fPos + (int)4);
            											}
            											break;
            											case (int)6: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN( 759)												data198->fPos = (data198->fPos + (int)3);
            											}
            											break;
            											case (int)7: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN( 759)												data199->fPos = (data199->fPos + (int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN( 759)												data200->oPos = (data200->oPos + (int)3);
            											}
            											break;
            											case (int)9: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN( 759)												data201->fPos = (data201->fPos + (int)4);
            											}
            											break;
            											case (int)10: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN( 759)												data202->fPos = (data202->fPos + (int)5);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN( 759)												data203->oPos = (data203->oPos + (int)1);
            											}
            											break;
            											case (int)12: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN( 759)												data204->oPos = (data204->oPos + (int)4);
            											}
            											break;
            											case (int)13: {
            											}
            											break;
            											case (int)14: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN( 759)												data205->oPos = (data205->oPos + (int)2);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN( 759)												data206->bPos = (data206->bPos + (int)2);
            											}
            											break;
            											case (int)15: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN( 759)												data207->oPos = (data207->oPos + (int)4);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN( 759)												data208->iiPos = (data208->iiPos + (int)2);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN( 759)												data209->ffPos = (data209->ffPos + (int)1);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN( 759)												data210->fPos = (data210->fPos + (int)1);
            											}
            											break;
            											case (int)16: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN( 759)												data211->oPos = (data211->oPos + (int)4);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN( 759)												data212->iPos = (data212->iPos + (int)1);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN( 759)												data213->fPos = (data213->fPos + (int)2);
HXDLIN( 759)												 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN( 759)												data214->bPos = (data214->bPos + (int)1);
            											}
            											break;
            											case (int)17: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN( 759)												data215->fPos = (data215->fPos + (int)2);
            											}
            											break;
            											case (int)18: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN( 759)												data216->fPos = (data216->fPos + (int)2);
            											}
            											break;
            											case (int)19: {
HXLINE( 759)												 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN( 759)												data217->oPos = (data217->oPos + (int)1);
            											}
            											break;
            											case (int)20: case (int)21: {
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 759)									data->prev = type;
            								}
            							}
            							break;
            							case (int)18: {
HXLINE( 763)								{
HXLINE( 763)									 ::openfl::_internal::renderer::DrawCommandType _g9 = data->prev;
HXDLIN( 763)									switch((int)(_hx_getEnumValueIndex(_g9))){
            										case (int)0: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN( 763)											data218->oPos = (data218->oPos + (int)2);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN( 763)											data219->bPos = (data219->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN( 763)											data220->iPos = (data220->iPos + (int)1);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN( 763)											data221->fPos = (data221->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN( 763)											data222->oPos = (data222->oPos + (int)4);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN( 763)											data223->iiPos = (data223->iiPos + (int)2);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN( 763)											data224->ffPos = (data224->ffPos + (int)1);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN( 763)											data225->fPos = (data225->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN( 763)											data226->oPos = (data226->oPos + (int)1);
            										}
            										break;
            										case (int)4: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN( 763)											data227->fPos = (data227->fPos + (int)6);
            										}
            										break;
            										case (int)5: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN( 763)											data228->fPos = (data228->fPos + (int)4);
            										}
            										break;
            										case (int)6: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN( 763)											data229->fPos = (data229->fPos + (int)3);
            										}
            										break;
            										case (int)7: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN( 763)											data230->fPos = (data230->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN( 763)											data231->oPos = (data231->oPos + (int)3);
            										}
            										break;
            										case (int)9: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN( 763)											data232->fPos = (data232->fPos + (int)4);
            										}
            										break;
            										case (int)10: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN( 763)											data233->fPos = (data233->fPos + (int)5);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN( 763)											data234->oPos = (data234->oPos + (int)1);
            										}
            										break;
            										case (int)12: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN( 763)											data235->oPos = (data235->oPos + (int)4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN( 763)											data236->oPos = (data236->oPos + (int)2);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN( 763)											data237->bPos = (data237->bPos + (int)2);
            										}
            										break;
            										case (int)15: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN( 763)											data238->oPos = (data238->oPos + (int)4);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN( 763)											data239->iiPos = (data239->iiPos + (int)2);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN( 763)											data240->ffPos = (data240->ffPos + (int)1);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN( 763)											data241->fPos = (data241->fPos + (int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN( 763)											data242->oPos = (data242->oPos + (int)4);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN( 763)											data243->iPos = (data243->iPos + (int)1);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN( 763)											data244->fPos = (data244->fPos + (int)2);
HXDLIN( 763)											 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN( 763)											data245->bPos = (data245->bPos + (int)1);
            										}
            										break;
            										case (int)17: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN( 763)											data246->fPos = (data246->fPos + (int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN( 763)											data247->fPos = (data247->fPos + (int)2);
            										}
            										break;
            										case (int)19: {
HXLINE( 763)											 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN( 763)											data248->oPos = (data248->oPos + (int)1);
            										}
            										break;
            										case (int)20: case (int)21: {
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 763)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 763)								 ::openfl::_internal::renderer::DrawCommandReader this7 = data;
HXDLIN( 763)								 ::openfl::_internal::renderer::DrawCommandReader c15 = this7;
HXLINE( 764)								positionX = c15->buffer->f->__get(c15->fPos);
HXLINE( 765)								::Array< Float > c16 = c15->buffer->f;
HXDLIN( 765)								positionY = c16->__get((c15->fPos + (int)1));
            							}
            							break;
            							default:{
HXLINE( 769)								{
HXLINE( 769)									 ::openfl::_internal::renderer::DrawCommandType _g10 = data->prev;
HXDLIN( 769)									switch((int)(_hx_getEnumValueIndex(_g10))){
            										case (int)0: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data249 = data;
HXDLIN( 769)											data249->oPos = (data249->oPos + (int)2);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data250 = data;
HXDLIN( 769)											data250->bPos = (data250->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data251 = data;
HXDLIN( 769)											data251->iPos = (data251->iPos + (int)1);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data252 = data;
HXDLIN( 769)											data252->fPos = (data252->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data253 = data;
HXDLIN( 769)											data253->oPos = (data253->oPos + (int)4);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data254 = data;
HXDLIN( 769)											data254->iiPos = (data254->iiPos + (int)2);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data255 = data;
HXDLIN( 769)											data255->ffPos = (data255->ffPos + (int)1);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data256 = data;
HXDLIN( 769)											data256->fPos = (data256->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data257 = data;
HXDLIN( 769)											data257->oPos = (data257->oPos + (int)1);
            										}
            										break;
            										case (int)4: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data258 = data;
HXDLIN( 769)											data258->fPos = (data258->fPos + (int)6);
            										}
            										break;
            										case (int)5: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data259 = data;
HXDLIN( 769)											data259->fPos = (data259->fPos + (int)4);
            										}
            										break;
            										case (int)6: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data260 = data;
HXDLIN( 769)											data260->fPos = (data260->fPos + (int)3);
            										}
            										break;
            										case (int)7: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data261 = data;
HXDLIN( 769)											data261->fPos = (data261->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data262 = data;
HXDLIN( 769)											data262->oPos = (data262->oPos + (int)3);
            										}
            										break;
            										case (int)9: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data263 = data;
HXDLIN( 769)											data263->fPos = (data263->fPos + (int)4);
            										}
            										break;
            										case (int)10: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data264 = data;
HXDLIN( 769)											data264->fPos = (data264->fPos + (int)5);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data265 = data;
HXDLIN( 769)											data265->oPos = (data265->oPos + (int)1);
            										}
            										break;
            										case (int)12: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data266 = data;
HXDLIN( 769)											data266->oPos = (data266->oPos + (int)4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data267 = data;
HXDLIN( 769)											data267->oPos = (data267->oPos + (int)2);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data268 = data;
HXDLIN( 769)											data268->bPos = (data268->bPos + (int)2);
            										}
            										break;
            										case (int)15: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data269 = data;
HXDLIN( 769)											data269->oPos = (data269->oPos + (int)4);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data270 = data;
HXDLIN( 769)											data270->iiPos = (data270->iiPos + (int)2);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data271 = data;
HXDLIN( 769)											data271->ffPos = (data271->ffPos + (int)1);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data272 = data;
HXDLIN( 769)											data272->fPos = (data272->fPos + (int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data273 = data;
HXDLIN( 769)											data273->oPos = (data273->oPos + (int)4);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data274 = data;
HXDLIN( 769)											data274->iPos = (data274->iPos + (int)1);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data275 = data;
HXDLIN( 769)											data275->fPos = (data275->fPos + (int)2);
HXDLIN( 769)											 ::openfl::_internal::renderer::DrawCommandReader data276 = data;
HXDLIN( 769)											data276->bPos = (data276->bPos + (int)1);
            										}
            										break;
            										case (int)17: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data277 = data;
HXDLIN( 769)											data277->fPos = (data277->fPos + (int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data278 = data;
HXDLIN( 769)											data278->fPos = (data278->fPos + (int)2);
            										}
            										break;
            										case (int)19: {
HXLINE( 769)											 ::openfl::_internal::renderer::DrawCommandReader data279 = data;
HXDLIN( 769)											data279->oPos = (data279->oPos + (int)1);
            										}
            										break;
            										case (int)20: case (int)21: {
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 769)								data->prev = type;
            							}
            						}
            					}
            				}
HXLINE( 775)				::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            			}
HXLINE( 779)			graphics->set___dirty(false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLGraphics_obj,render,(void))

void GLGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_786_renderMask)
HXLINE( 790)		::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender = true;
HXLINE( 791)		::openfl::_internal::renderer::opengl::GLGraphics_obj::render(graphics,renderer);
HXLINE( 792)		::openfl::_internal::renderer::opengl::GLGraphics_obj::maskRender = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLGraphics_obj,renderMask,(void))

void GLGraphics_obj::resizeBuffer( ::openfl::display::Graphics graphics,int length){
            	HX_GC_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_797_resizeBuffer)
HXLINE( 799)		if (hx::IsNull( graphics->_hx___bufferData )) {
HXLINE( 801)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 801)			if (hx::IsNotNull( length )) {
HXLINE( 801)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,(int)8);
            			}
            			else {
HXLINE( 801)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 801)			graphics->_hx___bufferData = this1;
            		}
            		else {
HXLINE( 803)			if ((length > graphics->_hx___bufferData->length)) {
HXLINE( 805)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 805)				if (hx::IsNotNull( length )) {
HXLINE( 805)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,(int)8);
            				}
            				else {
HXLINE( 805)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXDLIN( 805)				 ::lime::utils::ArrayBufferView buffer = this2;
HXLINE( 806)				{
HXLINE( 806)					 ::lime::utils::ArrayBufferView view = graphics->_hx___bufferData;
HXDLIN( 806)					int offset = (int)0;
HXDLIN( 806)					if (hx::IsNotNull( view )) {
HXLINE( 806)						 ::haxe::io::Bytes buffer1 = buffer->buffer;
HXDLIN( 806)						buffer1->blit((offset * buffer->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            					}
            					else {
HXLINE( 806)						HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            					}
            				}
HXLINE( 807)				graphics->_hx___bufferData = buffer;
            			}
            		}
HXLINE( 811)		graphics->_hx___bufferLength = length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLGraphics_obj,resizeBuffer,(void))


GLGraphics_obj::GLGraphics_obj()
{
}

bool GLGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maskRender") ) { outValue = ( maskRender ); return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buildBuffer") ) { outValue = buildBuffer_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isCompatible") ) { outValue = isCompatible_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blankBitmapData") ) { outValue = ( blankBitmapData ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tempColorTransform") ) { outValue = ( tempColorTransform ); return true; }
	}
	return false;
}

bool GLGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"maskRender") ) { maskRender=ioValue.Cast< bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blankBitmapData") ) { blankBitmapData=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tempColorTransform") ) { tempColorTransform=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GLGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &GLGraphics_obj::blankBitmapData,HX_HCSTRING("blankBitmapData","\x2d","\x8a","\x0b","\xdf")},
	{hx::fsBool,(void *) &GLGraphics_obj::maskRender,HX_HCSTRING("maskRender","\x62","\x99","\x0d","\x1a")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(void *) &GLGraphics_obj::tempColorTransform,HX_HCSTRING("tempColorTransform","\xbd","\xe9","\xa6","\x54")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GLGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLGraphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GLGraphics_obj::blankBitmapData,"blankBitmapData");
	HX_MARK_MEMBER_NAME(GLGraphics_obj::maskRender,"maskRender");
	HX_MARK_MEMBER_NAME(GLGraphics_obj::tempColorTransform,"tempColorTransform");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLGraphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GLGraphics_obj::blankBitmapData,"blankBitmapData");
	HX_VISIT_MEMBER_NAME(GLGraphics_obj::maskRender,"maskRender");
	HX_VISIT_MEMBER_NAME(GLGraphics_obj::tempColorTransform,"tempColorTransform");
};

#endif

hx::Class GLGraphics_obj::__mClass;

static ::String GLGraphics_obj_sStaticFields[] = {
	HX_HCSTRING("blankBitmapData","\x2d","\x8a","\x0b","\xdf"),
	HX_HCSTRING("maskRender","\x62","\x99","\x0d","\x1a"),
	HX_HCSTRING("tempColorTransform","\xbd","\xe9","\xa6","\x54"),
	HX_HCSTRING("buildBuffer","\xce","\xa2","\x05","\x21"),
	HX_HCSTRING("isCompatible","\xde","\x03","\x42","\x0a"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	::String(null())
};

void GLGraphics_obj::__register()
{
	hx::Object *dummy = new GLGraphics_obj;
	GLGraphics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLGraphics","\xf4","\x19","\xc7","\xf9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &GLGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = GLGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GLGraphics_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_43_boot)
HXDLIN(  43)		blankBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)1,false,(int)0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_cf8846fcc1aefa4f_45_boot)
HXDLIN(  45)		tempColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1,(int)0,(int)0,(int)0,(int)0);
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
