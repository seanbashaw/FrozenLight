// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_atf_ATFReader
#include <openfl/_internal/stage3D/atf/ATFReader.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLCubeTexture
#include <openfl/_internal/stage3D/opengl/GLCubeTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLTextureBase
#include <openfl/_internal/stage3D/opengl/GLTextureBase.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_40_create,"openfl._internal.stage3D.opengl.GLCubeTexture","create",0x48ed39b9,"openfl._internal.stage3D.opengl.GLCubeTexture.create","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",40,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_70_uploadCompressedTextureFromByteArray,"openfl._internal.stage3D.opengl.GLCubeTexture","uploadCompressedTextureFromByteArray",0xdef8954b,"openfl._internal.stage3D.opengl.GLCubeTexture.uploadCompressedTextureFromByteArray","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",70,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_54_uploadCompressedTextureFromByteArray,"openfl._internal.stage3D.opengl.GLCubeTexture","uploadCompressedTextureFromByteArray",0xdef8954b,"openfl._internal.stage3D.opengl.GLCubeTexture.uploadCompressedTextureFromByteArray","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",54,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_131_uploadFromBitmapData,"openfl._internal.stage3D.opengl.GLCubeTexture","uploadFromBitmapData",0x29d3c921,"openfl._internal.stage3D.opengl.GLCubeTexture.uploadFromBitmapData","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",131,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_186_uploadFromByteArray,"openfl._internal.stage3D.opengl.GLCubeTexture","uploadFromByteArray",0x83789309,"openfl._internal.stage3D.opengl.GLCubeTexture.uploadFromByteArray","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",186,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_191_uploadFromTypedArray,"openfl._internal.stage3D.opengl.GLCubeTexture","uploadFromTypedArray",0xee62c037,"openfl._internal.stage3D.opengl.GLCubeTexture.uploadFromTypedArray","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",191,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_222_setSamplerState,"openfl._internal.stage3D.opengl.GLCubeTexture","setSamplerState",0x1748244e,"openfl._internal.stage3D.opengl.GLCubeTexture.setSamplerState","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",222,0x3a88686b)
HX_LOCAL_STACK_FRAME(_hx_pos_265aa4370dc0ac3c_255___sideToTarget,"openfl._internal.stage3D.opengl.GLCubeTexture","__sideToTarget",0x9965aec0,"openfl._internal.stage3D.opengl.GLCubeTexture.__sideToTarget","openfl/_internal/stage3D/opengl/GLCubeTexture.hx",255,0x3a88686b)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLCubeTexture_obj::__construct() { }

Dynamic GLCubeTexture_obj::__CreateEmpty() { return new GLCubeTexture_obj; }

void *GLCubeTexture_obj::_hx_vtable = 0;

Dynamic GLCubeTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLCubeTexture_obj > _hx_result = new GLCubeTexture_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLCubeTexture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0147a12f;
}

void GLCubeTexture_obj::create( ::openfl::display3D::textures::CubeTexture cubeTexture, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_40_create)
HXLINE(  43)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE(  48)		cubeTexture->_hx___textureTarget = gl->TEXTURE_CUBE_MAP;
HXLINE(  49)		cubeTexture->_hx___uploadedSides = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLCubeTexture_obj,create,(void))

void GLCubeTexture_obj::uploadCompressedTextureFromByteArray( ::openfl::display3D::textures::CubeTexture cubeTexture, ::openfl::display::OpenGLRenderer renderer, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(7)
            		void _hx_run(int side,int level,int gpuFormat,int width,int height,int blockLength, ::haxe::io::Bytes bytes){
            			HX_GC_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_70_uploadCompressedTextureFromByteArray)
            		}
            		HX_END_LOCAL_FUNC7((void))

            	HX_GC_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_54_uploadCompressedTextureFromByteArray)
HXLINE(  56)		 ::openfl::_internal::stage3D::atf::ATFReader reader =  ::openfl::_internal::stage3D::atf::ATFReader_obj::__alloc( HX_CTX ,data,byteArrayOffset);
HXLINE(  57)		bool alpha = reader->readHeader(cubeTexture->_hx___size,cubeTexture->_hx___size,true);
HXLINE(  60)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE(  65)		gl->bindTexture(cubeTexture->_hx___textureTarget,cubeTexture->_hx___textureID);
HXLINE(  66)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  68)		bool hasTexture = false;
HXLINE(  70)		reader->readTextures( ::Dynamic(new _hx_Closure_0()));
HXLINE( 113)		if (!(hasTexture)) {
HXLINE( 115)			int _g = (int)0;
HXDLIN( 115)			while((_g < (int)6)){
HXLINE( 115)				_g = (_g + (int)1);
HXDLIN( 115)				int side1 = (_g - (int)1);
HXLINE( 117)				 ::Dynamic elements = ((cubeTexture->_hx___size * cubeTexture->_hx___size) * (int)4);
HXDLIN( 117)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 117)				if (hx::IsNotNull( elements )) {
HXLINE( 117)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            				}
            				else {
HXLINE( 117)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXDLIN( 117)				 ::lime::utils::ArrayBufferView data1 = this1;
HXLINE( 118)				{
HXLINE( 118)					int target = ::openfl::_internal::stage3D::opengl::GLCubeTexture_obj::_hx___sideToTarget(renderer->_hx___context,side1);
HXDLIN( 118)					int internalformat = cubeTexture->_hx___internalFormat;
HXDLIN( 118)					int width1 = cubeTexture->_hx___size;
HXDLIN( 118)					int height1 = cubeTexture->_hx___size;
HXDLIN( 118)					int format = cubeTexture->_hx___format;
HXDLIN( 118)					int type = gl->UNSIGNED_BYTE;
HXDLIN( 118)					{
HXLINE( 118)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data1,null(),(int)0);
HXDLIN( 118)						gl->texImage2D(target,(int)0,internalformat,width1,height1,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
HXLINE( 119)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            		}
HXLINE( 125)		gl->bindTexture(cubeTexture->_hx___textureTarget,null());
HXLINE( 126)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLCubeTexture_obj,uploadCompressedTextureFromByteArray,(void))

void GLCubeTexture_obj::uploadFromBitmapData( ::openfl::display3D::textures::CubeTexture cubeTexture, ::openfl::display::OpenGLRenderer renderer, ::openfl::display::BitmapData source,int side,hx::Null< int >  __o_miplevel,hx::Null< bool >  __o_generateMipmap){
int miplevel = __o_miplevel.Default(0);
bool generateMipmap = __o_generateMipmap.Default(false);
            	HX_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_131_uploadFromBitmapData)
HXLINE( 133)		int size = ((int)cubeTexture->_hx___size >> (int)miplevel);
HXLINE( 134)		if ((size == (int)0)) {
HXLINE( 134)			return;
            		}
HXLINE( 136)		 ::lime::graphics::Image image = cubeTexture->_hx___getImage(source);
HXLINE( 137)		if (hx::IsNull( image )) {
HXLINE( 137)			return;
            		}
HXLINE( 170)		::openfl::_internal::stage3D::opengl::GLCubeTexture_obj::uploadFromTypedArray(cubeTexture,renderer,image->get_data(),side,miplevel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLCubeTexture_obj,uploadFromBitmapData,(void))

void GLCubeTexture_obj::uploadFromByteArray( ::openfl::display3D::textures::CubeTexture cubeTexture, ::openfl::display::OpenGLRenderer renderer, ::openfl::utils::ByteArrayData data,int byteArrayOffset,int side,int miplevel){
            	HX_GC_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_186_uploadFromByteArray)
HXDLIN( 186)		 ::haxe::io::Bytes buffer = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 186)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 186)		if (hx::IsNotNull( buffer )) {
HXDLIN( 186)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 186)			int in_byteOffset = byteArrayOffset;
HXDLIN( 186)			if ((in_byteOffset < (int)0)) {
HXDLIN( 186)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 186)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXDLIN( 186)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 186)			int bufferByteLength = buffer->length;
HXDLIN( 186)			int elementSize = _this->bytesPerElement;
HXDLIN( 186)			int newByteLength = bufferByteLength;
HXDLIN( 186)			{
HXDLIN( 186)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 186)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXDLIN( 186)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 186)				if ((newByteLength < (int)0)) {
HXDLIN( 186)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 186)			_this->buffer = buffer;
HXDLIN( 186)			_this->byteOffset = in_byteOffset;
HXDLIN( 186)			_this->byteLength = newByteLength;
HXDLIN( 186)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 186)			this1 = _this;
            		}
            		else {
HXDLIN( 186)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 186)		::openfl::_internal::stage3D::opengl::GLCubeTexture_obj::uploadFromTypedArray(cubeTexture,renderer,this1,side,miplevel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLCubeTexture_obj,uploadFromByteArray,(void))

void GLCubeTexture_obj::uploadFromTypedArray( ::openfl::display3D::textures::CubeTexture cubeTexture, ::openfl::display::OpenGLRenderer renderer, ::lime::utils::ArrayBufferView data,int side,int miplevel){
            	HX_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_191_uploadFromTypedArray)
HXLINE( 193)		if (hx::IsNull( data )) {
HXLINE( 193)			return;
            		}
HXLINE( 195)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE( 200)		int size = ((int)cubeTexture->_hx___size >> (int)miplevel);
HXLINE( 201)		if ((size == (int)0)) {
HXLINE( 201)			return;
            		}
HXLINE( 203)		int target = ::openfl::_internal::stage3D::opengl::GLCubeTexture_obj::_hx___sideToTarget(renderer->_hx___context,side);
HXLINE( 205)		gl->bindTexture(gl->TEXTURE_CUBE_MAP,cubeTexture->_hx___textureID);
HXLINE( 206)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 208)		{
HXLINE( 208)			int internalformat = cubeTexture->_hx___internalFormat;
HXDLIN( 208)			int format = cubeTexture->_hx___format;
HXDLIN( 208)			int type = gl->UNSIGNED_BYTE;
HXDLIN( 208)			{
HXLINE( 208)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data,null(),(int)0);
HXDLIN( 208)				gl->texImage2D(target,miplevel,internalformat,size,size,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE( 209)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 211)		gl->bindTexture(cubeTexture->_hx___textureTarget,null());
HXLINE( 212)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 214)		 ::openfl::display3D::textures::CubeTexture cubeTexture1 = cubeTexture;
HXDLIN( 214)		cubeTexture1->_hx___uploadedSides = ((int)cubeTexture1->_hx___uploadedSides | (int)((int)(int)1 << (int)side));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLCubeTexture_obj,uploadFromTypedArray,(void))

void GLCubeTexture_obj::setSamplerState( ::openfl::display3D::textures::CubeTexture cubeTexture, ::openfl::display::OpenGLRenderer renderer, ::openfl::_internal::stage3D::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_222_setSamplerState)
HXLINE( 224)		if (!(state->equals(cubeTexture->_hx___samplerState))) {
HXLINE( 227)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE( 232)			bool _hx_tmp;
HXDLIN( 232)			bool _hx_tmp1;
HXDLIN( 232)			if ((state->minFilter != gl->NEAREST)) {
HXLINE( 232)				_hx_tmp1 = (state->minFilter != gl->LINEAR);
            			}
            			else {
HXLINE( 232)				_hx_tmp1 = false;
            			}
HXDLIN( 232)			if (_hx_tmp1) {
HXLINE( 232)				_hx_tmp = !(state->mipmapGenerated);
            			}
            			else {
HXLINE( 232)				_hx_tmp = false;
            			}
HXDLIN( 232)			if (_hx_tmp) {
HXLINE( 234)				gl->generateMipmap(gl->TEXTURE_CUBE_MAP);
HXLINE( 235)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 237)				state->mipmapGenerated = true;
            			}
HXLINE( 241)			if ((state->maxAniso != ((Float)0.0))) {
HXLINE( 243)				gl->texParameterf(gl->TEXTURE_CUBE_MAP,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,state->maxAniso);
HXLINE( 244)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            		}
HXLINE( 250)		::openfl::_internal::stage3D::opengl::GLTextureBase_obj::setSamplerState(cubeTexture,renderer,state);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLCubeTexture_obj,setSamplerState,(void))

int GLCubeTexture_obj::_hx___sideToTarget( ::lime::graphics::RenderContext context,int side){
            	HX_GC_STACKFRAME(&_hx_pos_265aa4370dc0ac3c_255___sideToTarget)
HXLINE( 258)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE( 263)		switch((int)(side)){
            			case (int)0: {
HXLINE( 265)				return gl->TEXTURE_CUBE_MAP_POSITIVE_X;
            			}
            			break;
            			case (int)1: {
HXLINE( 266)				return gl->TEXTURE_CUBE_MAP_NEGATIVE_X;
            			}
            			break;
            			case (int)2: {
HXLINE( 267)				return gl->TEXTURE_CUBE_MAP_POSITIVE_Y;
            			}
            			break;
            			case (int)3: {
HXLINE( 268)				return gl->TEXTURE_CUBE_MAP_NEGATIVE_Y;
            			}
            			break;
            			case (int)4: {
HXLINE( 269)				return gl->TEXTURE_CUBE_MAP_POSITIVE_Z;
            			}
            			break;
            			case (int)5: {
HXLINE( 270)				return gl->TEXTURE_CUBE_MAP_NEGATIVE_Z;
            			}
            			break;
            			default:{
HXLINE( 271)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            		}
HXLINE( 263)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLCubeTexture_obj,_hx___sideToTarget,return )


GLCubeTexture_obj::GLCubeTexture_obj()
{
}

bool GLCubeTexture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__sideToTarget") ) { outValue = _hx___sideToTarget_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setSamplerState") ) { outValue = setSamplerState_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { outValue = uploadFromByteArray_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromBitmapData") ) { outValue = uploadFromBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { outValue = uploadFromTypedArray_dyn(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"uploadCompressedTextureFromByteArray") ) { outValue = uploadCompressedTextureFromByteArray_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLCubeTexture_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLCubeTexture_obj_sStaticStorageInfo = 0;
#endif

static void GLCubeTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLCubeTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLCubeTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLCubeTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class GLCubeTexture_obj::__mClass;

static ::String GLCubeTexture_obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("uploadCompressedTextureFromByteArray","\xce","\xc7","\x86","\xc5"),
	HX_HCSTRING("uploadFromBitmapData","\xa4","\x85","\x65","\x0d"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromTypedArray","\xba","\x7c","\xf4","\xd1"),
	HX_HCSTRING("setSamplerState","\xab","\xb6","\x75","\xda"),
	HX_HCSTRING("__sideToTarget","\x03","\x57","\x2b","\x63"),
	::String(null())
};

void GLCubeTexture_obj::__register()
{
	hx::Object *dummy = new GLCubeTexture_obj;
	GLCubeTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLCubeTexture","\x11","\x18","\x4a","\x30");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLCubeTexture_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLCubeTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLCubeTexture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLCubeTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLCubeTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLCubeTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLCubeTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
