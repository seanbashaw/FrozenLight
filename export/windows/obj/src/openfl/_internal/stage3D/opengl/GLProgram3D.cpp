// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLProgram3D
#include <openfl/_internal/stage3D/opengl/GLProgram3D.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_UniformMap
#include <openfl/display3D/UniformMap.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_43_dispose,"openfl._internal.stage3D.opengl.GLProgram3D","dispose",0x3b9f1d51,"openfl._internal.stage3D.opengl.GLProgram3D.dispose","openfl/_internal/stage3D/opengl/GLProgram3D.hx",43,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_53_flushUniform,"openfl._internal.stage3D.opengl.GLProgram3D","flushUniform",0xe207c4de,"openfl._internal.stage3D.opengl.GLProgram3D.flushUniform","openfl/_internal/stage3D/opengl/GLProgram3D.hx",53,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_97_setPositionScale,"openfl._internal.stage3D.opengl.GLProgram3D","setPositionScale",0x9d716d2d,"openfl._internal.stage3D.opengl.GLProgram3D.setPositionScale","openfl/_internal/stage3D/opengl/GLProgram3D.hx",97,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_110_upload,"openfl._internal.stage3D.opengl.GLProgram3D","upload",0xb766c98f,"openfl._internal.stage3D.opengl.GLProgram3D.upload","openfl/_internal/stage3D/opengl/GLProgram3D.hx",110,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_132_use,"openfl._internal.stage3D.opengl.GLProgram3D","use",0xe3cf07f9,"openfl._internal.stage3D.opengl.GLProgram3D.use","openfl/_internal/stage3D/opengl/GLProgram3D.hx",132,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_196___buildUniformList,"openfl._internal.stage3D.opengl.GLProgram3D","__buildUniformList",0xfd9632d2,"openfl._internal.stage3D.opengl.GLProgram3D.__buildUniformList","openfl/_internal/stage3D/opengl/GLProgram3D.hx",196,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_309___deleteShaders,"openfl._internal.stage3D.opengl.GLProgram3D","__deleteShaders",0x2febec55,"openfl._internal.stage3D.opengl.GLProgram3D.__deleteShaders","openfl/_internal/stage3D/opengl/GLProgram3D.hx",309,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_359___getUniformRegisters,"openfl._internal.stage3D.opengl.GLProgram3D","__getUniformRegisters",0x92cc02a4,"openfl._internal.stage3D.opengl.GLProgram3D.__getUniformRegisters","openfl/_internal/stage3D/opengl/GLProgram3D.hx",359,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_368___uploadFromGLSL,"openfl._internal.stage3D.opengl.GLProgram3D","__uploadFromGLSL",0x077273b7,"openfl._internal.stage3D.opengl.GLProgram3D.__uploadFromGLSL","openfl/_internal/stage3D/opengl/GLProgram3D.hx",368,0xab62753c)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLProgram3D_obj::__construct() { }

Dynamic GLProgram3D_obj::__CreateEmpty() { return new GLProgram3D_obj; }

void *GLProgram3D_obj::_hx_vtable = 0;

Dynamic GLProgram3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLProgram3D_obj > _hx_result = new GLProgram3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLProgram3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x078460be;
}

 ::openfl::display3D::Program3D GLProgram3D_obj::program;

 ::openfl::display::OpenGLRenderer GLProgram3D_obj::renderer;

void GLProgram3D_obj::dispose( ::openfl::display3D::Program3D program, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_43_dispose)
HXLINE(  45)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program = program;
HXLINE(  46)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer = renderer;
HXLINE(  48)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___deleteShaders();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,dispose,(void))

void GLProgram3D_obj::flushUniform( ::openfl::display3D::Uniform uniform, ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_53_flushUniform)
HXLINE(  63)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer->_hx___context->gles2;
HXLINE(  69)		int index = (uniform->regIndex * (int)4);
HXLINE(  70)		{
HXLINE(  70)			int _g = uniform->type;
HXDLIN(  70)			switch((int)(_g)){
            				case (int)35664: {
HXLINE(  84)					int location = uniform->location;
HXDLIN(  84)					int count = uniform->regCount;
HXDLIN(  84)					int size = (uniform->regCount * (int)2);
HXDLIN(  84)					 ::lime::utils::BytePointerData uniform1 = uniform->regDataPointer;
HXDLIN(  84)					 ::lime::utils::ArrayBufferView uniform2 = uniform->regData;
HXDLIN(  84)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform1,null(),uniform2,null(),(index * (int)4));
HXDLIN(  84)					gl->uniform2fv(location,count,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35665: {
HXLINE(  85)					int location1 = uniform->location;
HXDLIN(  85)					int count1 = uniform->regCount;
HXDLIN(  85)					int size1 = (uniform->regCount * (int)3);
HXDLIN(  85)					 ::lime::utils::BytePointerData uniform3 = uniform->regDataPointer;
HXDLIN(  85)					 ::lime::utils::ArrayBufferView uniform4 = uniform->regData;
HXDLIN(  85)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform3,null(),uniform4,null(),(index * (int)4));
HXDLIN(  85)					gl->uniform3fv(location1,count1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35666: {
HXLINE(  86)					int location2 = uniform->location;
HXDLIN(  86)					int count2 = uniform->regCount;
HXDLIN(  86)					int size2 = (uniform->regCount * (int)4);
HXDLIN(  86)					 ::lime::utils::BytePointerData uniform5 = uniform->regDataPointer;
HXDLIN(  86)					 ::lime::utils::ArrayBufferView uniform6 = uniform->regData;
HXDLIN(  86)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform5,null(),uniform6,null(),(index * (int)4));
HXDLIN(  86)					gl->uniform4fv(location2,count2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35674: {
HXLINE(  81)					int location3 = uniform->location;
HXDLIN(  81)					int count3 = uniform->size;
HXDLIN(  81)					int size3 = ((uniform->size * (int)2) * (int)2);
HXDLIN(  81)					 ::lime::utils::BytePointerData uniform7 = uniform->regDataPointer;
HXDLIN(  81)					 ::lime::utils::ArrayBufferView uniform8 = uniform->regData;
HXDLIN(  81)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform7,null(),uniform8,null(),(index * (int)4));
HXDLIN(  81)					gl->uniformMatrix2fv(location3,count3,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35675: {
HXLINE(  82)					int location4 = uniform->location;
HXDLIN(  82)					int count4 = uniform->size;
HXDLIN(  82)					int size4 = ((uniform->size * (int)3) * (int)3);
HXDLIN(  82)					 ::lime::utils::BytePointerData uniform9 = uniform->regDataPointer;
HXDLIN(  82)					 ::lime::utils::ArrayBufferView uniform10 = uniform->regData;
HXDLIN(  82)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform9,null(),uniform10,null(),(index * (int)4));
HXDLIN(  82)					gl->uniformMatrix3fv(location4,count4,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35676: {
HXLINE(  83)					int location5 = uniform->location;
HXDLIN(  83)					int count5 = uniform->size;
HXDLIN(  83)					int size5 = ((uniform->size * (int)4) * (int)4);
HXDLIN(  83)					 ::lime::utils::BytePointerData uniform11 = uniform->regDataPointer;
HXDLIN(  83)					 ::lime::utils::ArrayBufferView uniform12 = uniform->regData;
HXDLIN(  83)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform11,null(),uniform12,null(),(index * (int)4));
HXDLIN(  83)					gl->uniformMatrix4fv(location5,count5,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				default:{
HXLINE(  87)					int location6 = uniform->location;
HXDLIN(  87)					int count6 = uniform->regCount;
HXDLIN(  87)					int size6 = (uniform->regCount * (int)4);
HXDLIN(  87)					 ::lime::utils::BytePointerData uniform13 = uniform->regDataPointer;
HXDLIN(  87)					 ::lime::utils::ArrayBufferView uniform14 = uniform->regData;
HXDLIN(  87)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform13,null(),uniform14,null(),(index * (int)4));
HXDLIN(  87)					gl->uniform4fv(location6,count6,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            			}
            		}
HXLINE(  92)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,flushUniform,(void))

void GLProgram3D_obj::setPositionScale( ::openfl::display3D::Program3D program, ::openfl::display::OpenGLRenderer renderer, ::lime::utils::ArrayBufferView positionScale){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_97_setPositionScale)
HXLINE( 100)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE( 104)		{
HXLINE( 104)			int location = program->_hx___positionScale->location;
HXDLIN( 104)			int _hx_tmp;
HXDLIN( 104)			if (hx::IsNotNull( positionScale )) {
HXLINE( 104)				_hx_tmp = ((int)positionScale->length >> (int)(int)2);
            			}
            			else {
HXLINE( 104)				_hx_tmp = (int)0;
            			}
HXDLIN( 104)			gl->uniform4fv(location,_hx_tmp,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(positionScale));
            		}
HXLINE( 105)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLProgram3D_obj,setPositionScale,(void))

void GLProgram3D_obj::upload( ::openfl::display3D::Program3D program, ::openfl::display::OpenGLRenderer renderer, ::openfl::utils::ByteArrayData vertexProgram, ::openfl::utils::ByteArrayData fragmentProgram){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_110_upload)
HXLINE( 112)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program = program;
HXLINE( 113)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer = renderer;
HXLINE( 116)		::Array< ::Dynamic> samplerStates = ::Array_obj< ::Dynamic>::__new();
HXLINE( 118)		::String glslVertex = ::openfl::_internal::stage3D::AGALConverter_obj::convertToGLSL(vertexProgram,null());
HXLINE( 119)		::String glslFragment = ::openfl::_internal::stage3D::AGALConverter_obj::convertToGLSL(fragmentProgram,samplerStates);
HXLINE( 121)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___uploadFromGLSL(glslVertex,glslFragment);
HXLINE( 123)		{
HXLINE( 123)			int _g1 = (int)0;
HXDLIN( 123)			int _g = samplerStates->length;
HXDLIN( 123)			while((_g1 < _g)){
HXLINE( 123)				_g1 = (_g1 + (int)1);
HXDLIN( 123)				int i = (_g1 - (int)1);
HXLINE( 125)				program->_hx___samplerStates->set(i,samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >()).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLProgram3D_obj,upload,(void))

void GLProgram3D_obj::use( ::openfl::display3D::Program3D program, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_132_use)
HXLINE( 135)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___context->webgl;
HXLINE( 140)		gl->useProgram(program->_hx___programID);
HXLINE( 141)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 143)		program->_hx___vertexUniformMap->markAllDirty();
HXLINE( 144)		program->_hx___fragmentUniformMap->markAllDirty();
HXLINE( 146)		{
HXLINE( 146)			 ::_List::ListNode _g_head = program->_hx___samplerUniforms->h;
HXDLIN( 146)			while(hx::IsNotNull( _g_head )){
HXLINE( 146)				 ::openfl::display3D::Uniform val = ( ( ::openfl::display3D::Uniform)(_g_head->item) );
HXDLIN( 146)				_g_head = _g_head->next;
HXDLIN( 146)				 ::openfl::display3D::Uniform sampler = val;
HXLINE( 148)				if ((sampler->regCount == (int)1)) {
HXLINE( 150)					gl->uniform1i(sampler->location,sampler->regIndex);
HXLINE( 151)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
            				else {
HXLINE( 155)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            				}
            			}
            		}
HXLINE( 169)		{
HXLINE( 169)			 ::_List::ListNode _g_head1 = program->_hx___alphaSamplerUniforms->h;
HXDLIN( 169)			while(hx::IsNotNull( _g_head1 )){
HXLINE( 169)				 ::openfl::display3D::Uniform val1 = ( ( ::openfl::display3D::Uniform)(_g_head1->item) );
HXDLIN( 169)				_g_head1 = _g_head1->next;
HXDLIN( 169)				 ::openfl::display3D::Uniform sampler1 = val1;
HXLINE( 171)				if ((sampler1->regCount == (int)1)) {
HXLINE( 173)					gl->uniform1i(sampler1->location,sampler1->regIndex);
HXLINE( 174)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,use,(void))

void GLProgram3D_obj::_hx___buildUniformList(){
            	HX_GC_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_196___buildUniformList)
HXLINE( 199)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer->_hx___context->webgl;
HXLINE( 204)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___uniforms->clear();
HXLINE( 205)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___samplerUniforms->clear();
HXLINE( 206)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___alphaSamplerUniforms->clear();
HXLINE( 207)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___alphaSamplerEnabled = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 209)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___samplerUsageMask = (int)0;
HXLINE( 211)		int numActive = (int)0;
HXLINE( 212)		numActive = ( (int)(gl->getProgramParameter(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,gl->ACTIVE_UNIFORMS)) );
HXLINE( 213)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 215)		 ::List vertexUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 216)		 ::List fragmentUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 218)		{
HXLINE( 218)			int _g1 = (int)0;
HXDLIN( 218)			int _g = numActive;
HXDLIN( 218)			while((_g1 < _g)){
HXLINE( 218)				_g1 = (_g1 + (int)1);
HXDLIN( 218)				int i = (_g1 - (int)1);
HXLINE( 220)				 ::Dynamic info = gl->getActiveUniform(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,i);
HXLINE( 221)				::String name = ( (::String)(info->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 222)				int size = ( (int)(info->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
HXLINE( 223)				int uniformType = ( (int)(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 224)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 226)				 ::openfl::display3D::Uniform uniform =  ::openfl::display3D::Uniform_obj::__alloc( HX_CTX ,::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer->_hx___context);
HXLINE( 227)				uniform->name = name;
HXLINE( 228)				uniform->size = size;
HXLINE( 229)				uniform->type = uniformType;
HXLINE( 231)				uniform->location = gl->getUniformLocation(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,uniform->name);
HXLINE( 232)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 234)				int indexBracket = uniform->name.indexOf(HX_("[",5b,00,00,00),null());
HXLINE( 236)				if ((indexBracket >= (int)0)) {
HXLINE( 238)					uniform->name = uniform->name.substring((int)0,indexBracket);
            				}
HXLINE( 242)				{
HXLINE( 242)					int _g2 = uniform->type;
HXDLIN( 242)					switch((int)(_g2)){
            						case (int)35674: {
HXLINE( 244)							uniform->regCount = (int)2;
            						}
            						break;
            						case (int)35675: {
HXLINE( 245)							uniform->regCount = (int)3;
            						}
            						break;
            						case (int)35676: {
HXLINE( 246)							uniform->regCount = (int)4;
            						}
            						break;
            						default:{
HXLINE( 247)							uniform->regCount = (int)1;
            						}
            					}
            				}
HXLINE( 251)				 ::openfl::display3D::Uniform uniform1 = uniform;
HXDLIN( 251)				uniform1->regCount = (uniform1->regCount * uniform->size);
HXLINE( 253)				::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___uniforms->add(uniform);
HXLINE( 255)				if ((uniform->name == HX_("vcPositionScale",b4,c9,c0,1f))) {
HXLINE( 257)					::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___positionScale = uniform;
            				}
            				else {
HXLINE( 259)					if (::StringTools_obj::startsWith(uniform->name,HX_("vc",2d,67,00,00))) {
HXLINE( 261)						uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 262)						uniform->regData = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___context->_hx___vertexConstants;
HXLINE( 263)						vertexUniforms->add(uniform);
            					}
            					else {
HXLINE( 265)						if (::StringTools_obj::startsWith(uniform->name,HX_("fc",3d,59,00,00))) {
HXLINE( 267)							uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 268)							uniform->regData = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___context->_hx___fragmentConstants;
HXLINE( 269)							fragmentUniforms->add(uniform);
            						}
            						else {
HXLINE( 271)							bool _hx_tmp;
HXDLIN( 271)							if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 271)								_hx_tmp = (uniform->name.indexOf(HX_("alpha",5e,a7,96,21),null()) == (int)-1);
            							}
            							else {
HXLINE( 271)								_hx_tmp = false;
            							}
HXDLIN( 271)							if (_hx_tmp) {
HXLINE( 273)								uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)7,null()));
HXLINE( 274)								::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___samplerUniforms->add(uniform);
HXLINE( 276)								{
HXLINE( 276)									int _g4 = (int)0;
HXDLIN( 276)									int _g3 = uniform->regCount;
HXDLIN( 276)									while((_g4 < _g3)){
HXLINE( 276)										_g4 = (_g4 + (int)1);
HXDLIN( 276)										int reg = (_g4 - (int)1);
HXLINE( 278)										 ::openfl::display3D::Program3D _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program;
HXDLIN( 278)										_hx_tmp1->_hx___samplerUsageMask = ((int)_hx_tmp1->_hx___samplerUsageMask | (int)((int)(int)1 << (int)(uniform->regIndex + reg)));
            									}
            								}
            							}
            							else {
HXLINE( 282)								bool _hx_tmp2;
HXDLIN( 282)								if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 282)									_hx_tmp2 = ::StringTools_obj::endsWith(uniform->name,HX_("_alpha",9f,ee,7d,1d));
            								}
            								else {
HXLINE( 282)									_hx_tmp2 = false;
            								}
HXDLIN( 282)								if (_hx_tmp2) {
HXLINE( 284)									int len = (uniform->name.indexOf(HX_("_",5f,00,00,00),null()) - (int)7);
HXLINE( 285)									::String uniform2 = uniform->name;
HXDLIN( 285)									uniform->regIndex = (::Std_obj::parseInt(uniform2.substring((int)7,((int)7 + len))) + (int)4);
HXLINE( 286)									::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___alphaSamplerUniforms->add(uniform);
            								}
            								else {
HXLINE( 288)									bool _hx_tmp3;
HXDLIN( 288)									if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 288)										_hx_tmp3 = ::StringTools_obj::endsWith(uniform->name,HX_("_alphaEnabled",a2,df,12,f4));
            									}
            									else {
HXLINE( 288)										_hx_tmp3 = false;
            									}
HXDLIN( 288)									if (_hx_tmp3) {
HXLINE( 290)										uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)7,null()));
HXLINE( 291)										::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___alphaSamplerEnabled[uniform->regIndex] = uniform;
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE( 295)				if ((::lime::utils::Log_obj::level == (int)5)) {
HXLINE( 297)					 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 297)					_hx_tmp4((((((((((HX_("",00,00,00,00) + i) + HX_(" name:",6f,1b,f0,61)) + uniform->name) + HX_(" type:",20,fc,36,e6)) + uniform->type) + HX_(" size:",39,94,44,48)) + uniform->size) + HX_(" location:",45,fc,a8,c1)) + uniform->location),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),297,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__buildUniformList",44,16,c1,02)));
            				}
            			}
            		}
HXLINE( 303)		::Array< ::Dynamic> _hx_tmp5 = ::Lambda_obj::array(vertexUniforms);
HXDLIN( 303)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexUniformMap =  ::openfl::display3D::UniformMap_obj::__alloc( HX_CTX ,_hx_tmp5);
HXLINE( 304)		::Array< ::Dynamic> _hx_tmp6 = ::Lambda_obj::array(fragmentUniforms);
HXDLIN( 304)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentUniformMap =  ::openfl::display3D::UniformMap_obj::__alloc( HX_CTX ,_hx_tmp6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLProgram3D_obj,_hx___buildUniformList,(void))

void GLProgram3D_obj::_hx___deleteShaders(){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_309___deleteShaders)
HXLINE( 312)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer->_hx___context->webgl;
HXLINE( 317)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID )) {
HXLINE( 321)			::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID = null();
            		}
HXLINE( 325)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID )) {
HXLINE( 327)			gl->deleteShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 328)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 329)			::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID = null();
            		}
HXLINE( 333)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID )) {
HXLINE( 335)			gl->deleteShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 336)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 337)			::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID = null();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLProgram3D_obj,_hx___deleteShaders,(void))

 ::lime::utils::BytePointerData GLProgram3D_obj::_hx___getUniformRegisters( ::openfl::display3D::Uniform uniform,int index,int size){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_359___getUniformRegisters)
HXLINE( 361)		 ::lime::utils::BytePointerData uniform1 = uniform->regDataPointer;
HXDLIN( 361)		 ::lime::utils::ArrayBufferView uniform2 = uniform->regData;
HXDLIN( 361)		::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform1,null(),uniform2,null(),(index * (int)4));
HXLINE( 362)		return uniform->regDataPointer;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLProgram3D_obj,_hx___getUniformRegisters,return )

void GLProgram3D_obj::_hx___uploadFromGLSL(::String vertexShaderSource,::String fragmentShaderSource){
            	HX_GC_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_368___uploadFromGLSL)
HXLINE( 371)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderer->_hx___context->webgl;
HXLINE( 376)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___deleteShaders();
HXLINE( 378)		if ((::lime::utils::Log_obj::level == (int)5)) {
HXLINE( 380)			::lime::utils::Log_obj::info(vertexShaderSource,hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),380,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
HXLINE( 381)			::lime::utils::Log_obj::info(fragmentShaderSource,hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),381,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 385)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexSource = vertexShaderSource;
HXLINE( 386)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentSource = fragmentShaderSource;
HXLINE( 388)		 ::lime::graphics::opengl::GLObject _hx_tmp = gl->createShader(gl->VERTEX_SHADER);
HXDLIN( 388)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID = _hx_tmp;
HXLINE( 389)		gl->shaderSource(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID,vertexShaderSource);
HXLINE( 390)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 392)		gl->compileShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 393)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 395)		int shaderCompiled = ( (int)(gl->getShaderParameter(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID,gl->COMPILE_STATUS)) );
HXLINE( 397)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 399)		if ((shaderCompiled == (int)0)) {
HXLINE( 401)			::String vertexInfoLog = gl->getShaderInfoLog(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 403)			bool _hx_tmp1;
HXDLIN( 403)			if (hx::IsNotNull( vertexInfoLog )) {
HXLINE( 403)				_hx_tmp1 = (vertexInfoLog.length != (int)0);
            			}
            			else {
HXLINE( 403)				_hx_tmp1 = false;
            			}
HXDLIN( 403)			if (_hx_tmp1) {
HXLINE( 405)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 405)				_hx_tmp2((HX_("vertex: ",0a,af,80,67) + vertexInfoLog),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),405,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            			}
HXLINE( 409)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Error compiling vertex shader: ",1f,7c,b1,3d) + vertexInfoLog),null()));
            		}
HXLINE( 413)		 ::lime::graphics::opengl::GLObject _hx_tmp3 = gl->createShader(gl->FRAGMENT_SHADER);
HXDLIN( 413)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID = _hx_tmp3;
HXLINE( 414)		gl->shaderSource(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID,fragmentShaderSource);
HXLINE( 415)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 417)		gl->compileShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 418)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 420)		int fragmentCompiled = ( (int)(gl->getShaderParameter(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID,gl->COMPILE_STATUS)) );
HXLINE( 422)		if ((fragmentCompiled == (int)0)) {
HXLINE( 424)			::String fragmentInfoLog = gl->getShaderInfoLog(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 426)			bool _hx_tmp4;
HXDLIN( 426)			if (hx::IsNotNull( fragmentInfoLog )) {
HXLINE( 426)				_hx_tmp4 = (fragmentInfoLog.length != (int)0);
            			}
            			else {
HXLINE( 426)				_hx_tmp4 = false;
            			}
HXDLIN( 426)			if (_hx_tmp4) {
HXLINE( 428)				 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 428)				_hx_tmp5((HX_("fragment: ",76,26,d9,f9) + fragmentInfoLog),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),428,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            			}
HXLINE( 432)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Error compiling fragment shader: ",33,70,4d,6d) + fragmentInfoLog),null()));
            		}
HXLINE( 436)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID = gl->createProgram();
HXLINE( 437)		gl->attachShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 438)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 440)		gl->attachShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 441)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 443)		{
HXLINE( 443)			int _g = (int)0;
HXDLIN( 443)			while((_g < (int)16)){
HXLINE( 443)				_g = (_g + (int)1);
HXDLIN( 443)				int i = (_g - (int)1);
HXLINE( 445)				::String name = (HX_("va",2b,67,00,00) + i);
HXLINE( 447)				if ((vertexShaderSource.indexOf((HX_(" ",20,00,00,00) + name),null()) != (int)-1)) {
HXLINE( 449)					gl->bindAttribLocation(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,i,name);
            				}
            			}
            		}
HXLINE( 455)		gl->linkProgram(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID);
HXLINE( 457)		::String infoLog = gl->getProgramInfoLog(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID);
HXLINE( 459)		bool _hx_tmp6;
HXDLIN( 459)		bool _hx_tmp7;
HXDLIN( 459)		if (hx::IsNotNull( infoLog )) {
HXLINE( 459)			_hx_tmp7 = (infoLog.length != (int)0);
            		}
            		else {
HXLINE( 459)			_hx_tmp7 = false;
            		}
HXDLIN( 459)		if (_hx_tmp7) {
HXLINE( 459)			_hx_tmp6 = (::StringTools_obj::trim(infoLog) != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 459)			_hx_tmp6 = false;
            		}
HXDLIN( 459)		if (_hx_tmp6) {
HXLINE( 461)			 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN( 461)			_hx_tmp8((HX_("program: ",2a,26,c4,dc) + infoLog),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),461,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 465)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___buildUniformList();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,_hx___uploadFromGLSL,(void))


GLProgram3D_obj::GLProgram3D_obj()
{
}

bool GLProgram3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"use") ) { outValue = use_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"upload") ) { outValue = upload_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { outValue = ( program ); return true; }
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { outValue = ( renderer ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flushUniform") ) { outValue = flushUniform_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__deleteShaders") ) { outValue = _hx___deleteShaders_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setPositionScale") ) { outValue = setPositionScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__uploadFromGLSL") ) { outValue = _hx___uploadFromGLSL_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__buildUniformList") ) { outValue = _hx___buildUniformList_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__getUniformRegisters") ) { outValue = _hx___getUniformRegisters_dyn(); return true; }
	}
	return false;
}

bool GLProgram3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=ioValue.Cast<  ::openfl::display3D::Program3D >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { renderer=ioValue.Cast<  ::openfl::display::OpenGLRenderer >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLProgram3D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GLProgram3D_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(void *) &GLProgram3D_obj::program,HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3")},
	{hx::fsObject /*::openfl::display::OpenGLRenderer*/ ,(void *) &GLProgram3D_obj::renderer,HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GLProgram3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLProgram3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GLProgram3D_obj::program,"program");
	HX_MARK_MEMBER_NAME(GLProgram3D_obj::renderer,"renderer");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLProgram3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLProgram3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GLProgram3D_obj::program,"program");
	HX_VISIT_MEMBER_NAME(GLProgram3D_obj::renderer,"renderer");
};

#endif

hx::Class GLProgram3D_obj::__mClass;

static ::String GLProgram3D_obj_sStaticFields[] = {
	HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"),
	HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("flushUniform","\xd0","\xa6","\xc9","\xf3"),
	HX_HCSTRING("setPositionScale","\x1f","\x30","\x30","\xa3"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	HX_HCSTRING("use","\x47","\x2c","\x59","\x00"),
	HX_HCSTRING("__buildUniformList","\x44","\x16","\xc1","\x02"),
	HX_HCSTRING("__deleteShaders","\xa3","\x4d","\xc2","\x45"),
	HX_HCSTRING("__getUniformRegisters","\x72","\x52","\xab","\xfa"),
	HX_HCSTRING("__uploadFromGLSL","\xa9","\x36","\x31","\x0d"),
	::String(null())
};

void GLProgram3D_obj::__register()
{
	hx::Object *dummy = new GLProgram3D_obj;
	GLProgram3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLProgram3D","\x20","\xfb","\x21","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLProgram3D_obj::__GetStatic;
	__mClass->mSetStaticField = &GLProgram3D_obj::__SetStatic;
	__mClass->mMarkFunc = GLProgram3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLProgram3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLProgram3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLProgram3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLProgram3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLProgram3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
