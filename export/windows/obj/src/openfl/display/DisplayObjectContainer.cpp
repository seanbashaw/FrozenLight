// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Point
#include <lime/utils/ObjectPool_openfl_geom_Point.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShape
#include <openfl/_internal/renderer/opengl/GLShape.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_126_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",126,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_171_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",171,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_205_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",205,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_302_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",302,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_319_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",319,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_345_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",345,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_376_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",376,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_397_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",397,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_429_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",429,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_458_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",458,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_518_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",518,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_531_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",531,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_566_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",566,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_615_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",615,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_627_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",627,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_644_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",644,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_668_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",668,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_679___cleanup,"openfl.display.DisplayObjectContainer","__cleanup",0x2346b9e0,"openfl.display.DisplayObjectContainer.__cleanup","openfl/display/DisplayObjectContainer.hx",679,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_694___cleanupRemovedChildren,"openfl.display.DisplayObjectContainer","__cleanupRemovedChildren",0x4395feff,"openfl.display.DisplayObjectContainer.__cleanupRemovedChildren","openfl/display/DisplayObjectContainer.hx",694,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_713___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",713,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_736___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",736,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_745___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",745,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_768___getFilterBounds,"openfl.display.DisplayObjectContainer","__getFilterBounds",0xbea2d3bf,"openfl.display.DisplayObjectContainer.__getFilterBounds","openfl/display/DisplayObjectContainer.hx",768,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_791___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",791,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_823___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",823,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_919___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",919,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_938___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",938,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_955___renderCairo,"openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",955,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_995___renderCairoMask,"openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",995,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1016___renderCanvas,"openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",1016,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1058___renderCanvasMask,"openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",1058,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1077___renderDOM,"openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",1077,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1113___renderDOMClear,"openfl.display.DisplayObjectContainer","__renderDOMClear",0xae5612e5,"openfl.display.DisplayObjectContainer.__renderDOMClear","openfl/display/DisplayObjectContainer.hx",1113,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1124___renderGL,"openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",1124,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1172___renderGLMask,"openfl.display.DisplayObjectContainer","__renderGLMask",0x75bbba4b,"openfl.display.DisplayObjectContainer.__renderGLMask","openfl/display/DisplayObjectContainer.hx",1172,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1192___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",1192,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1211___setWorldTransformInvalid,"openfl.display.DisplayObjectContainer","__setWorldTransformInvalid",0xa8fd351f,"openfl.display.DisplayObjectContainer.__setWorldTransformInvalid","openfl/display/DisplayObjectContainer.hx",1211,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1230___shouldCacheHardware,"openfl.display.DisplayObjectContainer","__shouldCacheHardware",0xd831e693,"openfl.display.DisplayObjectContainer.__shouldCacheHardware","openfl/display/DisplayObjectContainer.hx",1230,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1254___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",1254,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1263___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",1263,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1289_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",1289,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_126_new)
HXLINE( 128)		super::__construct();
HXLINE( 130)		this->mouseChildren = true;
HXLINE( 132)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE( 133)		int length = null();
HXDLIN( 133)		bool fixed = null();
HXDLIN( 133)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17120186;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_171_addChild)
HXDLIN( 171)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_205_addChildAt)
HXLINE( 207)		if (hx::IsNull( child )) {
HXLINE( 209)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter child must be non-null.",30,5a,a7,aa));
HXLINE( 210)			error->errorID = (int)2007;
HXLINE( 211)			HX_STACK_DO_THROW(error);
            		}
            		else {
HXLINE( 213)			if (hx::IsEq( child->stage,child )) {
HXLINE( 215)				 ::openfl::errors::ArgumentError error1 =  ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Error #3783: A Stage object cannot be added as the child of another object.",fa,51,93,42));
HXLINE( 216)				error1->errorID = (int)3783;
HXLINE( 217)				HX_STACK_DO_THROW(error1);
            			}
            		}
HXLINE( 221)		bool _hx_tmp;
HXDLIN( 221)		if ((index <= this->_hx___children->length)) {
HXLINE( 221)			_hx_tmp = (index < (int)0);
            		}
            		else {
HXLINE( 221)			_hx_tmp = true;
            		}
HXDLIN( 221)		if (_hx_tmp) {
HXLINE( 223)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE( 227)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 229)			if (hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 231)				this->_hx___children->remove(child);
HXLINE( 232)				this->_hx___children->insert(index,child);
HXLINE( 234)				if (!(this->_hx___renderDirty)) {
HXLINE( 234)					this->_hx___renderDirty = true;
HXDLIN( 234)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            		else {
HXLINE( 240)			if (hx::IsNotNull( child->parent )) {
HXLINE( 242)				child->parent->removeChild(child);
            			}
HXLINE( 246)			this->_hx___children->insert(index,child);
HXLINE( 247)			child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 249)			bool addedToStage;
HXDLIN( 249)			if (hx::IsNotNull( this->stage )) {
HXLINE( 249)				addedToStage = hx::IsNull( child->stage );
            			}
            			else {
HXLINE( 249)				addedToStage = false;
            			}
HXLINE( 251)			if (addedToStage) {
HXLINE( 253)				this->_hx___setStageReference(this->stage);
            			}
HXLINE( 257)			child->_hx___setTransformDirty();
HXLINE( 258)			if (!(child->_hx___renderDirty)) {
HXLINE( 258)				child->_hx___renderDirty = true;
HXDLIN( 258)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 259)			if (!(this->_hx___renderDirty)) {
HXLINE( 259)				this->_hx___renderDirty = true;
HXDLIN( 259)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 261)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("added",c0,d4,43,1c),true,null());
HXLINE( 262)			event->target = child;
HXLINE( 263)			child->_hx___dispatchWithCapture(event);
HXLINE( 265)			if (addedToStage) {
HXLINE( 267)				 ::openfl::events::Event event1 =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false);
HXLINE( 268)				child->_hx___dispatchWithCapture(event1);
HXLINE( 269)				child->_hx___dispatchChildren(event1);
            			}
            		}
HXLINE( 275)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_302_areInaccessibleObjectsUnderPoint)
HXDLIN( 302)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_319_contains)
HXLINE( 321)		while(true){
HXLINE( 321)			bool _hx_tmp;
HXDLIN( 321)			if (hx::IsNotEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 321)				_hx_tmp = hx::IsNotNull( child );
            			}
            			else {
HXLINE( 321)				_hx_tmp = false;
            			}
HXDLIN( 321)			if (!(_hx_tmp)) {
HXLINE( 321)				goto _hx_goto_4;
            			}
HXLINE( 323)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 327)		return hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_345_getChildAt)
HXLINE( 347)		bool _hx_tmp;
HXDLIN( 347)		if ((index >= (int)0)) {
HXLINE( 347)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 347)			_hx_tmp = false;
            		}
HXDLIN( 347)		if (_hx_tmp) {
HXLINE( 349)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 353)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_376_getChildByName)
HXLINE( 378)		{
HXLINE( 378)			int _g = (int)0;
HXDLIN( 378)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 378)			while((_g < _g1->length)){
HXLINE( 378)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 378)				_g = (_g + (int)1);
HXLINE( 380)				if ((child->get_name() == name)) {
HXLINE( 380)					return child;
            				}
            			}
            		}
HXLINE( 384)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_397_getChildIndex)
HXLINE( 399)		{
HXLINE( 399)			int _g1 = (int)0;
HXDLIN( 399)			int _g = this->_hx___children->length;
HXDLIN( 399)			while((_g1 < _g)){
HXLINE( 399)				_g1 = (_g1 + (int)1);
HXDLIN( 399)				int i = (_g1 - (int)1);
HXLINE( 401)				if (hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 401)					return i;
            				}
            			}
            		}
HXLINE( 405)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_429_getObjectsUnderPoint)
HXLINE( 431)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 432)		this->_hx___hitTest(point->x,point->y,false,stack,false,hx::ObjectPtr<OBJ_>(this));
HXLINE( 433)		stack->reverse();
HXLINE( 434)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_458_removeChild)
HXLINE( 460)		bool _hx_tmp;
HXDLIN( 460)		if (hx::IsNotNull( child )) {
HXLINE( 460)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 460)			_hx_tmp = false;
            		}
HXDLIN( 460)		if (_hx_tmp) {
HXLINE( 462)			child->_hx___setTransformDirty();
HXLINE( 463)			if (!(child->_hx___renderDirty)) {
HXLINE( 463)				child->_hx___renderDirty = true;
HXDLIN( 463)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 464)			if (!(this->_hx___renderDirty)) {
HXLINE( 464)				this->_hx___renderDirty = true;
HXDLIN( 464)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 466)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null());
HXLINE( 467)			child->_hx___dispatchWithCapture(event);
HXLINE( 469)			if (hx::IsNotNull( this->stage )) {
HXLINE( 471)				bool _hx_tmp1;
HXDLIN( 471)				if (hx::IsNotNull( child->stage )) {
HXLINE( 471)					_hx_tmp1 = hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 471)					_hx_tmp1 = false;
            				}
HXDLIN( 471)				if (_hx_tmp1) {
HXLINE( 473)					this->stage->set_focus(null());
            				}
HXLINE( 477)				 ::openfl::events::Event event1 =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 478)				child->_hx___dispatchWithCapture(event1);
HXLINE( 479)				child->_hx___dispatchChildren(event1);
HXLINE( 480)				child->_hx___setStageReference(null());
            			}
HXLINE( 484)			child->parent = null();
HXLINE( 485)			this->_hx___children->remove(child);
HXLINE( 486)			this->_hx___removedChildren->push(child);
HXLINE( 487)			child->_hx___setTransformDirty();
            		}
HXLINE( 491)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_518_removeChildAt)
HXLINE( 520)		bool _hx_tmp;
HXDLIN( 520)		if ((index >= (int)0)) {
HXLINE( 520)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 520)			_hx_tmp = false;
            		}
HXDLIN( 520)		if (_hx_tmp) {
HXLINE( 522)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 526)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_531_removeChildren)
HXLINE( 533)		if ((endIndex == (int)2147483647)) {
HXLINE( 535)			endIndex = (this->_hx___children->length - (int)1);
HXLINE( 537)			if ((endIndex < (int)0)) {
HXLINE( 539)				return;
            			}
            		}
HXLINE( 545)		if ((beginIndex > (this->_hx___children->length - (int)1))) {
HXLINE( 547)			return;
            		}
            		else {
HXLINE( 549)			bool _hx_tmp;
HXDLIN( 549)			bool _hx_tmp1;
HXDLIN( 549)			if ((endIndex >= beginIndex)) {
HXLINE( 549)				_hx_tmp1 = (beginIndex < (int)0);
            			}
            			else {
HXLINE( 549)				_hx_tmp1 = true;
            			}
HXDLIN( 549)			if (!(_hx_tmp1)) {
HXLINE( 549)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 549)				_hx_tmp = true;
            			}
HXDLIN( 549)			if (_hx_tmp) {
HXLINE( 551)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 555)		int numRemovals = (endIndex - beginIndex);
HXLINE( 556)		while((numRemovals >= (int)0)){
HXLINE( 558)			this->removeChildAt(beginIndex);
HXLINE( 559)			numRemovals = (numRemovals - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_566_resolve)
HXLINE( 568)		if (hx::IsNull( this->_hx___children )) {
HXLINE( 568)			return null();
            		}
HXLINE( 570)		{
HXLINE( 570)			int _g = (int)0;
HXDLIN( 570)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 570)			while((_g < _g1->length)){
HXLINE( 570)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 570)				_g = (_g + (int)1);
HXLINE( 572)				if ((child->get_name() == fieldName)) {
HXLINE( 574)					return child;
            				}
            			}
            		}
HXLINE( 580)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_615_setChildIndex)
HXDLIN( 615)		bool _hx_tmp;
HXDLIN( 615)		bool _hx_tmp1;
HXDLIN( 615)		if ((index >= (int)0)) {
HXDLIN( 615)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXDLIN( 615)			_hx_tmp1 = false;
            		}
HXDLIN( 615)		if (_hx_tmp1) {
HXDLIN( 615)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 615)			_hx_tmp = false;
            		}
HXDLIN( 615)		if (_hx_tmp) {
HXLINE( 617)			this->_hx___children->remove(child);
HXLINE( 618)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_627_stopAllMovieClips)
HXDLIN( 627)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_644_swapChildren)
HXDLIN( 644)		bool _hx_tmp;
HXDLIN( 644)		if (hx::IsEq( child1->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 644)			_hx_tmp = hx::IsEq( child2->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 644)			_hx_tmp = false;
            		}
HXDLIN( 644)		if (_hx_tmp) {
HXLINE( 646)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 647)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 649)			this->_hx___children[index1] = child2;
HXLINE( 650)			this->_hx___children[index2] = child1;
HXLINE( 652)			if (!(this->_hx___renderDirty)) {
HXLINE( 652)				this->_hx___renderDirty = true;
HXDLIN( 652)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_668_swapChildrenAt)
HXLINE( 670)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 671)		::Array< ::Dynamic> _hx_tmp = this->_hx___children;
HXDLIN( 671)		_hx_tmp[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 672)		this->_hx___children[index2] = swap;
HXLINE( 673)		swap = null();
HXLINE( 674)		if (!(this->_hx___renderDirty)) {
HXLINE( 674)			this->_hx___renderDirty = true;
HXDLIN( 674)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_679___cleanup)
HXLINE( 681)		this->super::_hx___cleanup();
HXLINE( 683)		{
HXLINE( 683)			int _g = (int)0;
HXDLIN( 683)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 683)			while((_g < _g1->length)){
HXLINE( 683)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 683)				_g = (_g + (int)1);
HXLINE( 685)				child->_hx___cleanup();
            			}
            		}
HXLINE( 689)		{
HXLINE( 689)			{
HXLINE( 689)				int _g2 = (int)0;
HXDLIN( 689)				 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN( 689)				while((_g2 < _g11->get_length())){
HXLINE( 689)					 ::openfl::display::DisplayObject orphan = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 689)					_g2 = (_g2 + (int)1);
HXDLIN( 689)					if (hx::IsNull( orphan->stage )) {
HXLINE( 689)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 689)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
            	}


void DisplayObjectContainer_obj::_hx___cleanupRemovedChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_694___cleanupRemovedChildren)
HXLINE( 696)		{
HXLINE( 696)			int _g = (int)0;
HXDLIN( 696)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN( 696)			while((_g < _g1->get_length())){
HXLINE( 696)				 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 696)				_g = (_g + (int)1);
HXLINE( 698)				if (hx::IsNull( orphan->stage )) {
HXLINE( 700)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 706)		this->_hx___removedChildren->set_length((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,_hx___cleanupRemovedChildren,(void))

void DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_713___dispatchChildren)
HXDLIN( 713)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 715)			int _g = (int)0;
HXDLIN( 715)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 715)			while((_g < _g1->length)){
HXLINE( 715)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 715)				_g = (_g + (int)1);
HXLINE( 717)				event->target = child;
HXLINE( 719)				if (!(child->_hx___dispatchWithCapture(event))) {
HXLINE( 721)					goto _hx_goto_27;
            				}
HXLINE( 725)				child->_hx___dispatchChildren(event);
            			}
            			_hx_goto_27:;
            		}
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_736___enterFrame)
HXDLIN( 736)		int _g = (int)0;
HXDLIN( 736)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 736)		while((_g < _g1->length)){
HXDLIN( 736)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 736)			_g = (_g + (int)1);
HXLINE( 738)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_745___getBounds)
HXLINE( 747)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 749)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 749)			return;
            		}
HXLINE( 751)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 753)		{
HXLINE( 753)			int _g = (int)0;
HXDLIN( 753)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 753)			while((_g < _g1->length)){
HXLINE( 753)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 753)				_g = (_g + (int)1);
HXLINE( 755)				bool _hx_tmp;
HXDLIN( 755)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 755)					_hx_tmp = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 755)					_hx_tmp = true;
            				}
HXDLIN( 755)				if (_hx_tmp) {
HXLINE( 755)					continue;
            				}
HXLINE( 757)				{
HXLINE( 757)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 757)					Float _hx_tmp1 = (local->a * matrix->a);
HXDLIN( 757)					childWorldTransform->a = (_hx_tmp1 + (local->b * matrix->c));
HXDLIN( 757)					Float _hx_tmp2 = (local->a * matrix->b);
HXDLIN( 757)					childWorldTransform->b = (_hx_tmp2 + (local->b * matrix->d));
HXDLIN( 757)					Float _hx_tmp3 = (local->c * matrix->a);
HXDLIN( 757)					childWorldTransform->c = (_hx_tmp3 + (local->d * matrix->c));
HXDLIN( 757)					Float _hx_tmp4 = (local->c * matrix->b);
HXDLIN( 757)					childWorldTransform->d = (_hx_tmp4 + (local->d * matrix->d));
HXDLIN( 757)					Float _hx_tmp5 = (local->tx * matrix->a);
HXDLIN( 757)					childWorldTransform->tx = ((_hx_tmp5 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 757)					Float _hx_tmp6 = (local->tx * matrix->b);
HXDLIN( 757)					childWorldTransform->ty = ((_hx_tmp6 + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 759)				child->_hx___getBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 763)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_768___getFilterBounds)
HXLINE( 770)		this->super::_hx___getFilterBounds(rect,matrix);
HXLINE( 772)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 772)			return;
            		}
HXLINE( 774)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 776)		{
HXLINE( 776)			int _g = (int)0;
HXDLIN( 776)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 776)			while((_g < _g1->length)){
HXLINE( 776)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 776)				_g = (_g + (int)1);
HXLINE( 778)				bool _hx_tmp;
HXDLIN( 778)				bool _hx_tmp1;
HXDLIN( 778)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 778)					_hx_tmp1 = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 778)					_hx_tmp1 = true;
            				}
HXDLIN( 778)				if (!(_hx_tmp1)) {
HXLINE( 778)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 778)					_hx_tmp = true;
            				}
HXDLIN( 778)				if (_hx_tmp) {
HXLINE( 778)					continue;
            				}
HXLINE( 780)				{
HXLINE( 780)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 780)					Float _hx_tmp2 = (local->a * matrix->a);
HXDLIN( 780)					childWorldTransform->a = (_hx_tmp2 + (local->b * matrix->c));
HXDLIN( 780)					Float _hx_tmp3 = (local->a * matrix->b);
HXDLIN( 780)					childWorldTransform->b = (_hx_tmp3 + (local->b * matrix->d));
HXDLIN( 780)					Float _hx_tmp4 = (local->c * matrix->a);
HXDLIN( 780)					childWorldTransform->c = (_hx_tmp4 + (local->d * matrix->c));
HXDLIN( 780)					Float _hx_tmp5 = (local->c * matrix->b);
HXDLIN( 780)					childWorldTransform->d = (_hx_tmp5 + (local->d * matrix->d));
HXDLIN( 780)					Float _hx_tmp6 = (local->tx * matrix->a);
HXDLIN( 780)					childWorldTransform->tx = ((_hx_tmp6 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 780)					Float _hx_tmp7 = (local->tx * matrix->b);
HXDLIN( 780)					childWorldTransform->ty = ((_hx_tmp7 + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 782)				child->_hx___getFilterBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 786)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_791___getRenderBounds)
HXLINE( 793)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 795)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 796)			return;
            		}
            		else {
HXLINE( 800)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 804)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 804)			return;
            		}
HXLINE( 806)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 808)		{
HXLINE( 808)			int _g = (int)0;
HXDLIN( 808)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 808)			while((_g < _g1->length)){
HXLINE( 808)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 808)				_g = (_g + (int)1);
HXLINE( 810)				bool _hx_tmp;
HXDLIN( 810)				bool _hx_tmp1;
HXDLIN( 810)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 810)					_hx_tmp1 = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 810)					_hx_tmp1 = true;
            				}
HXDLIN( 810)				if (!(_hx_tmp1)) {
HXLINE( 810)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 810)					_hx_tmp = true;
            				}
HXDLIN( 810)				if (_hx_tmp) {
HXLINE( 810)					continue;
            				}
HXLINE( 812)				{
HXLINE( 812)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 812)					Float _hx_tmp2 = (local->a * matrix->a);
HXDLIN( 812)					childWorldTransform->a = (_hx_tmp2 + (local->b * matrix->c));
HXDLIN( 812)					Float _hx_tmp3 = (local->a * matrix->b);
HXDLIN( 812)					childWorldTransform->b = (_hx_tmp3 + (local->b * matrix->d));
HXDLIN( 812)					Float _hx_tmp4 = (local->c * matrix->a);
HXDLIN( 812)					childWorldTransform->c = (_hx_tmp4 + (local->d * matrix->c));
HXDLIN( 812)					Float _hx_tmp5 = (local->c * matrix->b);
HXDLIN( 812)					childWorldTransform->d = (_hx_tmp5 + (local->d * matrix->d));
HXDLIN( 812)					Float _hx_tmp6 = (local->tx * matrix->a);
HXDLIN( 812)					childWorldTransform->tx = ((_hx_tmp6 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 812)					Float _hx_tmp7 = (local->tx * matrix->b);
HXDLIN( 812)					childWorldTransform->ty = ((_hx_tmp7 + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 814)				child->_hx___getRenderBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 818)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_823___hitTest)
HXLINE( 825)		bool _hx_tmp;
HXDLIN( 825)		bool _hx_tmp1;
HXDLIN( 825)		if (!(!(hitObject->get_visible()))) {
HXLINE( 825)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 825)			_hx_tmp1 = true;
            		}
HXDLIN( 825)		if (!(_hx_tmp1)) {
HXLINE( 825)			bool _hx_tmp2;
HXDLIN( 825)			if (interactiveOnly) {
HXLINE( 825)				_hx_tmp2 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 825)				_hx_tmp2 = false;
            			}
HXDLIN( 825)			if (_hx_tmp2) {
HXLINE( 825)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 825)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 825)			_hx_tmp = true;
            		}
HXDLIN( 825)		if (_hx_tmp) {
HXLINE( 825)			return false;
            		}
HXLINE( 826)		bool _hx_tmp3;
HXDLIN( 826)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 826)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 826)			_hx_tmp3 = false;
            		}
HXDLIN( 826)		if (_hx_tmp3) {
HXLINE( 826)			return false;
            		}
HXLINE( 828)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 830)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE( 831)			point->setTo(x,y);
HXLINE( 832)			{
HXLINE( 832)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 832)				Float norm = (_this->a * _this->d);
HXDLIN( 832)				Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 832)				if ((norm1 == (int)0)) {
HXLINE( 832)					point->x = -(_this->tx);
HXDLIN( 832)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 832)					Float _this1 = _this->c;
HXDLIN( 832)					Float px = (_this1 * (_this->ty - point->y));
HXDLIN( 832)					Float _this2 = _this->d;
HXDLIN( 832)					Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (point->x - _this->tx))));
HXDLIN( 832)					Float _this3 = _this->a;
HXDLIN( 832)					Float _hx_tmp4 = (_this3 * (point->y - _this->ty));
HXDLIN( 832)					Float _this4 = _this->b;
HXDLIN( 832)					point->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp4 + (_this4 * (_this->tx - point->x))));
HXDLIN( 832)					point->x = px1;
            				}
            			}
HXLINE( 834)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 836)				::openfl::geom::Point_obj::_hx___pool->release(point);
HXLINE( 837)				return false;
            			}
HXLINE( 841)			::openfl::geom::Point_obj::_hx___pool->release(point);
            		}
HXLINE( 845)		int i = this->_hx___children->length;
HXLINE( 846)		if (interactiveOnly) {
HXLINE( 848)			bool _hx_tmp5;
HXDLIN( 848)			if (hx::IsNotNull( stack )) {
HXLINE( 848)				_hx_tmp5 = !(this->mouseChildren);
            			}
            			else {
HXLINE( 848)				_hx_tmp5 = true;
            			}
HXDLIN( 848)			if (_hx_tmp5) {
HXLINE( 850)				while(true){
HXLINE( 850)					i = (i - (int)1);
HXDLIN( 850)					if (!((i >= (int)0))) {
HXLINE( 850)						goto _hx_goto_37;
            					}
HXLINE( 852)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 854)						if (hx::IsNotNull( stack )) {
HXLINE( 856)							stack->push(hitObject);
            						}
HXLINE( 860)						return true;
            					}
            				}
            				_hx_goto_37:;
            			}
            			else {
HXLINE( 866)				if (hx::IsNotNull( stack )) {
HXLINE( 868)					int length = stack->length;
HXLINE( 870)					bool interactive = false;
HXLINE( 871)					bool hitTest = false;
HXLINE( 873)					while(true){
HXLINE( 873)						i = (i - (int)1);
HXDLIN( 873)						if (!((i >= (int)0))) {
HXLINE( 873)							goto _hx_goto_38;
            						}
HXLINE( 875)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 877)						bool _hx_tmp6;
HXDLIN( 877)						if (!(interactive)) {
HXLINE( 877)							if (this->mouseEnabled) {
HXLINE( 877)								_hx_tmp6 = !(hitTest);
            							}
            							else {
HXLINE( 877)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 877)							_hx_tmp6 = true;
            						}
HXDLIN( 877)						if (_hx_tmp6) {
HXLINE( 879)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 881)								hitTest = true;
HXLINE( 883)								bool _hx_tmp7;
HXDLIN( 883)								if (interactive) {
HXLINE( 883)									_hx_tmp7 = (stack->length > length);
            								}
            								else {
HXLINE( 883)									_hx_tmp7 = false;
            								}
HXDLIN( 883)								if (_hx_tmp7) {
HXLINE( 885)									goto _hx_goto_38;
            								}
            							}
            						}
            					}
            					_hx_goto_38:;
HXLINE( 895)					if (hitTest) {
HXLINE( 897)						stack->insert(length,hitObject);
HXLINE( 898)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 906)			while(true){
HXLINE( 906)				i = (i - (int)1);
HXDLIN( 906)				if (!((i >= (int)0))) {
HXLINE( 906)					goto _hx_goto_39;
            				}
HXLINE( 908)				this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >());
            			}
            			_hx_goto_39:;
            		}
HXLINE( 914)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_919___hitTestMask)
HXLINE( 921)		int i = this->_hx___children->length;
HXLINE( 923)		while(true){
HXLINE( 923)			i = (i - (int)1);
HXDLIN( 923)			if (!((i >= (int)0))) {
HXLINE( 923)				goto _hx_goto_41;
            			}
HXLINE( 925)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 927)				return true;
            			}
            		}
            		_hx_goto_41:;
HXLINE( 933)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_938___readGraphicsData)
HXLINE( 940)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 942)		if (recurse) {
HXLINE( 944)			int _g = (int)0;
HXDLIN( 944)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 944)			while((_g < _g1->length)){
HXLINE( 944)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 944)				_g = (_g + (int)1);
HXLINE( 946)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_955___renderCairo)
HXLINE( 958)		{
HXLINE( 958)			{
HXLINE( 958)				int _g = (int)0;
HXDLIN( 958)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN( 958)				while((_g < _g1->get_length())){
HXLINE( 958)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 958)					_g = (_g + (int)1);
HXDLIN( 958)					if (hx::IsNull( orphan->stage )) {
HXLINE( 958)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 958)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE( 960)		bool _hx_tmp;
HXDLIN( 960)		if (!(!(this->_hx___renderable))) {
HXLINE( 960)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 960)			_hx_tmp = true;
            		}
HXDLIN( 960)		if (_hx_tmp) {
HXLINE( 960)			return;
            		}
HXLINE( 962)		this->super::_hx___renderCairo(renderer);
HXLINE( 964)		bool _hx_tmp1;
HXDLIN( 964)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 964)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 964)			_hx_tmp1 = false;
            		}
HXDLIN( 964)		if (_hx_tmp1) {
HXLINE( 964)			return;
            		}
HXLINE( 966)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 968)		if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 970)			{
HXLINE( 970)				int _g2 = (int)0;
HXDLIN( 970)				::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN( 970)				while((_g2 < _g11->length)){
HXLINE( 970)					 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 970)					_g2 = (_g2 + (int)1);
HXLINE( 972)					child->_hx___renderCairo(renderer);
HXLINE( 973)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 977)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 981)			int _g3 = (int)0;
HXDLIN( 981)			::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN( 981)			while((_g3 < _g12->length)){
HXLINE( 981)				 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 981)				_g3 = (_g3 + (int)1);
HXLINE( 983)				child1->_hx___renderCairo(renderer);
            			}
            		}
HXLINE( 989)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_995___renderCairoMask)
HXLINE( 998)		{
HXLINE( 998)			{
HXLINE( 998)				int _g = (int)0;
HXDLIN( 998)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN( 998)				while((_g < _g1->get_length())){
HXLINE( 998)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 998)					_g = (_g + (int)1);
HXDLIN( 998)					if (hx::IsNull( orphan->stage )) {
HXLINE( 998)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 998)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1000)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1002)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE(1006)		{
HXLINE(1006)			int _g2 = (int)0;
HXDLIN(1006)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1006)			while((_g2 < _g11->length)){
HXLINE(1006)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1006)				_g2 = (_g2 + (int)1);
HXLINE(1008)				child->_hx___renderCairoMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1016___renderCanvas)
HXLINE(1018)		{
HXLINE(1018)			{
HXLINE(1018)				int _g = (int)0;
HXDLIN(1018)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1018)				while((_g < _g1->get_length())){
HXLINE(1018)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1018)					_g = (_g + (int)1);
HXDLIN(1018)					if (hx::IsNull( orphan->stage )) {
HXLINE(1018)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1018)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1020)		bool _hx_tmp;
HXDLIN(1020)		bool _hx_tmp1;
HXDLIN(1020)		if (!(!(this->_hx___renderable))) {
HXLINE(1020)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(1020)			_hx_tmp1 = true;
            		}
HXDLIN(1020)		if (!(_hx_tmp1)) {
HXLINE(1020)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1020)				if (!((this->get_mask()->get_width() <= (int)0))) {
HXLINE(1020)					_hx_tmp = (this->get_mask()->get_height() <= (int)0);
            				}
            				else {
HXLINE(1020)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1020)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1020)			_hx_tmp = true;
            		}
HXDLIN(1020)		if (_hx_tmp) {
HXLINE(1020)			return;
            		}
HXLINE(1024)		this->super::_hx___renderCanvas(renderer);
HXLINE(1026)		bool _hx_tmp2;
HXDLIN(1026)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1026)			_hx_tmp2 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1026)			_hx_tmp2 = false;
            		}
HXDLIN(1026)		if (_hx_tmp2) {
HXLINE(1026)			return;
            		}
HXLINE(1028)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1030)		if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1032)			{
HXLINE(1032)				int _g2 = (int)0;
HXDLIN(1032)				::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1032)				while((_g2 < _g11->length)){
HXLINE(1032)					 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1032)					_g2 = (_g2 + (int)1);
HXLINE(1034)					child->_hx___renderCanvas(renderer);
HXLINE(1035)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE(1039)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE(1043)			int _g3 = (int)0;
HXDLIN(1043)			::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1043)			while((_g3 < _g12->length)){
HXLINE(1043)				 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1043)				_g3 = (_g3 + (int)1);
HXLINE(1045)				child1->_hx___renderCanvas(renderer);
            			}
            		}
HXLINE(1051)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1058___renderCanvasMask)
HXLINE(1060)		{
HXLINE(1060)			{
HXLINE(1060)				int _g = (int)0;
HXDLIN(1060)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1060)				while((_g < _g1->get_length())){
HXLINE(1060)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1060)					_g = (_g + (int)1);
HXDLIN(1060)					if (hx::IsNull( orphan->stage )) {
HXLINE(1060)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1060)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1062)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1064)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE(1068)		{
HXLINE(1068)			int _g2 = (int)0;
HXDLIN(1068)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1068)			while((_g2 < _g11->length)){
HXLINE(1068)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1068)				_g2 = (_g2 + (int)1);
HXLINE(1070)				child->_hx___renderCanvasMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1077___renderDOM)
HXLINE(1079)		{
HXLINE(1079)			{
HXLINE(1079)				int _g = (int)0;
HXDLIN(1079)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1079)				while((_g < _g1->get_length())){
HXLINE(1079)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1079)					_g = (_g + (int)1);
HXDLIN(1079)					if (hx::IsNull( orphan->stage )) {
HXLINE(1079)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1079)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1081)		this->super::_hx___renderDOM(renderer);
HXLINE(1083)		bool _hx_tmp;
HXDLIN(1083)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1083)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1083)			_hx_tmp = false;
            		}
HXDLIN(1083)		if (_hx_tmp) {
HXLINE(1083)			return;
            		}
HXLINE(1085)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1087)		if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1089)			{
HXLINE(1089)				int _g2 = (int)0;
HXDLIN(1089)				::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1089)				while((_g2 < _g11->length)){
HXLINE(1089)					 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1089)					_g2 = (_g2 + (int)1);
HXLINE(1091)					child->_hx___renderDOM(renderer);
HXLINE(1092)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE(1096)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE(1100)			int _g3 = (int)0;
HXDLIN(1100)			::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1100)			while((_g3 < _g12->length)){
HXLINE(1100)				 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1100)				_g3 = (_g3 + (int)1);
HXLINE(1102)				child1->_hx___renderDOM(renderer);
            			}
            		}
HXLINE(1108)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1113___renderDOMClear)
HXLINE(1115)		{
HXLINE(1115)			{
HXLINE(1115)				int _g = (int)0;
HXDLIN(1115)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1115)				while((_g < _g1->get_length())){
HXLINE(1115)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1115)					_g = (_g + (int)1);
HXDLIN(1115)					if (hx::IsNull( orphan->stage )) {
HXLINE(1115)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1115)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1117)		{
HXLINE(1117)			int _g2 = (int)0;
HXDLIN(1117)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1117)			while((_g2 < _g11->length)){
HXLINE(1117)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1117)				_g2 = (_g2 + (int)1);
HXLINE(1118)				child->_hx___renderDOMClear(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1124___renderGL)
HXLINE(1126)		{
HXLINE(1126)			{
HXLINE(1126)				int _g = (int)0;
HXDLIN(1126)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1126)				while((_g < _g1->get_length())){
HXLINE(1126)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1126)					_g = (_g + (int)1);
HXDLIN(1126)					if (hx::IsNull( orphan->stage )) {
HXLINE(1126)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1126)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1128)		bool _hx_tmp;
HXDLIN(1128)		if (!(!(this->_hx___renderable))) {
HXLINE(1128)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(1128)			_hx_tmp = true;
            		}
HXDLIN(1128)		if (_hx_tmp) {
HXLINE(1128)			return;
            		}
HXLINE(1130)		this->super::_hx___renderGL(renderer);
HXLINE(1132)		bool _hx_tmp1;
HXDLIN(1132)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1132)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1132)			_hx_tmp1 = false;
            		}
HXDLIN(1132)		if (_hx_tmp1) {
HXLINE(1132)			return;
            		}
HXLINE(1134)		if ((this->_hx___children->length > (int)0)) {
HXLINE(1136)			renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1139)			if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1141)				{
HXLINE(1141)					int _g2 = (int)0;
HXDLIN(1141)					::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1141)					while((_g2 < _g11->length)){
HXLINE(1141)						 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1141)						_g2 = (_g2 + (int)1);
HXLINE(1143)						child->_hx___renderGL(renderer);
HXLINE(1144)						child->_hx___renderDirty = false;
            					}
            				}
HXLINE(1148)				this->_hx___renderDirty = false;
            			}
            			else {
HXLINE(1152)				int _g3 = (int)0;
HXDLIN(1152)				::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1152)				while((_g3 < _g12->length)){
HXLINE(1152)					 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1152)					_g3 = (_g3 + (int)1);
HXLINE(1154)					child1->_hx___renderGL(renderer);
            				}
            			}
            		}
HXLINE(1162)		if ((this->_hx___children->length > (int)0)) {
HXLINE(1165)			renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1172___renderGLMask)
HXLINE(1174)		{
HXLINE(1174)			{
HXLINE(1174)				int _g = (int)0;
HXDLIN(1174)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1174)				while((_g < _g1->get_length())){
HXLINE(1174)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1174)					_g = (_g + (int)1);
HXDLIN(1174)					if (hx::IsNull( orphan->stage )) {
HXLINE(1174)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1174)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1176)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1179)			::openfl::_internal::renderer::opengl::GLShape_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(1183)		{
HXLINE(1183)			int _g2 = (int)0;
HXDLIN(1183)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1183)			while((_g2 < _g11->length)){
HXLINE(1183)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1183)				_g2 = (_g2 + (int)1);
HXLINE(1185)				child->_hx___renderGLMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1192___setStageReference)
HXLINE(1194)		this->super::_hx___setStageReference(stage);
HXLINE(1196)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1198)			int _g = (int)0;
HXDLIN(1198)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1198)			while((_g < _g1->length)){
HXLINE(1198)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1198)				_g = (_g + (int)1);
HXLINE(1200)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1211___setWorldTransformInvalid)
HXDLIN(1211)		if (!(this->_hx___worldTransformInvalid)) {
HXLINE(1213)			this->_hx___worldTransformInvalid = true;
HXLINE(1215)			if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1217)				int _g = (int)0;
HXDLIN(1217)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1217)				while((_g < _g1->length)){
HXLINE(1217)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1217)					_g = (_g + (int)1);
HXLINE(1219)					child->_hx___setWorldTransformInvalid();
            				}
            			}
            		}
            	}


 ::Dynamic DisplayObjectContainer_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1230___shouldCacheHardware)
HXLINE(1232)		if (hx::IsEq( value,true )) {
HXLINE(1232)			return true;
            		}
HXLINE(1233)		value = this->super::_hx___shouldCacheHardware(value);
HXLINE(1234)		if (hx::IsEq( value,true )) {
HXLINE(1234)			return true;
            		}
HXLINE(1236)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1238)			int _g = (int)0;
HXDLIN(1238)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1238)			while((_g < _g1->length)){
HXLINE(1238)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1238)				_g = (_g + (int)1);
HXLINE(1240)				value = child->_hx___shouldCacheHardware(value);
HXLINE(1241)				if (hx::IsEq( value,true )) {
HXLINE(1241)					return true;
            				}
            			}
            		}
HXLINE(1247)		return value;
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1254___stopAllMovieClips)
HXDLIN(1254)		int _g = (int)0;
HXDLIN(1254)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1254)		while((_g < _g1->length)){
HXDLIN(1254)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1254)			_g = (_g + (int)1);
HXLINE(1256)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1263___update)
HXLINE(1265)		this->super::_hx___update(transformOnly,updateChildren);
HXLINE(1267)		if (updateChildren) {
HXLINE(1269)			int _g = (int)0;
HXDLIN(1269)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1269)			while((_g < _g1->length)){
HXLINE(1269)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1269)				_g = (_g + (int)1);
HXLINE(1271)				child->_hx___update(transformOnly,true);
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1289_get_numChildren)
HXDLIN(1289)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )


hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(tabChildren,"tabChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(tabChildren,"tabChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numChildren() ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { return hx::Val( tabChildren ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return hx::Val( mouseChildren ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return hx::Val( _hx___removedChildren ); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return hx::Val( stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__cleanupRemovedChildren") ) { return hx::Val( _hx___cleanupRemovedChildren_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { tabChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"));
	outFields->push(HX_HCSTRING("numChildren","\xa5","\x69","\x80","\x5c"));
	outFields->push(HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"));
	outFields->push(HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff")},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,tabChildren),HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"),
	HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"),
	HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("areInaccessibleObjectsUnderPoint","\x3d","\x22","\x9b","\x1e"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getChildAt","\xb9","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChildByName","\x88","\xb9","\x73","\xa3"),
	HX_HCSTRING("getChildIndex","\x0c","\x68","\x02","\xb9"),
	HX_HCSTRING("getObjectsUnderPoint","\x96","\x10","\xd5","\x80"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("removeChildren","\xa3","\x55","\xc0","\x3a"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("setChildIndex","\x18","\x4a","\x08","\xfe"),
	HX_HCSTRING("stopAllMovieClips","\xf2","\x60","\xf8","\xa0"),
	HX_HCSTRING("swapChildren","\xf2","\x4a","\x53","\xe0"),
	HX_HCSTRING("swapChildrenAt","\x85","\xa4","\xf1","\x13"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__cleanupRemovedChildren","\x5b","\x84","\x61","\xc1"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getFilterBounds","\xe3","\x3a","\xba","\x18"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setWorldTransformInvalid","\x7b","\xc9","\xb9","\xd4"),
	HX_HCSTRING("__shouldCacheHardware","\xb7","\xaf","\xf5","\x89"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("get_numChildren","\x3c","\x21","\x62","\x1d"),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	hx::Object *dummy = new DisplayObjectContainer_obj;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObjectContainer","\x4a","\x52","\xef","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
