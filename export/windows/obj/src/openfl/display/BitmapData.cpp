// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageFileFormat
#include <lime/graphics/ImageFileFormat.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskShader
#include <openfl/_internal/renderer/opengl/GLMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7567b6ca69cedca_254_new,"openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",254,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_362_applyFilter,"openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",362,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_411_clone,"openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",411,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_456_colorTransform,"openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",456,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_475_compare,"openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",475,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_644_copyChannel,"openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",644,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_712_copyPixels,"openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",712,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_750_dispose,"openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",750,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_806_disposeImage,"openfl.display.BitmapData","disposeImage",0x60a6bee7,"openfl.display.BitmapData.disposeImage","openfl/display/BitmapData.hx",806,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_883_draw,"openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",883,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1036_drawWithQuality,"openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",1036,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1041_encode,"openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",1041,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1091_fillRect,"openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",1091,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1107_floodFill,"openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",1107,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1229_generateFilterRect,"openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",1229,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1234_getBuffer,"openfl.display.BitmapData","getBuffer",0xe0f6acab,"openfl.display.BitmapData.getBuffer","openfl/display/BitmapData.hx",1234,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1442_getColorBoundsRect,"openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",1442,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1482_getPixel,"openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",1482,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1512_getPixel32,"openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",1512,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1529_getPixels,"openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",1529,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1541_getSurface,"openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",1541,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1556_getTexture,"openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",1556,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1738_getVector,"openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",1738,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1755_histogram,"openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",1755,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1772_hitTest,"openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",1772,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1961_lock,"openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",1961,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1968_merge,"openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",1968,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2011_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2011,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2004_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2004,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2062_paletteMap,"openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",2062,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2162_perlinNoise,"openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",2162,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2181_scroll,"openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",2181,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2206_setPixel,"openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",2206,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2245_setPixel32,"openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",2245,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2272_setPixels,"openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",2272,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2293_setVector,"openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",2293,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2358_threshold,"openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",2358,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2379_unlock,"openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",2379,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2386___applyAlpha,"openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",2386,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2406___drawCairo,"openfl.display.BitmapData","__drawCairo",0x71da5c79,"openfl.display.BitmapData.__drawCairo","openfl/display/BitmapData.hx",2406,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2434___drawCanvas,"openfl.display.BitmapData","__drawCanvas",0x30879bc7,"openfl.display.BitmapData.__drawCanvas","openfl/display/BitmapData.hx",2434,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2454___drawGL,"openfl.display.BitmapData","__drawGL",0xb0ddbd74,"openfl.display.BitmapData.__drawGL","openfl/display/BitmapData.hx",2454,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2467___fillRect,"openfl.display.BitmapData","__fillRect",0x05dff852,"openfl.display.BitmapData.__fillRect","openfl/display/BitmapData.hx",2467,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2512___fromBase64,"openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",2512,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2520___fromBytes,"openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",2520,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2534___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",2534,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2544___fromImage,"openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",2544,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2565___getBounds,"openfl.display.BitmapData","__getBounds",0x4b2a0640,"openfl.display.BitmapData.__getBounds","openfl/display/BitmapData.hx",2565,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2575___getFramebuffer,"openfl.display.BitmapData","__getFramebuffer",0x47017542,"openfl.display.BitmapData.__getFramebuffer","openfl/display/BitmapData.hx",2575,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2633___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",2633,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2631___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",2631,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2645___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",2645,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2643___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",2643,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2664___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",2664,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2662___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",2662,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2674___renderCairo,"openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",2674,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2708___renderCairoMask,"openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",2708,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2715___renderCanvas,"openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",2715,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2737___renderCanvasMask,"openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",2737,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2744___renderDOM,"openfl.display.BitmapData","__renderDOM",0x360da361,"openfl.display.BitmapData.__renderDOM","openfl/display/BitmapData.hx",2744,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2751___renderGL,"openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",2751,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2782___renderGLMask,"openfl.display.BitmapData","__renderGLMask",0xc7204612,"openfl.display.BitmapData.__renderGLMask","openfl/display/BitmapData.hx",2782,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2807___resize,"openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",2807,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2820___setUVRect,"openfl.display.BitmapData","__setUVRect",0x4b14ffdc,"openfl.display.BitmapData.__setUVRect","openfl/display/BitmapData.hx",2820,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2861___sync,"openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",2861,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2872___update,"openfl.display.BitmapData","__update",0x580cd054,"openfl.display.BitmapData.__update","openfl/display/BitmapData.hx",2872,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2877___updateTransforms,"openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",2877,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1116_fromBase64,"openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",1116,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1131_fromBytes,"openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",1131,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1160_fromFile,"openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",1160,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1174_fromImage,"openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",1174,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1186_fromTexture,"openfl.display.BitmapData","fromTexture",0x71aada46,"openfl.display.BitmapData.fromTexture","openfl/display/BitmapData.hx",1186,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1916_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1916,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1914_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1914,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1925_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",1925,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1946_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1946,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1944_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1944,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_153_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",153,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_154_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",154,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_155_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",155,0xdd12d5b9)
namespace openfl{
namespace display{

void BitmapData_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor){
bool transparent = __o_transparent.Default(true);
int fillColor = __o_fillColor.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_254_new)
HXLINE( 256)		this->transparent = transparent;
HXLINE( 263)		if ((width < (int)0)) {
HXLINE( 263)			width = (int)0;
            		}
            		else {
HXLINE( 263)			width = width;
            		}
HXLINE( 264)		if ((height < (int)0)) {
HXLINE( 264)			height = (int)0;
            		}
            		else {
HXLINE( 264)			height = height;
            		}
HXLINE( 266)		this->width = width;
HXLINE( 267)		this->height = height;
HXLINE( 268)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height);
HXLINE( 270)		this->_hx___textureWidth = width;
HXLINE( 271)		this->_hx___textureHeight = height;
HXLINE( 273)		bool _hx_tmp;
HXDLIN( 273)		if ((width > (int)0)) {
HXLINE( 273)			_hx_tmp = (height > (int)0);
            		}
            		else {
HXLINE( 273)			_hx_tmp = false;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			if (transparent) {
HXLINE( 277)				if ((((int)fillColor & (int)(int)-16777216) == (int)0)) {
HXLINE( 279)					fillColor = (int)0;
            				}
            			}
            			else {
HXLINE( 285)				fillColor = ((int)(int)-16777216 | (int)((int)fillColor & (int)(int)16777215));
            			}
HXLINE( 289)			fillColor = ((int)((int)fillColor << (int)(int)8) | (int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255));
HXLINE( 292)			 ::Dynamic elements = ((width * height) * (int)4);
HXDLIN( 292)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 292)			if (hx::IsNotNull( elements )) {
HXLINE( 292)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            			}
            			else {
HXLINE( 292)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 292)			 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 293)			buffer->format = (int)2;
HXLINE( 294)			buffer->premultiplied = true;
HXLINE( 296)			this->image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 298)			if ((fillColor != (int)0)) {
HXLINE( 300)				 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 300)				_hx_tmp1->fillRect(this->image->get_rect(),fillColor,null());
            			}
HXLINE( 321)			this->image->set_transparent(transparent);
HXLINE( 323)			this->_hx___isValid = true;
HXLINE( 324)			this->readable = true;
            		}
HXLINE( 328)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 329)		this->_hx___worldAlpha = (int)1;
HXLINE( 330)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 331)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 332)		this->_hx___renderable = true;
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28c743a7;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___getBounds,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::display::DOMRenderer))&::openfl::display::BitmapData_obj::_hx___renderDOM,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::BitmapData_obj::_hx___renderGLMask,
	( void (hx::Object::*)(bool,bool))&::openfl::display::BitmapData_obj::_hx___update,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_362_applyFilter)
HXLINE( 364)		bool _hx_tmp;
HXDLIN( 364)		bool _hx_tmp1;
HXDLIN( 364)		if (!(!(this->readable))) {
HXLINE( 364)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 364)			_hx_tmp1 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp1)) {
HXLINE( 364)			_hx_tmp = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE( 364)			_hx_tmp = true;
            		}
HXDLIN( 364)		if (_hx_tmp) {
HXLINE( 364)			return;
            		}
HXLINE( 368)		bool needSecondBitmapData = filter->_hx___needSecondBitmapData;
HXLINE( 369)		bool needCopyOfOriginal = filter->_hx___preserveObject;
HXLINE( 371)		 ::openfl::display::BitmapData bitmapData2 = null();
HXLINE( 372)		 ::openfl::display::BitmapData bitmapData3 = null();
HXLINE( 374)		if (needSecondBitmapData) {
HXLINE( 375)			bitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0);
            		}
            		else {
HXLINE( 377)			bitmapData2 = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 380)		if (needCopyOfOriginal) {
HXLINE( 381)			bitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0);
            		}
HXLINE( 384)		if (filter->_hx___preserveObject) {
HXLINE( 385)			bitmapData3->copyPixels(hx::ObjectPtr<OBJ_>(this),this->rect,destPoint,null(),null(),null());
            		}
HXLINE( 388)		 ::openfl::display::BitmapData lastBitmap = filter->_hx___applyFilter(bitmapData2,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
HXLINE( 390)		if (filter->_hx___preserveObject) {
HXLINE( 391)			lastBitmap->draw(bitmapData3,null(),null(),null(),null(),null());
            		}
HXLINE( 394)		bool _hx_tmp2;
HXDLIN( 394)		if (needSecondBitmapData) {
HXLINE( 394)			_hx_tmp2 = hx::IsEq( lastBitmap,bitmapData2 );
            		}
            		else {
HXLINE( 394)			_hx_tmp2 = false;
            		}
HXDLIN( 394)		if (_hx_tmp2) {
HXLINE( 396)			bitmapData2->image->version = this->image->version;
HXLINE( 397)			this->image = bitmapData2->image;
            		}
HXLINE( 401)		this->image->dirty = true;
HXLINE( 402)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_411_clone)
HXLINE( 413)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 415)		if (!(this->_hx___isValid)) {
HXLINE( 417)			bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,this->transparent,(int)0);
            		}
            		else {
HXLINE( 419)			bool _hx_tmp;
HXDLIN( 419)			if (!(this->readable)) {
HXLINE( 419)				_hx_tmp = hx::IsNull( this->image );
            			}
            			else {
HXLINE( 419)				_hx_tmp = false;
            			}
HXDLIN( 419)			if (_hx_tmp) {
HXLINE( 421)				bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,this->transparent,(int)0);
HXLINE( 423)				bitmapData->width = this->width;
HXLINE( 424)				bitmapData->height = this->height;
HXLINE( 425)				bitmapData->_hx___textureWidth = this->_hx___textureWidth;
HXLINE( 426)				bitmapData->_hx___textureHeight = this->_hx___textureHeight;
HXLINE( 427)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 429)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 430)				bitmapData->_hx___framebufferContext = this->_hx___framebufferContext;
HXLINE( 431)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 432)				bitmapData->_hx___textureContext = this->_hx___textureContext;
HXLINE( 433)				bitmapData->_hx___isValid = true;
            			}
            			else {
HXLINE( 437)				 ::lime::graphics::Image bitmapData1 = this->image->clone();
HXDLIN( 437)				bitmapData = ::openfl::display::BitmapData_obj::fromImage(bitmapData1,this->transparent);
            			}
            		}
HXLINE( 441)		bitmapData->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE( 442)		bitmapData->_hx___renderTransform->copyFrom(this->_hx___renderTransform);
HXLINE( 444)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_456_colorTransform)
HXLINE( 458)		if (!(this->readable)) {
HXLINE( 458)			return;
            		}
HXLINE( 460)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 460)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 460)		_hx_tmp->colorTransform(_hx_tmp1,colorTransform->_hx___toLimeColorMatrix());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_475_compare)
HXLINE( 477)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 479)			return (int)0;
            		}
            		else {
HXLINE( 481)			if (hx::IsNull( otherBitmapData )) {
HXLINE( 483)				return (int)-1;
            			}
            			else {
HXLINE( 485)				bool _hx_tmp;
HXDLIN( 485)				if ((this->readable != false)) {
HXLINE( 485)					_hx_tmp = (otherBitmapData->readable == false);
            				}
            				else {
HXLINE( 485)					_hx_tmp = true;
            				}
HXDLIN( 485)				if (_hx_tmp) {
HXLINE( 487)					return (int)-2;
            				}
            				else {
HXLINE( 489)					if ((this->width != otherBitmapData->width)) {
HXLINE( 491)						return (int)-3;
            					}
            					else {
HXLINE( 493)						if ((this->height != otherBitmapData->height)) {
HXLINE( 495)							return (int)-4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 499)		bool _hx_tmp1;
HXDLIN( 499)		bool _hx_tmp2;
HXDLIN( 499)		if (hx::IsNotNull( this->image )) {
HXLINE( 499)			_hx_tmp2 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 499)			_hx_tmp2 = false;
            		}
HXDLIN( 499)		if (_hx_tmp2) {
HXLINE( 499)			int _hx_tmp3 = this->image->get_format();
HXDLIN( 499)			_hx_tmp1 = (_hx_tmp3 == otherBitmapData->image->get_format());
            		}
            		else {
HXLINE( 499)			_hx_tmp1 = false;
            		}
HXDLIN( 499)		if (_hx_tmp1) {
HXLINE( 501)			 ::lime::utils::ArrayBufferView bytes = this->image->get_data();
HXLINE( 502)			 ::lime::utils::ArrayBufferView otherBytes = otherBitmapData->image->get_data();
HXLINE( 503)			bool equal = true;
HXLINE( 505)			{
HXLINE( 505)				int _g1 = (int)0;
HXDLIN( 505)				int _g = bytes->length;
HXDLIN( 505)				while((_g1 < _g)){
HXLINE( 505)					_g1 = (_g1 + (int)1);
HXDLIN( 505)					int i = (_g1 - (int)1);
HXLINE( 507)					int a = ((int)::__hxcpp_memory_get_byte(bytes->buffer->b,(bytes->byteOffset + i)) & (int)(int)255);
HXDLIN( 507)					if (hx::IsNotEq( a,((int)::__hxcpp_memory_get_byte(otherBytes->buffer->b,(otherBytes->byteOffset + i)) & (int)(int)255) )) {
HXLINE( 509)						equal = false;
HXLINE( 510)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 515)			if (equal) {
HXLINE( 517)				return (int)0;
            			}
            		}
HXLINE( 523)		 ::openfl::display::BitmapData bitmapData = null();
HXLINE( 524)		bool foundDifference;
HXDLIN( 524)		int pixel;
HXDLIN( 524)		int otherPixel;
HXDLIN( 524)		int comparePixel;
HXDLIN( 524)		int r;
HXDLIN( 524)		int g;
HXDLIN( 524)		int b;
HXDLIN( 524)		int a1;
HXLINE( 526)		{
HXLINE( 526)			int _g11 = (int)0;
HXDLIN( 526)			int _g2 = this->height;
HXDLIN( 526)			while((_g11 < _g2)){
HXLINE( 526)				_g11 = (_g11 + (int)1);
HXDLIN( 526)				int y = (_g11 - (int)1);
HXLINE( 528)				{
HXLINE( 528)					int _g3 = (int)0;
HXDLIN( 528)					int _g21 = this->width;
HXDLIN( 528)					while((_g3 < _g21)){
HXLINE( 528)						_g3 = (_g3 + (int)1);
HXDLIN( 528)						int x = (_g3 - (int)1);
HXLINE( 530)						foundDifference = false;
HXLINE( 532)						pixel = this->getPixel32(x,y);
HXLINE( 533)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 534)						comparePixel = (int)0;
HXLINE( 536)						if ((pixel != otherPixel)) {
HXLINE( 538)							r = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)16) & (int)(int)255));
HXLINE( 539)							g = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)8) & (int)(int)255));
HXLINE( 540)							b = (((int)pixel & (int)(int)255) - ((int)otherPixel & (int)(int)255));
HXLINE( 542)							if ((r < (int)0)) {
HXLINE( 542)								r = (r * (int)-1);
            							}
HXLINE( 543)							if ((g < (int)0)) {
HXLINE( 543)								g = (g * (int)-1);
            							}
HXLINE( 544)							if ((b < (int)0)) {
HXLINE( 544)								b = (b * (int)-1);
            							}
HXLINE( 546)							bool _hx_tmp4;
HXDLIN( 546)							bool _hx_tmp5;
HXDLIN( 546)							if ((r == (int)0)) {
HXLINE( 546)								_hx_tmp5 = (g == (int)0);
            							}
            							else {
HXLINE( 546)								_hx_tmp5 = false;
            							}
HXDLIN( 546)							if (_hx_tmp5) {
HXLINE( 546)								_hx_tmp4 = (b == (int)0);
            							}
            							else {
HXLINE( 546)								_hx_tmp4 = false;
            							}
HXDLIN( 546)							if (_hx_tmp4) {
HXLINE( 548)								a1 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)24) & (int)(int)255));
HXLINE( 550)								if ((a1 != (int)0)) {
HXLINE( 552)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)(int)16711680) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 553)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)(int)65280) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 554)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 555)									comparePixel = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 557)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 563)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 564)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 565)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
HXLINE( 566)								comparePixel = ((int)((int)((int)(int)-16777216 | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 568)								foundDifference = true;
            							}
            						}
HXLINE( 574)						if (foundDifference) {
HXLINE( 576)							if (hx::IsNull( bitmapData )) {
HXLINE( 578)								bool bitmapData1;
HXDLIN( 578)								if (!(this->transparent)) {
HXLINE( 578)									bitmapData1 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 578)									bitmapData1 = true;
            								}
HXDLIN( 578)								bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,bitmapData1,(int)0);
            							}
HXLINE( 582)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 590)		if (hx::IsNull( bitmapData )) {
HXLINE( 592)			return (int)0;
            		}
HXLINE( 596)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_644_copyChannel)
HXLINE( 646)		if (!(this->readable)) {
HXLINE( 646)			return;
            		}
HXLINE( 648)		 ::lime::graphics::ImageChannel sourceChannel1;
HXDLIN( 648)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 648)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 648)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 648)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 648)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 654)				return;
            			}
            		}
HXLINE( 658)		 ::lime::graphics::ImageChannel destChannel1;
HXDLIN( 658)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 658)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 658)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 658)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 658)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 664)				return;
            			}
            		}
HXLINE( 668)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 668)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 668)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 668)		_hx_tmp->copyChannel(sourceBitmapData1,_hx_tmp1,destPoint->_hx___toLimeVector2(),sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_712_copyPixels)
HXLINE( 714)		bool _hx_tmp;
HXDLIN( 714)		if (!(!(this->readable))) {
HXLINE( 714)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 714)			_hx_tmp = true;
            		}
HXDLIN( 714)		if (_hx_tmp) {
HXLINE( 714)			return;
            		}
HXLINE( 716)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 718)			::openfl::display::BitmapData_obj::_hx___tempVector->x = alphaPoint->x;
HXLINE( 719)			::openfl::display::BitmapData_obj::_hx___tempVector->y = alphaPoint->y;
            		}
HXLINE( 723)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 723)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 723)		 ::lime::math::Rectangle _hx_tmp2 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 723)		 ::lime::math::Vector2 _hx_tmp3 = destPoint->_hx___toLimeVector2();
HXDLIN( 723)		 ::lime::graphics::Image _hx_tmp4;
HXDLIN( 723)		if (hx::IsNotNull( alphaBitmapData )) {
HXLINE( 723)			_hx_tmp4 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 723)			_hx_tmp4 = null();
            		}
HXDLIN( 723)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 723)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 723)			_hx_tmp5 = ::openfl::display::BitmapData_obj::_hx___tempVector;
            		}
            		else {
HXLINE( 723)			_hx_tmp5 = null();
            		}
HXDLIN( 723)		_hx_tmp1->copyPixels(sourceBitmapData1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_750_dispose)
HXLINE( 752)		this->image = null();
HXLINE( 754)		this->width = (int)0;
HXLINE( 755)		this->height = (int)0;
HXLINE( 756)		this->rect = null();
HXLINE( 758)		this->_hx___isValid = false;
HXLINE( 759)		this->readable = false;
HXLINE( 761)		this->_hx___surface = null();
HXLINE( 763)		this->_hx___buffer = null();
HXLINE( 764)		this->_hx___framebuffer = null();
HXLINE( 765)		this->_hx___framebufferContext = null();
HXLINE( 766)		this->_hx___texture = null();
HXLINE( 767)		this->_hx___textureContext = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::disposeImage(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_806_disposeImage)
HXDLIN( 806)		this->readable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,disposeImage,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_883_draw)
HXLINE( 885)		if (hx::IsNull( source )) {
HXLINE( 885)			return;
            		}
HXLINE( 887)		::openfl::display::IBitmapDrawable_obj::_hx___update(source,false,true);
HXLINE( 889)		 ::openfl::geom::Matrix transform = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 891)		transform->copyFrom(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 892)		transform->invert();
HXLINE( 894)		if (hx::IsNotNull( matrix )) {
HXLINE( 896)			transform->concat(matrix);
            		}
HXLINE( 900)		 ::openfl::geom::Matrix clipMatrix = null();
HXLINE( 902)		if (hx::IsNotNull( clipRect )) {
HXLINE( 904)			clipMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 905)			clipMatrix->copyFrom(transform);
HXLINE( 906)			clipMatrix->invert();
            		}
HXLINE( 910)		 ::openfl::geom::ColorTransform _colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 911)		_colorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 912)		_colorTransform->_hx___invert();
HXLINE( 914)		if (!(this->readable)) {
HXLINE( 916)			if (hx::IsNull( this->_hx___textureContext )) {
HXLINE( 920)				this->_hx___textureContext = ::lime::app::Application_obj::current->_hx___window->context;
            			}
HXLINE( 927)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 929)				_colorTransform->_hx___combine(colorTransform);
            			}
HXLINE( 933)			 ::openfl::display::OpenGLRenderer renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,this->_hx___textureContext,hx::ObjectPtr<OBJ_>(this));
HXLINE( 934)			renderer->_hx___allowSmoothing = smoothing;
HXLINE( 935)			renderer->_hx___setBlendMode(blendMode);
HXLINE( 937)			renderer->_hx___worldTransform = transform;
HXLINE( 938)			renderer->_hx___worldAlpha = ((Float)(int)1 / (Float)( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE( 939)			renderer->_hx___worldColorTransform = _colorTransform;
HXLINE( 941)			renderer->_hx___resize(this->width,this->height);
HXLINE( 943)			if (hx::IsNotNull( clipRect )) {
HXLINE( 945)				renderer->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE( 949)			this->_hx___drawGL(source,renderer);
HXLINE( 951)			if (hx::IsNotNull( clipRect )) {
HXLINE( 953)				renderer->_hx___popMaskRect();
HXLINE( 954)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
            		else {
HXLINE( 962)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 964)				 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 965)				 ::openfl::geom::Matrix boundsMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 967)				::openfl::display::IBitmapDrawable_obj::_hx___getBounds(source,bounds,boundsMatrix);
HXLINE( 969)				int width = ::Math_obj::ceil(bounds->width);
HXLINE( 970)				int height = ::Math_obj::ceil(bounds->height);
HXLINE( 972)				boundsMatrix->tx = -(bounds->x);
HXLINE( 973)				boundsMatrix->ty = -(bounds->y);
HXLINE( 975)				 ::openfl::display::BitmapData copy =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,(int)0);
HXLINE( 976)				copy->draw(source,boundsMatrix,null(),null(),null(),null());
HXLINE( 978)				copy->colorTransform(copy->rect,colorTransform);
HXLINE( 979)				copy->_hx___renderTransform->identity();
HXLINE( 980)				copy->_hx___renderTransform->tx = bounds->x;
HXLINE( 981)				copy->_hx___renderTransform->ty = bounds->y;
HXLINE( 982)				copy->_hx___renderTransform->concat(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 983)				copy->_hx___worldAlpha = ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) );
HXLINE( 984)				copy->_hx___worldColorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 985)				source = copy;
HXLINE( 987)				::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
HXLINE( 988)				::openfl::geom::Matrix_obj::_hx___pool->release(boundsMatrix);
            			}
HXLINE( 996)			 ::openfl::display::CairoRenderer renderer1 =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->getSurface()));
HXLINE( 999)			renderer1->_hx___allowSmoothing = smoothing;
HXLINE(1000)			renderer1->_hx___setBlendMode(blendMode);
HXLINE(1002)			renderer1->_hx___worldTransform = transform;
HXLINE(1003)			renderer1->_hx___worldAlpha = ((Float)(int)1 / (Float)( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE(1004)			renderer1->_hx___worldColorTransform = _colorTransform;
HXLINE(1006)			if (hx::IsNotNull( clipRect )) {
HXLINE(1008)				renderer1->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE(1015)			this->_hx___drawCairo(source,renderer1);
HXLINE(1018)			if (hx::IsNotNull( clipRect )) {
HXLINE(1020)				renderer1->_hx___popMaskRect();
HXLINE(1021)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
HXLINE(1029)		::openfl::geom::Matrix_obj::_hx___pool->release(transform);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing, ::Dynamic quality){
bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1036_drawWithQuality)
HXDLIN(1036)		bool _hx_tmp;
HXDLIN(1036)		if (hx::IsNotEq( quality,(int)2 )) {
HXDLIN(1036)			_hx_tmp = smoothing;
            		}
            		else {
HXDLIN(1036)			_hx_tmp = false;
            		}
HXDLIN(1036)		this->draw(source,matrix,colorTransform,blendMode,clipRect,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1041_encode)
HXLINE(1043)		bool _hx_tmp;
HXDLIN(1043)		if (!(!(this->readable))) {
HXLINE(1043)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1043)			_hx_tmp = true;
            		}
HXDLIN(1043)		if (_hx_tmp) {
HXLINE(1043)			byteArray = null();
HXDLIN(1043)			return byteArray;
            		}
HXLINE(1044)		if (hx::IsNull( byteArray )) {
HXLINE(1044)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(1044)			byteArray = this1;
            		}
HXLINE(1046)		 ::lime::graphics::Image image = this->image;
HXLINE(1048)		if (!(rect->equals(this->rect))) {
HXLINE(1050)			 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(1051)			matrix->tx = ::Math_obj::round(-(rect->x));
HXLINE(1052)			matrix->ty = ::Math_obj::round(-(rect->y));
HXLINE(1054)			int bitmapData = ::Math_obj::ceil(rect->width);
HXDLIN(1054)			 ::openfl::display::BitmapData bitmapData1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapData,::Math_obj::ceil(rect->height),true,(int)0);
HXLINE(1055)			bitmapData1->draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),null());
HXLINE(1057)			image = bitmapData1->image;
HXLINE(1059)			::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            		}
HXLINE(1063)		if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >())) {
HXLINE(1065)			byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::PNG_dyn(),null())),null(),null());
HXLINE(1066)			return byteArray;
            		}
            		else {
HXLINE(1068)			if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >())) {
HXLINE(1070)				byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::JPEG_dyn(),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality)),null(),null());
HXLINE(1071)				return byteArray;
            			}
            		}
HXLINE(1075)		byteArray = null();
HXDLIN(1075)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1091_fillRect)
HXDLIN(1091)		this->_hx___fillRect(rect,color,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1107_floodFill)
HXLINE(1109)		if (!(this->readable)) {
HXLINE(1109)			return;
            		}
HXLINE(1110)		this->image->floodFill(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1229_generateFilterRect)
HXDLIN(1229)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::lime::graphics::opengl::GLObject BitmapData_obj::getBuffer( ::lime::graphics::RenderContext context){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1234_getBuffer)
HXLINE(1238)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE(1243)		bool _hx_tmp;
HXDLIN(1243)		if (hx::IsNotNull( this->_hx___buffer )) {
HXLINE(1243)			_hx_tmp = hx::IsNotEq( this->_hx___bufferContext,context );
            		}
            		else {
HXLINE(1243)			_hx_tmp = true;
            		}
HXDLIN(1243)		if (_hx_tmp) {
HXLINE(1272)			this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
HXLINE(1274)			int uvWidth = (int)1;
HXLINE(1275)			int uvHeight = (int)1;
HXLINE(1292)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)56,(int)8);
HXDLIN(1292)			this->_hx___bufferData = this1;
HXLINE(1294)			{
HXLINE(1294)				 ::lime::utils::ArrayBufferView this2 = this->_hx___bufferData;
HXDLIN(1294)				Float val = this->width;
HXDLIN(1294)				::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,val);
            			}
HXLINE(1295)			{
HXLINE(1295)				 ::lime::utils::ArrayBufferView this3 = this->_hx___bufferData;
HXDLIN(1295)				Float val1 = this->height;
HXDLIN(1295)				::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + (int)4),val1);
            			}
HXLINE(1296)			{
HXLINE(1296)				 ::lime::utils::ArrayBufferView this4 = this->_hx___bufferData;
HXDLIN(1296)				::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + (int)12),uvWidth);
            			}
HXLINE(1297)			{
HXLINE(1297)				 ::lime::utils::ArrayBufferView this5 = this->_hx___bufferData;
HXDLIN(1297)				::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + (int)16),uvHeight);
            			}
HXLINE(1298)			{
HXLINE(1298)				 ::lime::utils::ArrayBufferView this6 = this->_hx___bufferData;
HXDLIN(1298)				Float val2 = this->height;
HXDLIN(1298)				::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + (int)60),val2);
            			}
HXLINE(1299)			{
HXLINE(1299)				 ::lime::utils::ArrayBufferView this7 = this->_hx___bufferData;
HXDLIN(1299)				::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + (int)72),uvHeight);
            			}
HXLINE(1300)			{
HXLINE(1300)				 ::lime::utils::ArrayBufferView this8 = this->_hx___bufferData;
HXDLIN(1300)				Float val3 = this->width;
HXDLIN(1300)				::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + (int)112),val3);
            			}
HXLINE(1301)			{
HXLINE(1301)				 ::lime::utils::ArrayBufferView this9 = this->_hx___bufferData;
HXDLIN(1301)				::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + (int)124),uvWidth);
            			}
HXLINE(1324)			this->_hx___bufferContext = context;
HXLINE(1325)			this->_hx___buffer = gl->createBuffer();
HXLINE(1327)			gl->bindBuffer(gl->ARRAY_BUFFER,this->_hx___buffer);
HXLINE(1328)			::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ARRAY_BUFFER,this->_hx___bufferData,gl->STATIC_DRAW);
            		}
            		else {
HXLINE(1393)			gl->bindBuffer(gl->ARRAY_BUFFER,this->_hx___buffer);
            		}
HXLINE(1403)		return this->_hx___buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1442_getColorBoundsRect)
HXLINE(1444)		if (!(this->readable)) {
HXLINE(1444)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            		}
HXLINE(1446)		bool _hx_tmp;
HXDLIN(1446)		if (!(!(this->transparent))) {
HXLINE(1446)			_hx_tmp = (((int)((int)mask >> (int)(int)24) & (int)(int)255) > (int)0);
            		}
            		else {
HXLINE(1446)			_hx_tmp = true;
            		}
HXDLIN(1446)		if (_hx_tmp) {
HXLINE(1448)			int color1 = color;
HXLINE(1449)			if ((((int)hx::UShr(color1,(int)24) & (int)(int)255) == (int)0)) {
HXLINE(1449)				color1 = (int)0;
            			}
            		}
HXLINE(1453)		 ::lime::math::Rectangle rect = this->image->getColorBoundsRect(mask,color,findColor,(int)1);
HXLINE(1454)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1482_getPixel)
HXLINE(1484)		if (!(this->readable)) {
HXLINE(1484)			return (int)0;
            		}
HXLINE(1485)		return this->image->getPixel(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1512_getPixel32)
HXLINE(1514)		if (!(this->readable)) {
HXLINE(1514)			return (int)0;
            		}
HXLINE(1515)		return this->image->getPixel32(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1529_getPixels)
HXLINE(1531)		if (!(this->readable)) {
HXLINE(1531)			return null();
            		}
HXLINE(1532)		if (hx::IsNull( rect )) {
HXLINE(1532)			rect = this->rect;
            		}
HXLINE(1533)		 ::lime::graphics::Image byteArray = this->image;
HXDLIN(1533)		 ::openfl::utils::ByteArrayData byteArray1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(byteArray->getPixels(rect->_hx___toLimeRectangle(),(int)1));
HXLINE(1535)		byteArray1->_hx___endian = (int)0;
HXLINE(1536)		return byteArray1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1541_getSurface)
HXLINE(1543)		if (!(this->readable)) {
HXLINE(1543)			return null();
            		}
HXLINE(1545)		if (hx::IsNull( this->_hx___surface )) {
HXLINE(1547)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE(1551)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::lime::graphics::opengl::GLObject BitmapData_obj::getTexture( ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1556_getTexture)
HXLINE(1558)		if (!(this->_hx___isValid)) {
HXLINE(1558)			return null();
            		}
HXLINE(1561)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE(1566)		bool _hx_tmp;
HXDLIN(1566)		if (hx::IsNotNull( this->_hx___texture )) {
HXLINE(1566)			_hx_tmp = hx::IsNotEq( this->_hx___textureContext,context );
            		}
            		else {
HXLINE(1566)			_hx_tmp = true;
            		}
HXDLIN(1566)		if (_hx_tmp) {
HXLINE(1568)			this->_hx___textureContext = context;
HXLINE(1569)			this->_hx___texture = gl->createTexture();
HXLINE(1571)			gl->bindTexture(gl->TEXTURE_2D,this->_hx___texture);
HXLINE(1572)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->CLAMP_TO_EDGE);
HXLINE(1573)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->CLAMP_TO_EDGE);
HXLINE(1574)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->NEAREST);
HXLINE(1575)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST);
HXLINE(1576)			this->_hx___textureVersion = (int)-1;
            		}
HXLINE(1584)		bool _hx_tmp1;
HXDLIN(1584)		if (hx::IsNotNull( this->image )) {
HXLINE(1584)			_hx_tmp1 = (this->image->version > this->_hx___textureVersion);
            		}
            		else {
HXLINE(1584)			_hx_tmp1 = false;
            		}
HXDLIN(1584)		if (_hx_tmp1) {
HXLINE(1586)			int internalFormat;
HXDLIN(1586)			int format;
HXLINE(1588)			if (hx::IsNotNull( this->_hx___surface )) {
HXLINE(1590)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE(1594)			if ((this->image->buffer->bitsPerPixel == (int)1)) {
HXLINE(1596)				internalFormat = gl->ALPHA;
HXLINE(1597)				format = gl->ALPHA;
            			}
            			else {
HXLINE(1601)				if (hx::IsNull( ::openfl::display::BitmapData_obj::_hx___supportsBGRA )) {
HXLINE(1603)					::openfl::display::BitmapData_obj::_hx___textureInternalFormat = gl->RGBA;
HXLINE(1605)					 ::Dynamic bgraExtension = null();
HXLINE(1607)					bgraExtension = gl->getExtension(HX_("EXT_bgra",72,74,1a,40));
HXLINE(1608)					if (hx::IsNull( bgraExtension )) {
HXLINE(1609)						bgraExtension = gl->getExtension(HX_("EXT_texture_format_BGRA8888",5a,d2,bd,b2));
            					}
HXLINE(1610)					if (hx::IsNull( bgraExtension )) {
HXLINE(1611)						bgraExtension = gl->getExtension(HX_("APPLE_texture_format_BGRA8888",13,8a,88,e2));
            					}
HXLINE(1614)					if (hx::IsNotNull( bgraExtension )) {
HXLINE(1616)						::openfl::display::BitmapData_obj::_hx___supportsBGRA = true;
HXLINE(1617)						::openfl::display::BitmapData_obj::_hx___textureFormat = ( (int)(bgraExtension->__Field(HX_("BGRA_EXT",36,94,c4,bc),hx::paccDynamic)) );
HXLINE(1620)						if ((context->type == HX_("opengles",9d,f6,c9,fa))) {
HXLINE(1622)							::openfl::display::BitmapData_obj::_hx___textureInternalFormat = ( (int)(bgraExtension->__Field(HX_("BGRA_EXT",36,94,c4,bc),hx::paccDynamic)) );
            						}
            					}
            					else {
HXLINE(1629)						::openfl::display::BitmapData_obj::_hx___supportsBGRA = false;
HXLINE(1630)						::openfl::display::BitmapData_obj::_hx___textureFormat = gl->RGBA;
            					}
            				}
HXLINE(1636)				internalFormat = ::openfl::display::BitmapData_obj::_hx___textureInternalFormat;
HXLINE(1637)				format = ::openfl::display::BitmapData_obj::_hx___textureFormat;
            			}
HXLINE(1641)			gl->bindTexture(gl->TEXTURE_2D,this->_hx___texture);
HXLINE(1643)			 ::lime::graphics::Image textureImage = this->image;
HXLINE(1695)			bool _hx_tmp2;
HXDLIN(1695)			if (!(textureImage->get_premultiplied())) {
HXLINE(1695)				_hx_tmp2 = textureImage->get_transparent();
            			}
            			else {
HXLINE(1695)				_hx_tmp2 = false;
            			}
HXDLIN(1695)			if (_hx_tmp2) {
HXLINE(1697)				textureImage = textureImage->clone();
HXLINE(1698)				textureImage->set_premultiplied(true);
            			}
HXLINE(1705)			{
HXLINE(1705)				int target = gl->TEXTURE_2D;
HXDLIN(1705)				int width = textureImage->buffer->width;
HXDLIN(1705)				int height = textureImage->buffer->height;
HXDLIN(1705)				int type = gl->UNSIGNED_BYTE;
HXDLIN(1705)				 ::lime::utils::ArrayBufferView srcData = textureImage->get_data();
HXDLIN(1705)				{
HXLINE(1705)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),srcData,null(),(int)0);
HXDLIN(1705)					gl->texImage2D(target,(int)0,internalFormat,width,height,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            				}
            			}
HXLINE(1709)			gl->bindTexture(gl->TEXTURE_2D,null());
HXLINE(1710)			this->_hx___textureVersion = this->image->version;
HXLINE(1712)			this->_hx___textureWidth = textureImage->buffer->width;
HXLINE(1713)			this->_hx___textureHeight = textureImage->buffer->height;
            		}
HXLINE(1717)		bool _hx_tmp3;
HXDLIN(1717)		if (!(this->readable)) {
HXLINE(1717)			_hx_tmp3 = hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(1717)			_hx_tmp3 = false;
            		}
HXDLIN(1717)		if (_hx_tmp3) {
HXLINE(1719)			this->_hx___surface = null();
HXLINE(1720)			this->image = null();
            		}
HXLINE(1724)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1738_getVector)
HXLINE(1740)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(1741)		int length = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels) / (Float)(int)4));
HXLINE(1742)		 ::openfl::_Vector::IntVector result =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,true,null());
HXLINE(1744)		{
HXLINE(1744)			int _g1 = (int)0;
HXDLIN(1744)			int _g = length;
HXDLIN(1744)			while((_g1 < _g)){
HXLINE(1744)				_g1 = (_g1 + (int)1);
HXDLIN(1744)				int i = (_g1 - (int)1);
HXLINE(1746)				result->set(i,pixels->readUnsignedInt());
            			}
            		}
HXLINE(1750)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1755_histogram)
HXLINE(1757)		 ::openfl::geom::Rectangle rect;
HXDLIN(1757)		if (hx::IsNotNull( hRect )) {
HXLINE(1757)			rect = hRect;
            		}
            		else {
HXLINE(1757)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            		}
HXLINE(1758)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(1759)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1759)		{
HXLINE(1759)			int _g1 = (int)0;
HXDLIN(1759)			while((_g1 < (int)4)){
HXLINE(1759)				_g1 = (_g1 + (int)1);
HXDLIN(1759)				int i = (_g1 - (int)1);
HXDLIN(1759)				::Array< int > _g2 = ::Array_obj< int >::__new(0);
HXDLIN(1759)				{
HXLINE(1759)					int _g3 = (int)0;
HXDLIN(1759)					while((_g3 < (int)256)){
HXLINE(1759)						_g3 = (_g3 + (int)1);
HXDLIN(1759)						int j = (_g3 - (int)1);
HXDLIN(1759)						_g2->push((int)0);
            					}
            				}
HXDLIN(1759)				_g->push(_g2);
            			}
            		}
HXDLIN(1759)		::Array< ::Dynamic> result = _g;
HXLINE(1761)		{
HXLINE(1761)			int _g21 = (int)0;
HXDLIN(1761)			int _g11 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(1761)			while((_g21 < _g11)){
HXLINE(1761)				_g21 = (_g21 + (int)1);
HXDLIN(1761)				int i1 = (_g21 - (int)1);
HXLINE(1763)				++result->__get(hx::Mod(i1,(int)4)).StaticCast< ::Array< int > >()[pixels->readUnsignedByte()];
            			}
            		}
HXLINE(1767)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< int >  __o_secondAlphaThreshold){
int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1772_hitTest)
HXLINE(1774)		if (!(this->readable)) {
HXLINE(1774)			return false;
            		}
HXLINE(1777)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >())) {
HXLINE(1779)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->_hx___bitmapData;
            		}
HXLINE(1784)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >())) {
HXLINE(1786)			 ::openfl::geom::Point secondPoint = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE(1788)			int x = ::Std_obj::_hx_int((secondPoint->x - firstPoint->x));
HXLINE(1789)			int y = ::Std_obj::_hx_int((secondPoint->y - firstPoint->y));
HXLINE(1791)			if (this->rect->contains(x,y)) {
HXLINE(1793)				int pixel = this->getPixel32(x,y);
HXLINE(1795)				if ((((int)((int)pixel >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1797)					return true;
            				}
            			}
            		}
            		else {
HXLINE(1803)			if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE(1805)				 ::openfl::display::BitmapData secondBitmapData = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE(1806)				int x1;
HXDLIN(1806)				int y1;
HXLINE(1808)				if (hx::IsNull( secondBitmapDataPoint )) {
HXLINE(1810)					x1 = (int)0;
HXLINE(1811)					y1 = (int)0;
            				}
            				else {
HXLINE(1815)					x1 = ::Math_obj::round((secondBitmapDataPoint->x - firstPoint->x));
HXLINE(1816)					y1 = ::Math_obj::round((secondBitmapDataPoint->y - firstPoint->y));
            				}
HXLINE(1820)				 ::openfl::geom::Rectangle hitRect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1821)				hitRect->setTo(x1,y1,secondBitmapData->width,secondBitmapData->height);
HXLINE(1823)				if (this->rect->intersects(hitRect)) {
HXLINE(1825)					if ((x1 < (int)0)) {
HXLINE(1827)						hitRect->x = (int)0;
HXLINE(1828)						hitRect->width = ::Math_obj::min((secondBitmapData->width + x1),this->width);
            					}
            					else {
HXLINE(1832)						int secondBitmapData1 = secondBitmapData->width;
HXDLIN(1832)						hitRect->width = ::Math_obj::min(secondBitmapData1,(this->width - x1));
            					}
HXLINE(1836)					if ((y1 < (int)0)) {
HXLINE(1838)						hitRect->y = (int)0;
HXLINE(1839)						hitRect->height = ::Math_obj::min((secondBitmapData->height + y1),this->height);
            					}
            					else {
HXLINE(1843)						int secondBitmapData2 = secondBitmapData->height;
HXDLIN(1843)						hitRect->height = ::Math_obj::min(secondBitmapData2,(this->height - y1));
            					}
HXLINE(1847)					 ::openfl::utils::ByteArrayData pixels = this->getPixels(hitRect);
HXLINE(1849)					Float _hx_tmp;
HXDLIN(1849)					if ((x1 < (int)0)) {
HXLINE(1849)						_hx_tmp = -(x1);
            					}
            					else {
HXLINE(1849)						_hx_tmp = (int)0;
            					}
HXDLIN(1849)					hitRect->x = _hx_tmp;
HXLINE(1850)					Float _hx_tmp1;
HXDLIN(1850)					if ((y1 < (int)0)) {
HXLINE(1850)						_hx_tmp1 = -(y1);
            					}
            					else {
HXLINE(1850)						_hx_tmp1 = (int)0;
            					}
HXDLIN(1850)					hitRect->y = _hx_tmp1;
HXLINE(1852)					 ::openfl::utils::ByteArrayData testPixels = secondBitmapData->getPixels(hitRect);
HXLINE(1854)					int length = ::Std_obj::_hx_int((hitRect->width * hitRect->height));
HXLINE(1855)					int pixel1;
HXDLIN(1855)					int testPixel;
HXLINE(1857)					{
HXLINE(1857)						int _g1 = (int)0;
HXDLIN(1857)						int _g = length;
HXDLIN(1857)						while((_g1 < _g)){
HXLINE(1857)							_g1 = (_g1 + (int)1);
HXDLIN(1857)							int i = (_g1 - (int)1);
HXLINE(1859)							pixel1 = pixels->readUnsignedInt();
HXLINE(1860)							testPixel = testPixels->readUnsignedInt();
HXLINE(1862)							bool _hx_tmp2;
HXDLIN(1862)							if ((((int)((int)pixel1 >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1862)								_hx_tmp2 = (((int)((int)testPixel >> (int)(int)24) & (int)(int)255) > secondAlphaThreshold);
            							}
            							else {
HXLINE(1862)								_hx_tmp2 = false;
            							}
HXDLIN(1862)							if (_hx_tmp2) {
HXLINE(1864)								::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
HXLINE(1865)								return true;
            							}
            						}
            					}
            				}
HXLINE(1873)				::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
            			}
            			else {
HXLINE(1875)				if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >())) {
HXLINE(1877)					 ::openfl::geom::Rectangle secondRectangle = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1878)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE(1879)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE(1880)					secondRectangle->_hx___contract((int)0,(int)0,this->width,this->height);
HXLINE(1882)					bool _hx_tmp3;
HXDLIN(1882)					if ((secondRectangle->width > (int)0)) {
HXLINE(1882)						_hx_tmp3 = (secondRectangle->height > (int)0);
            					}
            					else {
HXLINE(1882)						_hx_tmp3 = false;
            					}
HXDLIN(1882)					if (_hx_tmp3) {
HXLINE(1884)						 ::openfl::utils::ByteArrayData pixels1 = this->getPixels(secondRectangle);
HXLINE(1885)						int length1 = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1) / (Float)(int)4));
HXLINE(1886)						int pixel2;
HXLINE(1888)						{
HXLINE(1888)							int _g11 = (int)0;
HXDLIN(1888)							int _g2 = length1;
HXDLIN(1888)							while((_g11 < _g2)){
HXLINE(1888)								_g11 = (_g11 + (int)1);
HXDLIN(1888)								int i1 = (_g11 - (int)1);
HXLINE(1890)								pixel2 = pixels1->readUnsignedInt();
HXLINE(1892)								if ((((int)((int)pixel2 >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1894)									::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
HXLINE(1895)									return true;
            								}
            							}
            						}
            					}
HXLINE(1903)					::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
            				}
            			}
            		}
HXLINE(1907)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1961_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1968_merge)
HXLINE(1970)		bool _hx_tmp;
HXDLIN(1970)		bool _hx_tmp1;
HXDLIN(1970)		bool _hx_tmp2;
HXDLIN(1970)		bool _hx_tmp3;
HXDLIN(1970)		if (!(!(this->readable))) {
HXLINE(1970)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE(1970)			_hx_tmp3 = true;
            		}
HXDLIN(1970)		if (!(_hx_tmp3)) {
HXLINE(1970)			_hx_tmp2 = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE(1970)			_hx_tmp2 = true;
            		}
HXDLIN(1970)		if (!(_hx_tmp2)) {
HXLINE(1970)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1970)			_hx_tmp1 = true;
            		}
HXDLIN(1970)		if (!(_hx_tmp1)) {
HXLINE(1970)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1970)			_hx_tmp = true;
            		}
HXDLIN(1970)		if (_hx_tmp) {
HXLINE(1970)			return;
            		}
HXLINE(1971)		 ::lime::graphics::Image _hx_tmp4 = this->image;
HXDLIN(1971)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(1971)		 ::lime::math::Rectangle _hx_tmp5 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1971)		_hx_tmp4->merge(sourceBitmapData1,_hx_tmp5,destPoint->_hx___toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(int randomSeed,hx::Null< int >  __o_low,hx::Null< int >  __o_high,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,randomSeed1) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2011_noise)
HXLINE(2012)			randomSeed1[(int)0] = ((randomSeed1->__get((int)0) * (int)1103515245) + (int)12345);
HXLINE(2013)			return hx::Mod(::Std_obj::_hx_int(::Math_obj::abs(((Float)randomSeed1->__get((int)0) / (Float)(int)65536))),(int)32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

int low = __o_low.Default(0);
int high = __o_high.Default(255);
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2004_noise)
HXDLIN(2004)		::Array< int > randomSeed1 = ::Array_obj< int >::__new(1)->init(0,randomSeed);
HXLINE(2006)		if (!(this->readable)) {
HXLINE(2006)			return;
            		}
HXLINE(2010)		 ::Dynamic func =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(2009)		 ::Dynamic rand = func;
HXLINE(2016)		rand();
HXLINE(2019)		int range = (high - low);
HXLINE(2020)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(2020)		 ::openfl::utils::ByteArrayData data = this1;
HXLINE(2022)		bool redChannel = (((int)channelOptions & (int)(int)1) == (int)1);
HXLINE(2023)		bool greenChannel = (((int)((int)channelOptions & (int)(int)2) >> (int)(int)1) == (int)1);
HXLINE(2024)		bool blueChannel = (((int)((int)channelOptions & (int)(int)4) >> (int)(int)2) == (int)1);
HXLINE(2025)		bool alphaChannel = (((int)((int)channelOptions & (int)(int)8) >> (int)(int)3) == (int)1);
HXLINE(2027)		{
HXLINE(2027)			int _g1 = (int)0;
HXDLIN(2027)			int _g = this->height;
HXDLIN(2027)			while((_g1 < _g)){
HXLINE(2027)				_g1 = (_g1 + (int)1);
HXDLIN(2027)				int y = (_g1 - (int)1);
HXLINE(2029)				{
HXLINE(2029)					int _g3 = (int)0;
HXDLIN(2029)					int _g2 = this->width;
HXDLIN(2029)					while((_g3 < _g2)){
HXLINE(2029)						_g3 = (_g3 + (int)1);
HXDLIN(2029)						int x = (_g3 - (int)1);
HXLINE(2032)						int red = (int)0;
HXLINE(2033)						int blue = (int)0;
HXLINE(2034)						int green = (int)0;
HXLINE(2035)						int alpha = (int)255;
HXLINE(2037)						if (grayScale) {
HXLINE(2039)							blue = (low + hx::Mod(( (int)(rand()) ),range));
HXDLIN(2039)							green = blue;
HXDLIN(2039)							red = green;
HXLINE(2040)							alpha = (int)255;
            						}
            						else {
HXLINE(2044)							if (redChannel) {
HXLINE(2044)								red = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(2045)							if (greenChannel) {
HXLINE(2045)								green = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(2046)							if (blueChannel) {
HXLINE(2046)								blue = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(2047)							if (alphaChannel) {
HXLINE(2047)								alpha = (low + hx::Mod(( (int)(rand()) ),range));
            							}
            						}
HXLINE(2050)						int rgb = alpha;
HXLINE(2051)						rgb = (((int)rgb << (int)(int)8) + red);
HXLINE(2052)						rgb = (((int)rgb << (int)(int)8) + green);
HXLINE(2053)						rgb = (((int)rgb << (int)(int)8) + blue);
HXLINE(2055)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< int > redArray,::Array< int > greenArray,::Array< int > blueArray,::Array< int > alphaArray){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2062_paletteMap)
HXLINE(2064)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(2065)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(2067)		 ::openfl::utils::ByteArrayData pixels = sourceBitmapData->getPixels(sourceRect);
HXLINE(2069)		int pixelValue;
HXDLIN(2069)		int r;
HXDLIN(2069)		int g;
HXDLIN(2069)		int b;
HXDLIN(2069)		int a;
HXDLIN(2069)		int color;
HXLINE(2071)		{
HXLINE(2071)			int _g1 = (int)0;
HXDLIN(2071)			int _g = (sh * sw);
HXDLIN(2071)			while((_g1 < _g)){
HXLINE(2071)				_g1 = (_g1 + (int)1);
HXDLIN(2071)				int i = (_g1 - (int)1);
HXLINE(2073)				pixelValue = pixels->readUnsignedInt();
HXLINE(2075)				if (hx::IsNull( alphaArray )) {
HXLINE(2075)					a = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE(2075)					a = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE(2076)				if (hx::IsNull( redArray )) {
HXLINE(2076)					r = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE(2076)					r = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE(2077)				if (hx::IsNull( greenArray )) {
HXLINE(2077)					g = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE(2077)					g = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE(2078)				if (hx::IsNull( blueArray )) {
HXLINE(2078)					b = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE(2078)					b = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE(2080)				color = (((a + r) + g) + b);
HXLINE(2082)				pixels->position = (i * (int)4);
HXLINE(2083)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(2087)		pixels->position = (int)0;
HXLINE(2088)		 ::openfl::geom::Rectangle destRect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(2089)		destRect->setTo(destPoint->x,destPoint->y,sw,sh);
HXLINE(2090)		this->setPixels(destRect,pixels);
HXLINE(2091)		::openfl::geom::Rectangle_obj::_hx___pool->release(destRect);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,int numOctaves,int randomSeed,bool stitch,bool fractalNoise,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale,::Array< ::Dynamic> offsets){
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2162_perlinNoise)
HXLINE(2164)		if (!(this->readable)) {
HXLINE(2164)			return;
            		}
HXLINE(2165)		 ::openfl::_internal::utils::PerlinNoise noise =  ::openfl::_internal::utils::PerlinNoise_obj::__alloc( HX_CTX ,randomSeed,numOctaves,((Float)0.01));
HXLINE(2166)		noise->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2181_scroll)
HXLINE(2183)		if (!(this->readable)) {
HXLINE(2183)			return;
            		}
HXLINE(2184)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2206_setPixel)
HXLINE(2208)		if (!(this->readable)) {
HXLINE(2208)			return;
            		}
HXLINE(2209)		this->image->setPixel(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2245_setPixel32)
HXLINE(2247)		if (!(this->readable)) {
HXLINE(2247)			return;
            		}
HXLINE(2248)		this->image->setPixel32(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2272_setPixels)
HXLINE(2274)		bool _hx_tmp;
HXDLIN(2274)		if (!(!(this->readable))) {
HXLINE(2274)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(2274)			_hx_tmp = true;
            		}
HXDLIN(2274)		if (_hx_tmp) {
HXLINE(2274)			return;
            		}
HXLINE(2276)		Float length = ((rect->width * rect->height) * (int)4);
HXLINE(2277)		int _hx_int = (byteArray->length - byteArray->position);
HXDLIN(2277)		Float _hx_tmp1;
HXDLIN(2277)		if ((_hx_int < (int)0)) {
HXLINE(2277)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2277)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2277)		if ((_hx_tmp1 < length)) {
HXLINE(2277)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("End of file was encountered.",d3,7b,d9,4f),(int)2030));
            		}
HXLINE(2279)		 ::lime::graphics::Image _hx_tmp2 = this->image;
HXDLIN(2279)		 ::lime::math::Rectangle _hx_tmp3 = rect->_hx___toLimeRectangle();
HXDLIN(2279)		 ::lime::utils::BytePointerData _hx_tmp4 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytePointer(byteArray);
HXDLIN(2279)		_hx_tmp2->setPixels(_hx_tmp3,_hx_tmp4,(int)1,::openfl::utils::_Endian::Endian_Impl__obj::toLimeEndian(byteArray->_hx___endian));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2293_setVector)
HXLINE(2295)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(2295)		 ::openfl::utils::ByteArrayData byteArray = this1;
HXLINE(2296)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(inputVector->get_length() * (int)4));
HXLINE(2298)		{
HXLINE(2298)			int _g = (int)0;
HXDLIN(2298)			while((_g < inputVector->get_length())){
HXLINE(2298)				int color = inputVector->get(_g);
HXDLIN(2298)				_g = (_g + (int)1);
HXLINE(2300)				byteArray->writeUnsignedInt(color);
            			}
            		}
HXLINE(2304)		byteArray->position = (int)0;
HXLINE(2305)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2358_threshold)
HXLINE(2360)		bool _hx_tmp;
HXDLIN(2360)		bool _hx_tmp1;
HXDLIN(2360)		bool _hx_tmp2;
HXDLIN(2360)		bool _hx_tmp3;
HXDLIN(2360)		bool _hx_tmp4;
HXDLIN(2360)		bool _hx_tmp5;
HXDLIN(2360)		if (hx::IsNotNull( sourceBitmapData )) {
HXLINE(2360)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(2360)			_hx_tmp5 = true;
            		}
HXDLIN(2360)		if (!(_hx_tmp5)) {
HXLINE(2360)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(2360)			_hx_tmp4 = true;
            		}
HXDLIN(2360)		if (!(_hx_tmp4)) {
HXLINE(2360)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(2360)			_hx_tmp3 = true;
            		}
HXDLIN(2360)		if (!(_hx_tmp3)) {
HXLINE(2360)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(2360)			_hx_tmp2 = true;
            		}
HXDLIN(2360)		if (!(_hx_tmp2)) {
HXLINE(2360)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(2360)			_hx_tmp1 = true;
            		}
HXDLIN(2360)		if (!(_hx_tmp1)) {
HXLINE(2360)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(2360)			_hx_tmp = true;
            		}
HXDLIN(2360)		if (_hx_tmp) {
HXLINE(2360)			return (int)0;
            		}
HXLINE(2362)		 ::lime::graphics::Image _hx_tmp6 = this->image;
HXDLIN(2362)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(2362)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(2362)		return _hx_tmp6->threshold(sourceBitmapData1,_hx_tmp7,destPoint->_hx___toLimeVector2(),operation,threshold,color,mask,copySource,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2379_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2386___applyAlpha)
HXLINE(2393)		 ::lime::utils::ArrayBufferView data = this->image->buffer->data;
HXLINE(2395)		{
HXLINE(2395)			int _g1 = (int)0;
HXDLIN(2395)			int _g = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(2395)			while((_g1 < _g)){
HXLINE(2395)				_g1 = (_g1 + (int)1);
HXDLIN(2395)				int i = (_g1 - (int)1);
HXLINE(2397)				{
HXLINE(2397)					int val = alpha->readUnsignedByte();
HXDLIN(2397)					{
HXLINE(2397)						int data1 = data->byteOffset;
HXDLIN(2397)						::__hxcpp_memory_set_byte(data->buffer->b,(data1 + ((i * (int)4) + (int)3)),val);
            					}
            				}
            			}
            		}
HXLINE(2401)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___drawCairo(::Dynamic source, ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2406___drawCairo)
HXLINE(2410)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(2412)		if (hx::IsEq( source,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2414)			source = this->clone();
            		}
HXLINE(2418)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2418)			cairo->set_antialias((int)1);
            		}
HXLINE(2420)		renderer->_hx___render(source);
HXLINE(2422)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2422)			cairo->set_antialias((int)5);
            		}
HXLINE(2424)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(cairo->get_target());
HXLINE(2426)		this->image->dirty = true;
HXLINE(2427)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCairo,(void))

void BitmapData_obj::_hx___drawCanvas(::Dynamic source, ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2434___drawCanvas)
HXLINE(2436)		 ::lime::graphics::ImageBuffer buffer = this->image->buffer;
HXLINE(2438)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2438)			renderer->applySmoothing(buffer->_hx___srcContext,false);
            		}
HXLINE(2440)		renderer->_hx___render(source);
HXLINE(2442)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2442)			renderer->applySmoothing(buffer->_hx___srcContext,true);
            		}
HXLINE(2444)		buffer->_hx___srcContext->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic)((int)1,(int)0,(int)0,(int)1,(int)0,(int)0);
HXLINE(2445)		buffer->_hx___srcImageData = null();
HXLINE(2446)		buffer->data = null();
HXLINE(2448)		this->image->dirty = true;
HXLINE(2449)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCanvas,(void))

void BitmapData_obj::_hx___drawGL(::Dynamic source, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2454___drawGL)
HXLINE(2456)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___gl;
HXLINE(2458)		{
HXLINE(2458)			int target = gl->FRAMEBUFFER;
HXDLIN(2458)			gl->bindFramebuffer(target,this->_hx___getFramebuffer(renderer->_hx___context,true));
            		}
HXLINE(2460)		renderer->_hx___render(source);
HXLINE(2462)		gl->bindFramebuffer(gl->FRAMEBUFFER,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawGL,(void))

void BitmapData_obj::_hx___fillRect( ::openfl::geom::Rectangle rect,int color,bool allowFramebuffer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2467___fillRect)
HXLINE(2469)		if (hx::IsNull( rect )) {
HXLINE(2469)			return;
            		}
HXLINE(2471)		bool _hx_tmp;
HXDLIN(2471)		if (this->transparent) {
HXLINE(2471)			_hx_tmp = (((int)color & (int)(int)-16777216) == (int)0);
            		}
            		else {
HXLINE(2471)			_hx_tmp = false;
            		}
HXDLIN(2471)		if (_hx_tmp) {
HXLINE(2473)			color = (int)0;
            		}
HXLINE(2477)		bool _hx_tmp1;
HXDLIN(2477)		if (allowFramebuffer) {
HXLINE(2477)			_hx_tmp1 = hx::IsNotNull( this->_hx___framebuffer );
            		}
            		else {
HXLINE(2477)			_hx_tmp1 = false;
            		}
HXDLIN(2477)		if (_hx_tmp1) {
HXLINE(2479)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = ::lime::graphics::opengl::GL_obj::context;
HXLINE(2480)			int color1 = color;
HXLINE(2481)			bool useScissor = !(this->rect->equals(rect));
HXLINE(2483)			gl->bindFramebuffer(gl->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE(2485)			if (useScissor) {
HXLINE(2487)				gl->enable(gl->SCISSOR_TEST);
HXLINE(2488)				int _hx_tmp2 = ::Math_obj::round(rect->x);
HXDLIN(2488)				int _hx_tmp3 = ::Math_obj::round(rect->y);
HXDLIN(2488)				int _hx_tmp4 = ::Math_obj::round(rect->width);
HXDLIN(2488)				gl->scissor(_hx_tmp2,_hx_tmp3,_hx_tmp4,::Math_obj::round(rect->height));
            			}
HXLINE(2492)			gl->clearColor(((Float)((int)hx::UShr(color1,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color1 & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE(2493)			gl->clear(gl->COLOR_BUFFER_BIT);
HXLINE(2495)			if (useScissor) {
HXLINE(2497)				gl->disable(gl->SCISSOR_TEST);
            			}
HXLINE(2501)			gl->bindFramebuffer(gl->FRAMEBUFFER,null());
            		}
            		else {
HXLINE(2503)			if (this->readable) {
HXLINE(2505)				 ::lime::graphics::Image _hx_tmp5 = this->image;
HXDLIN(2505)				_hx_tmp5->fillRect(rect->_hx___toLimeRectangle(),color,(int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fillRect,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2512___fromBase64)
HXLINE(2514)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXLINE(2515)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2520___fromBytes)
HXLINE(2522)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE(2523)		this->_hx___fromImage(image);
HXLINE(2525)		if (hx::IsNotNull( rawAlpha )) {
HXLINE(2527)			this->_hx___applyAlpha(rawAlpha);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2534___fromFile)
HXLINE(2536)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(path);
HXLINE(2537)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2544___fromImage)
HXDLIN(2544)		bool _hx_tmp;
HXDLIN(2544)		if (hx::IsNotNull( image )) {
HXDLIN(2544)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN(2544)			_hx_tmp = false;
            		}
HXDLIN(2544)		if (_hx_tmp) {
HXLINE(2546)			this->image = image;
HXLINE(2548)			this->width = image->width;
HXLINE(2549)			this->height = image->height;
HXLINE(2550)			this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,image->width,image->height);
HXLINE(2553)			image->set_format((int)2);
HXLINE(2554)			image->set_premultiplied(true);
HXLINE(2557)			this->readable = true;
HXLINE(2558)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2565___getBounds)
HXLINE(2567)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(2568)		this->rect->_hx___transform(bounds,matrix);
HXLINE(2569)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(2570)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___getBounds,(void))

 ::lime::graphics::opengl::GLObject BitmapData_obj::_hx___getFramebuffer( ::lime::graphics::RenderContext context,bool requireStencil){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2575___getFramebuffer)
HXLINE(2577)		bool _hx_tmp;
HXDLIN(2577)		if (hx::IsNotNull( this->_hx___framebuffer )) {
HXLINE(2577)			_hx_tmp = hx::IsNotEq( this->_hx___framebufferContext,context );
            		}
            		else {
HXLINE(2577)			_hx_tmp = true;
            		}
HXDLIN(2577)		if (_hx_tmp) {
HXLINE(2580)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE(2585)			this->getTexture(context);
HXLINE(2587)			this->_hx___framebufferContext = context;
HXLINE(2588)			this->_hx___framebuffer = gl->createFramebuffer();
HXLINE(2590)			gl->bindFramebuffer(gl->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE(2591)			gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,this->_hx___texture,(int)0);
HXLINE(2593)			int _hx_tmp1 = gl->checkFramebufferStatus(gl->FRAMEBUFFER);
HXDLIN(2593)			if ((_hx_tmp1 != gl->FRAMEBUFFER_COMPLETE)) {
HXLINE(2595)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(2595)				int _hx_tmp3 = gl->getError();
HXDLIN(2595)				_hx_tmp2(_hx_tmp3,hx::SourceInfo(HX_("BitmapData.hx",85,76,3a,0a),2595,HX_("openfl.display.BitmapData",a3,12,41,9a),HX_("__getFramebuffer",17,f3,25,36)));
            			}
            		}
HXLINE(2601)		bool _hx_tmp4;
HXDLIN(2601)		if (requireStencil) {
HXLINE(2601)			_hx_tmp4 = hx::IsNull( this->_hx___stencilBuffer );
            		}
            		else {
HXLINE(2601)			_hx_tmp4 = false;
            		}
HXDLIN(2601)		if (_hx_tmp4) {
HXLINE(2604)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl1 = context->webgl;
HXLINE(2609)			this->_hx___stencilBuffer = gl1->createRenderbuffer();
HXLINE(2610)			gl1->bindRenderbuffer(gl1->RENDERBUFFER,this->_hx___stencilBuffer);
HXLINE(2611)			gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->STENCIL_INDEX8,this->_hx___textureWidth,this->_hx___textureHeight);
HXLINE(2613)			gl1->bindFramebuffer(gl1->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE(2614)			gl1->framebufferRenderbuffer(gl1->FRAMEBUFFER,gl1->STENCIL_ATTACHMENT,gl1->RENDERBUFFER,this->_hx___stencilBuffer);
HXLINE(2616)			int _hx_tmp5 = gl1->checkFramebufferStatus(gl1->FRAMEBUFFER);
HXDLIN(2616)			if ((_hx_tmp5 != gl1->FRAMEBUFFER_COMPLETE)) {
HXLINE(2618)				 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN(2618)				int _hx_tmp7 = gl1->getError();
HXDLIN(2618)				_hx_tmp6(_hx_tmp7,hx::SourceInfo(HX_("BitmapData.hx",85,76,3a,0a),2618,HX_("openfl.display.BitmapData",a3,12,41,9a),HX_("__getFramebuffer",17,f3,25,36)));
            			}
HXLINE(2622)			gl1->bindRenderbuffer(gl1->RENDERBUFFER,null());
            		}
HXLINE(2626)		return this->_hx___framebuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___getFramebuffer,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2633___loadFromBase64)
HXLINE(2635)			_gthis->_hx___fromImage(image);
HXLINE(2636)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2631___loadFromBase64)
HXDLIN(2631)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2633)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2645___loadFromBytes)
HXLINE(2647)			_gthis->_hx___fromImage(image);
HXLINE(2649)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(2651)				_gthis->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(2655)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2643___loadFromBytes)
HXDLIN(2643)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2645)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2664___loadFromFile)
HXLINE(2666)			_gthis->_hx___fromImage(image);
HXLINE(2667)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2662___loadFromFile)
HXDLIN(2662)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2664)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___loadFromFile,return )

void BitmapData_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2674___renderCairo)
HXLINE(2677)		if (!(this->readable)) {
HXLINE(2677)			return;
            		}
HXLINE(2679)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(2681)		renderer->applyMatrix(this->_hx___renderTransform,cairo);
HXLINE(2683)		 ::Dynamic surface = this->getSurface();
HXLINE(2685)		if (hx::IsNotNull( surface )) {
HXLINE(2687)			 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(2689)			bool _hx_tmp;
HXDLIN(2689)			if (!(!(renderer->_hx___allowSmoothing))) {
HXLINE(2689)				_hx_tmp = (cairo->get_antialias() == (int)1);
            			}
            			else {
HXLINE(2689)				_hx_tmp = true;
            			}
HXDLIN(2689)			if (_hx_tmp) {
HXLINE(2691)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)3);
            			}
            			else {
HXLINE(2695)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)1);
            			}
HXLINE(2699)			cairo->set_source(pattern);
HXLINE(2700)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2708___renderCairoMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2715___renderCanvas)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2737___renderCanvasMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2744___renderDOM)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderDOM,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2751___renderGL)
HXLINE(2753)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___gl;
HXLINE(2755)		renderer->_hx___setBlendMode((int)10);
HXLINE(2757)		 ::openfl::display::DisplayObjectShader shader = renderer->_hx___defaultDisplayShader;
HXLINE(2758)		renderer->setShader(shader);
HXLINE(2759)		bool _hx_tmp;
HXDLIN(2759)		if (renderer->_hx___allowSmoothing) {
HXLINE(2759)			_hx_tmp = renderer->_hx___upscaled;
            		}
            		else {
HXLINE(2759)			_hx_tmp = false;
            		}
HXDLIN(2759)		renderer->applyBitmapData(hx::ObjectPtr<OBJ_>(this),_hx_tmp,null());
HXLINE(2760)		renderer->applyMatrix(renderer->_hx___getMatrix(this->_hx___worldTransform));
HXLINE(2761)		renderer->applyAlpha(this->_hx___worldAlpha);
HXLINE(2762)		renderer->applyColorTransform(this->_hx___worldColorTransform);
HXLINE(2763)		renderer->updateShader();
HXLINE(2767)		{
HXLINE(2767)			int target = gl->ARRAY_BUFFER;
HXDLIN(2767)			gl->bindBuffer(target,this->getBuffer(renderer->_hx___context));
            		}
HXLINE(2768)		if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(2768)			int indx = shader->_hx___position->index;
HXDLIN(2768)			int type = gl->FLOAT;
HXDLIN(2768)			gl->vertexAttribPointer(indx,(int)3,type,false,(int)20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
            		}
HXLINE(2769)		if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(2769)			int indx1 = shader->_hx___textureCoord->index;
HXDLIN(2769)			int type1 = gl->FLOAT;
HXDLIN(2769)			gl->vertexAttribPointer(indx1,(int)2,type1,false,(int)20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
            		}
HXLINE(2771)		gl->drawArrays(gl->TRIANGLE_STRIP,(int)0,(int)4);
HXLINE(2777)		renderer->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2782___renderGLMask)
HXLINE(2784)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = renderer->_hx___gl;
HXLINE(2786)		 ::openfl::_internal::renderer::opengl::GLMaskShader shader = renderer->_hx___maskShader;
HXLINE(2787)		renderer->setShader(shader);
HXLINE(2788)		bool _hx_tmp;
HXDLIN(2788)		if (renderer->_hx___allowSmoothing) {
HXLINE(2788)			_hx_tmp = renderer->_hx___upscaled;
            		}
            		else {
HXLINE(2788)			_hx_tmp = false;
            		}
HXDLIN(2788)		renderer->applyBitmapData(hx::ObjectPtr<OBJ_>(this),_hx_tmp,null());
HXLINE(2789)		renderer->applyMatrix(renderer->_hx___getMatrix(this->_hx___worldTransform));
HXLINE(2790)		renderer->updateShader();
HXLINE(2792)		{
HXLINE(2792)			int target = gl->ARRAY_BUFFER;
HXDLIN(2792)			gl->bindBuffer(target,this->getBuffer(renderer->_hx___context));
            		}
HXLINE(2793)		{
HXLINE(2793)			int indx = shader->_hx___position->index;
HXDLIN(2793)			int type = gl->FLOAT;
HXDLIN(2793)			gl->vertexAttribPointer(indx,(int)3,type,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
            		}
HXLINE(2794)		{
HXLINE(2794)			int indx1 = shader->_hx___textureCoord->index;
HXDLIN(2794)			int type1 = gl->FLOAT;
HXDLIN(2794)			gl->vertexAttribPointer(indx1,(int)2,type1,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
            		}
HXLINE(2796)		gl->drawArrays(gl->TRIANGLE_STRIP,(int)0,(int)4);
HXLINE(2802)		renderer->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGLMask,(void))

void BitmapData_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2807___resize)
HXLINE(2809)		this->width = width;
HXLINE(2810)		this->height = height;
HXLINE(2811)		this->rect->width = width;
HXLINE(2812)		this->rect->height = height;
HXLINE(2814)		this->_hx___textureWidth = width;
HXLINE(2815)		this->_hx___textureHeight = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___setUVRect( ::lime::graphics::RenderContext context,Float x,Float y,Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2820___setUVRect)
HXLINE(2822)		 ::lime::graphics::opengl::GLObject buffer = this->getBuffer(context);
HXLINE(2824)		bool _hx_tmp;
HXDLIN(2824)		if (hx::IsNotNull( buffer )) {
HXLINE(2824)			bool _hx_tmp1;
HXDLIN(2824)			bool _hx_tmp2;
HXDLIN(2824)			if ((width == this->_hx___uvRect->width)) {
HXLINE(2824)				_hx_tmp2 = (height != this->_hx___uvRect->height);
            			}
            			else {
HXLINE(2824)				_hx_tmp2 = true;
            			}
HXDLIN(2824)			if (!(_hx_tmp2)) {
HXLINE(2824)				_hx_tmp1 = (x != this->_hx___uvRect->x);
            			}
            			else {
HXLINE(2824)				_hx_tmp1 = true;
            			}
HXDLIN(2824)			if (!(_hx_tmp1)) {
HXLINE(2824)				_hx_tmp = (y != this->_hx___uvRect->y);
            			}
            			else {
HXLINE(2824)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(2824)			_hx_tmp = false;
            		}
HXDLIN(2824)		if (_hx_tmp) {
HXLINE(2827)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->webgl;
HXLINE(2832)			if (hx::IsNull( this->_hx___uvRect )) {
HXLINE(2832)				this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(2833)			this->_hx___uvRect->setTo(x,y,width,height);
HXLINE(2835)			Float uvX;
HXDLIN(2835)			if ((this->_hx___textureWidth > (int)0)) {
HXLINE(2835)				uvX = ((Float)x / (Float)this->_hx___textureWidth);
            			}
            			else {
HXLINE(2835)				uvX = (int)0;
            			}
HXLINE(2836)			Float uvY;
HXDLIN(2836)			if ((this->_hx___textureHeight > (int)0)) {
HXLINE(2836)				uvY = ((Float)y / (Float)this->_hx___textureHeight);
            			}
            			else {
HXLINE(2836)				uvY = (int)0;
            			}
HXLINE(2837)			Float uvWidth;
HXDLIN(2837)			if ((this->_hx___textureWidth > (int)0)) {
HXLINE(2837)				uvWidth = ((Float)width / (Float)this->_hx___textureWidth);
            			}
            			else {
HXLINE(2837)				uvWidth = (int)0;
            			}
HXLINE(2838)			Float uvHeight;
HXDLIN(2838)			if ((this->_hx___textureHeight > (int)0)) {
HXLINE(2838)				uvHeight = ((Float)height / (Float)this->_hx___textureHeight);
            			}
            			else {
HXLINE(2838)				uvHeight = (int)0;
            			}
HXLINE(2840)			{
HXLINE(2840)				 ::lime::utils::ArrayBufferView this1 = this->_hx___bufferData;
HXDLIN(2840)				::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,width);
            			}
HXLINE(2841)			{
HXLINE(2841)				 ::lime::utils::ArrayBufferView this2 = this->_hx___bufferData;
HXDLIN(2841)				::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + (int)4),height);
            			}
HXLINE(2842)			{
HXLINE(2842)				 ::lime::utils::ArrayBufferView this3 = this->_hx___bufferData;
HXDLIN(2842)				Float val = (uvX + uvWidth);
HXDLIN(2842)				::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + (int)12),val);
            			}
HXLINE(2843)			{
HXLINE(2843)				 ::lime::utils::ArrayBufferView this4 = this->_hx___bufferData;
HXDLIN(2843)				Float val1 = (uvY + uvHeight);
HXDLIN(2843)				::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + (int)16),val1);
            			}
HXLINE(2844)			{
HXLINE(2844)				 ::lime::utils::ArrayBufferView this5 = this->_hx___bufferData;
HXDLIN(2844)				::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + (int)60),height);
            			}
HXLINE(2845)			{
HXLINE(2845)				 ::lime::utils::ArrayBufferView this6 = this->_hx___bufferData;
HXDLIN(2845)				::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + (int)68),uvX);
            			}
HXLINE(2846)			{
HXLINE(2846)				 ::lime::utils::ArrayBufferView this7 = this->_hx___bufferData;
HXDLIN(2846)				Float val2 = (uvY + uvHeight);
HXDLIN(2846)				::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + (int)72),val2);
            			}
HXLINE(2847)			{
HXLINE(2847)				 ::lime::utils::ArrayBufferView this8 = this->_hx___bufferData;
HXDLIN(2847)				::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + (int)112),width);
            			}
HXLINE(2848)			{
HXLINE(2848)				 ::lime::utils::ArrayBufferView this9 = this->_hx___bufferData;
HXDLIN(2848)				Float val3 = (uvX + uvWidth);
HXDLIN(2848)				::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + (int)124),val3);
            			}
HXLINE(2849)			{
HXLINE(2849)				 ::lime::utils::ArrayBufferView this10 = this->_hx___bufferData;
HXDLIN(2849)				::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + (int)128),uvY);
            			}
HXLINE(2850)			{
HXLINE(2850)				 ::lime::utils::ArrayBufferView this11 = this->_hx___bufferData;
HXDLIN(2850)				::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + (int)180),uvX);
            			}
HXLINE(2851)			{
HXLINE(2851)				 ::lime::utils::ArrayBufferView this12 = this->_hx___bufferData;
HXDLIN(2851)				::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + (int)184),uvY);
            			}
HXLINE(2853)			::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ARRAY_BUFFER,this->_hx___bufferData,gl->STATIC_DRAW);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setUVRect,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2861___sync)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2872___update)
HXDLIN(2872)		this->_hx___updateTransforms(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___update,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2877___updateTransforms)
HXLINE(2879)		if (hx::IsNull( overrideTransform )) {
HXLINE(2881)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(2885)			this->_hx___worldTransform->copyFrom(overrideTransform);
            		}
HXLINE(2889)		this->_hx___renderTransform->copyFrom(this->_hx___worldTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

int BitmapData_obj::_hx___bufferStride;

 ::Dynamic BitmapData_obj::_hx___supportsBGRA;

 ::lime::math::Vector2 BitmapData_obj::_hx___tempVector;

int BitmapData_obj::_hx___textureFormat;

int BitmapData_obj::_hx___textureInternalFormat;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1116_fromBase64)
HXLINE(1121)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE(1122)		{
HXLINE(1122)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXDLIN(1122)			bitmapData->_hx___fromImage(image);
            		}
HXLINE(1123)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1131_fromBytes)
HXLINE(1136)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE(1137)		{
HXLINE(1137)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXDLIN(1137)			bitmapData->_hx___fromImage(image);
HXDLIN(1137)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1137)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
            		}
HXLINE(1138)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1160_fromFile)
HXLINE(1165)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE(1166)		bitmapData->_hx___fromFile(path);
HXLINE(1167)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< bool >  __o_transparent){
bool transparent = __o_transparent.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1174_fromImage)
HXLINE(1176)		bool _hx_tmp;
HXDLIN(1176)		if (hx::IsNotNull( image )) {
HXLINE(1176)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE(1176)			_hx_tmp = true;
            		}
HXDLIN(1176)		if (_hx_tmp) {
HXLINE(1176)			return null();
            		}
HXLINE(1178)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,transparent,(int)0);
HXLINE(1179)		bitmapData->_hx___fromImage(image);
HXLINE(1180)		bitmapData->image->set_transparent(transparent);
HXLINE(1181)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::fromTexture( ::openfl::display3D::textures::TextureBase texture){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1186_fromTexture)
HXLINE(1188)		if (hx::IsNull( texture )) {
HXLINE(1188)			return null();
            		}
HXLINE(1190)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,texture->_hx___width,texture->_hx___height,true,(int)0);
HXLINE(1191)		bitmapData->readable = false;
HXLINE(1192)		bitmapData->_hx___texture = texture->_hx___textureID;
HXLINE(1193)		bitmapData->_hx___textureContext = texture->_hx___textureContext;
HXLINE(1194)		bitmapData->image = null();
HXLINE(1195)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromTexture,return )

 ::lime::app::Future BitmapData_obj::loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1916_loadFromBase64)
HXLINE(1916)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1914_loadFromBase64)
HXDLIN(1914)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1925_loadFromBytes)
HXLINE(1927)			 ::openfl::display::BitmapData bitmapData = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(1929)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1931)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(1935)			return ::lime::app::Future_obj::withValue(bitmapData);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1925_loadFromBytes)
HXDLIN(1925)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1946_loadFromFile)
HXLINE(1946)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1944_loadFromFile)
HXDLIN(1944)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,loadFromFile,return )


hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	BitmapData_obj *__this = (BitmapData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferColorTransform,"__bufferColorTransform");
	HX_MARK_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_MARK_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferColorTransform,"__bufferColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_VISIT_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { return hx::Val( _hx___uvRect ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawGL") ) { return hx::Val( _hx___drawGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid ); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBuffer") ) { return hx::Val( getBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fillRect") ) { return hx::Val( _hx___fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent ); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCairo") ) { return hx::Val( _hx___drawCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setUVRect") ) { return hx::Val( _hx___setUVRect_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData ); }
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"disposeImage") ) { return hx::Val( disposeImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return hx::Val( _hx___applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCanvas") ) { return hx::Val( _hx___drawCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { return hx::Val( _hx___bufferAlpha ); }
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { return hx::Val( _hx___textureWidth ); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromFile") ) { return hx::Val( _hx___loadFromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { return hx::Val( _hx___bufferContext ); }
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { return hx::Val( _hx___stencilBuffer ); }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { return hx::Val( _hx___textureHeight ); }
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromBytes") ) { return hx::Val( _hx___loadFromBytes_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return hx::Val( _hx___textureContext ); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"__getFramebuffer") ) { return hx::Val( _hx___getFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromBase64") ) { return hx::Val( _hx___loadFromBase64_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { return hx::Val( _hx___framebufferContext ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__bufferColorTransform") ) { return hx::Val( _hx___bufferColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { outValue = ( _hx___tempVector ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { outValue = ( _hx___supportsBGRA ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { outValue = ( _hx___textureFormat ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { outValue = ( _hx___textureInternalFormat ); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { _hx___uvRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { _hx___bufferAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { _hx___textureWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { _hx___bufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { _hx___stencilBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { _hx___textureHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { _hx___framebufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__bufferColorTransform") ) { _hx___bufferColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { _hx___tempVector=ioValue.Cast<  ::lime::math::Vector2 >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { _hx___supportsBGRA=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { _hx___textureFormat=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { _hx___textureInternalFormat=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferColorTransform","\xc9","\x8b","\xc3","\x0f"));
	outFields->push(HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"));
	outFields->push(HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__stencilBuffer","\xfc","\xcc","\xeb","\xb8"));
	outFields->push(HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"));
	outFields->push(HX_HCSTRING("__textureHeight","\x02","\x14","\x16","\x1d"));
	outFields->push(HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"));
	outFields->push(HX_HCSTRING("__textureWidth","\x4b","\xe6","\xc2","\xe3"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__uvRect","\x45","\x8f","\xb9","\x97"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___bufferColorTransform),HX_HCSTRING("__bufferColorTransform","\xc9","\x8b","\xc3","\x0f")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___bufferContext),HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6")},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___bufferAlpha),HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(BitmapData_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___framebufferContext),HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(BitmapData_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___stencilBuffer),HX_HCSTRING("__stencilBuffer","\xfc","\xcc","\xeb","\xb8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___textureContext),HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureHeight),HX_HCSTRING("__textureHeight","\x02","\x14","\x16","\x1d")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureWidth),HX_HCSTRING("__textureWidth","\x4b","\xe6","\xc2","\xe3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,_hx___uvRect),HX_HCSTRING("__uvRect","\x45","\x8f","\xb9","\x97")},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapData_obj::_hx___bufferStride,HX_HCSTRING("__bufferStride","\x59","\x94","\xc5","\x36")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::_hx___supportsBGRA,HX_HCSTRING("__supportsBGRA","\x58","\x53","\x57","\x0f")},
	{hx::fsObject /*::lime::math::Vector2*/ ,(void *) &BitmapData_obj::_hx___tempVector,HX_HCSTRING("__tempVector","\x17","\xea","\x60","\xeb")},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureFormat,HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18")},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureInternalFormat,HX_HCSTRING("__textureInternalFormat","\x6f","\x15","\xaa","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferColorTransform","\xc9","\x8b","\xc3","\x0f"),
	HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"),
	HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__stencilBuffer","\xfc","\xcc","\xeb","\xb8"),
	HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"),
	HX_HCSTRING("__textureHeight","\x02","\x14","\x16","\x1d"),
	HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"),
	HX_HCSTRING("__textureWidth","\x4b","\xe6","\xc2","\xe3"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__uvRect","\x45","\x8f","\xb9","\x97"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("disposeImage","\x3c","\x6e","\xb8","\x62"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawWithQuality","\xb5","\xc5","\x05","\x6f"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getBuffer","\x36","\x46","\xeb","\x4c"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("histogram","\xa4","\xde","\x33","\x65"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("__applyAlpha","\x30","\x9e","\x7b","\x05"),
	HX_HCSTRING("__drawCairo","\xc4","\xae","\x50","\x37"),
	HX_HCSTRING("__drawCanvas","\x1c","\x4b","\x99","\x32"),
	HX_HCSTRING("__drawGL","\x49","\xde","\x05","\x88"),
	HX_HCSTRING("__fillRect","\x67","\xb8","\xf1","\x0f"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImage","\x71","\x52","\x1e","\xa0"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getFramebuffer","\x17","\xf3","\x25","\x36"),
	HX_HCSTRING("__loadFromBase64","\x7f","\x97","\x5c","\x63"),
	HX_HCSTRING("__loadFromBytes","\x7b","\xfc","\x38","\x7c"),
	HX_HCSTRING("__loadFromFile","\x6c","\x0c","\xb1","\x7b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setUVRect","\x27","\x52","\x8b","\x10"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___bufferStride,"__bufferStride");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___bufferStride,"__bufferStride");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("__bufferStride","\x59","\x94","\xc5","\x36"),
	HX_HCSTRING("__supportsBGRA","\x58","\x53","\x57","\x0f"),
	HX_HCSTRING("__tempVector","\x17","\xea","\x60","\xeb"),
	HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18"),
	HX_HCSTRING("__textureInternalFormat","\x6f","\x15","\xaa","\xa7"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImage","\x91","\x09","\xf2","\x71"),
	HX_HCSTRING("fromTexture","\x91","\x2c","\x21","\x37"),
	HX_HCSTRING("loadFromBase64","\x5f","\x0c","\x1d","\x2f"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Object *dummy = new BitmapData_obj;
	BitmapData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.BitmapData","\xa3","\x12","\x41","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_153_boot)
HXDLIN( 153)		_hx___bufferStride = (int)14;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_154_boot)
HXDLIN( 154)		_hx___supportsBGRA = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_155_boot)
HXDLIN( 155)		_hx___tempVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace openfl
} // end namespace display
