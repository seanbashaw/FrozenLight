// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxRenderMethod
#include <flixel/FlxRenderMethod.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess_PostProcess
#include <flixel/effects/postprocess/PostProcess.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_FlxSwipe
#include <flixel/input/FlxSwipe.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxQuadTree
#include <flixel/system/FlxQuadTree.h>
#endif
#ifndef INCLUDED_flixel_system_FlxVersion
#include <flixel/system/FlxVersion.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapLogFrontEnd
#include <flixel/system/frontEnds/BitmapLogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_ConsoleFrontEnd
#include <flixel/system/frontEnds/ConsoleFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_RatioScaleMode
#include <flixel/system/scaleModes/RatioScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxCollision
#include <flixel/util/FlxCollision.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_312_resizeGame,"flixel.FlxG","resizeGame",0x80aafe0d,"flixel.FlxG.resizeGame","flixel/FlxG.hx",312,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_329_resizeWindow,"flixel.FlxG","resizeWindow",0x41839acb,"flixel.FlxG.resizeWindow","flixel/FlxG.hx",329,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_340_resetGame,"flixel.FlxG","resetGame",0x7560e13a,"flixel.FlxG.resetGame","flixel/FlxG.hx",340,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_349_switchState,"flixel.FlxG","switchState",0xbec45396,"flixel.FlxG.switchState","flixel/FlxG.hx",349,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_359_resetState,"flixel.FlxG","resetState",0x34b927c9,"flixel.FlxG.resetState","flixel/FlxG.hx",359,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_388_overlap,"flixel.FlxG","overlap",0x37194f20,"flixel.FlxG.overlap","flixel/FlxG.hx",388,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_419_pixelPerfectOverlap,"flixel.FlxG","pixelPerfectOverlap",0x4d139839,"flixel.FlxG.pixelPerfectOverlap","flixel/FlxG.hx",419,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_443_collide,"flixel.FlxG","collide",0x7b6cbb17,"flixel.FlxG.collide","flixel/FlxG.hx",443,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_502_addPostProcess,"flixel.FlxG","addPostProcess",0x527e22d5,"flixel.FlxG.addPostProcess","flixel/FlxG.hx",502,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_506_removePostProcess,"flixel.FlxG","removePostProcess",0x4ea610e4,"flixel.FlxG.removePostProcess","flixel/FlxG.hx",506,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_543_openURL,"flixel.FlxG","openURL",0xce3ec95e,"flixel.FlxG.openURL","flixel/FlxG.hx",543,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_556_init,"flixel.FlxG","init",0x1141e5d7,"flixel.FlxG.init","flixel/FlxG.hx",556,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_604_initRenderMethod,"flixel.FlxG","initRenderMethod",0x7472134e,"flixel.FlxG.initRenderMethod","flixel/FlxG.hx",604,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_652_reset,"flixel.FlxG","reset",0x31170d28,"flixel.FlxG.reset","flixel/FlxG.hx",652,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_670_set_scaleMode,"flixel.FlxG","set_scaleMode",0xb374d549,"flixel.FlxG.set_scaleMode","flixel/FlxG.hx",670,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_678_set_mouse,"flixel.FlxG","set_mouse",0x1e754261,"flixel.FlxG.set_mouse","flixel/FlxG.hx",678,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_697_set_updateFramerate,"flixel.FlxG","set_updateFramerate",0x52770580,"flixel.FlxG.set_updateFramerate","flixel/FlxG.hx",697,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_714_set_drawFramerate,"flixel.FlxG","set_drawFramerate",0x3e23c125,"flixel.FlxG.set_drawFramerate","flixel/FlxG.hx",714,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_734_get_fullscreen,"flixel.FlxG","get_fullscreen",0xfece4c0b,"flixel.FlxG.get_fullscreen","flixel/FlxG.hx",734,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_739_set_fullscreen,"flixel.FlxG","set_fullscreen",0x1eee347f,"flixel.FlxG.set_fullscreen","flixel/FlxG.hx",739,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_746_get_stage,"flixel.FlxG","get_stage",0xb2caaaee,"flixel.FlxG.get_stage","flixel/FlxG.hx",746,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_751_get_state,"flixel.FlxG","get_state",0xb2cab641,"flixel.FlxG.get_state","flixel/FlxG.hx",751,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_756_get_onMobile,"flixel.FlxG","get_onMobile",0x5f27a0b1,"flixel.FlxG.get_onMobile","flixel/FlxG.hx",756,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_71_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",71,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_76_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",76,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_80_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",80,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_86_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",86,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_97_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",97,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_143_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",143,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_150_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",150,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_165_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",165,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_175_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",175,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_181_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",181,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_187_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",187,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_208_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",208,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_250_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",250,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_254_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",254,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_258_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",258,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_262_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",262,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_266_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",266,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_271_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",271,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_281_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",281,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_285_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",285,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_291_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",291,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_292_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",292,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_293_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",293,0x8e176836)
HX_LOCAL_STACK_FRAME(_hx_pos_5f7463bd5b510fa4_305_boot,"flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",305,0x8e176836)
namespace flixel{

void FlxG_obj::__construct() { }

Dynamic FlxG_obj::__CreateEmpty() { return new FlxG_obj; }

void *FlxG_obj::_hx_vtable = 0;

Dynamic FlxG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxG_obj > _hx_result = new FlxG_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxG_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x304c4dd1;
}

bool FlxG_obj::autoPause;

bool FlxG_obj::fixedTimestep;

Float FlxG_obj::timeScale;

int FlxG_obj::worldDivisions;

 ::flixel::FlxCamera FlxG_obj::camera;

 ::flixel::_hx_system::FlxVersion FlxG_obj::VERSION;

 ::flixel::FlxGame FlxG_obj::game;

int FlxG_obj::updateFramerate;

int FlxG_obj::drawFramerate;

 ::flixel::FlxRenderMethod FlxG_obj::renderMethod;

bool FlxG_obj::renderBlit;

bool FlxG_obj::renderTile;

Float FlxG_obj::elapsed;

Float FlxG_obj::maxElapsed;

int FlxG_obj::width;

int FlxG_obj::height;

 ::flixel::_hx_system::scaleModes::BaseScaleMode FlxG_obj::scaleMode;

 ::flixel::math::FlxRect FlxG_obj::worldBounds;

 ::flixel::util::FlxSave FlxG_obj::save;

 ::flixel::math::FlxRandom FlxG_obj::random;

 ::flixel::input::mouse::FlxMouse FlxG_obj::mouse;

::Array< ::Dynamic> FlxG_obj::swipes;

 ::flixel::input::keyboard::FlxKeyboard FlxG_obj::keys;

 ::flixel::input::gamepad::FlxGamepadManager FlxG_obj::gamepads;

 ::flixel::_hx_system::frontEnds::InputFrontEnd FlxG_obj::inputs;

 ::flixel::_hx_system::frontEnds::ConsoleFrontEnd FlxG_obj::console;

 ::flixel::_hx_system::frontEnds::LogFrontEnd FlxG_obj::log;

 ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd FlxG_obj::bitmapLog;

 ::flixel::_hx_system::frontEnds::WatchFrontEnd FlxG_obj::watch;

 ::flixel::_hx_system::frontEnds::DebuggerFrontEnd FlxG_obj::debugger;

 ::flixel::_hx_system::frontEnds::VCRFrontEnd FlxG_obj::vcr;

 ::flixel::_hx_system::frontEnds::BitmapFrontEnd FlxG_obj::bitmap;

 ::flixel::_hx_system::frontEnds::CameraFrontEnd FlxG_obj::cameras;

 ::flixel::_hx_system::frontEnds::PluginFrontEnd FlxG_obj::plugins;

int FlxG_obj::initialWidth;

int FlxG_obj::initialHeight;

Float FlxG_obj::initialZoom;

 ::flixel::_hx_system::frontEnds::SoundFrontEnd FlxG_obj::sound;

 ::flixel::_hx_system::frontEnds::SignalFrontEnd FlxG_obj::signals;

void FlxG_obj::resizeGame(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_312_resizeGame)
HXDLIN( 312)		::flixel::FlxG_obj::scaleMode->onMeasure(Width,Height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxG_obj,resizeGame,(void))

void FlxG_obj::resizeWindow(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_329_resizeWindow)
HXDLIN( 329)		::openfl::Lib_obj::get_application()->_hx___window->resize(Width,Height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxG_obj,resizeWindow,(void))

void FlxG_obj::resetGame(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_340_resetGame)
HXDLIN( 340)		::flixel::FlxG_obj::game->_resetGame = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,resetGame,(void))

void FlxG_obj::switchState( ::flixel::FlxState nextState){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_349_switchState)
HXDLIN( 349)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 350)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,switchState,(void))

void FlxG_obj::resetState(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_359_resetState)
HXDLIN( 359)		 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 359)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 359)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,resetState,(void))

bool FlxG_obj::overlap( ::flixel::FlxBasic ObjectOrGroup1, ::flixel::FlxBasic ObjectOrGroup2, ::Dynamic NotifyCallback, ::Dynamic ProcessCallback){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_388_overlap)
HXLINE( 389)		if (hx::IsNull( ObjectOrGroup1 )) {
HXLINE( 390)			ObjectOrGroup1 = ::flixel::FlxG_obj::game->_state;
            		}
HXLINE( 391)		if (hx::IsEq( ObjectOrGroup2,ObjectOrGroup1 )) {
HXLINE( 392)			ObjectOrGroup2 = null();
            		}
HXLINE( 394)		::flixel::_hx_system::FlxQuadTree_obj::divisions = ::flixel::FlxG_obj::worldDivisions;
HXLINE( 395)		 ::flixel::_hx_system::FlxQuadTree quadTree = ::flixel::_hx_system::FlxQuadTree_obj::recycle(::flixel::FlxG_obj::worldBounds->x,::flixel::FlxG_obj::worldBounds->y,::flixel::FlxG_obj::worldBounds->width,::flixel::FlxG_obj::worldBounds->height,null());
HXLINE( 396)		quadTree->load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
HXLINE( 397)		bool result = quadTree->execute();
HXLINE( 398)		quadTree->destroy();
HXLINE( 399)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxG_obj,overlap,return )

bool FlxG_obj::pixelPerfectOverlap( ::flixel::FlxSprite Sprite1, ::flixel::FlxSprite Sprite2,hx::Null< int >  __o_AlphaTolerance, ::flixel::FlxCamera Camera){
int AlphaTolerance = __o_AlphaTolerance.Default(255);
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_419_pixelPerfectOverlap)
HXDLIN( 419)		return ::flixel::util::FlxCollision_obj::pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxG_obj,pixelPerfectOverlap,return )

bool FlxG_obj::collide( ::flixel::FlxBasic ObjectOrGroup1, ::flixel::FlxBasic ObjectOrGroup2, ::Dynamic NotifyCallback){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_443_collide)
HXDLIN( 443)		return ::flixel::FlxG_obj::overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxG_obj,collide,return )

 ::flixel::effects::postprocess::PostProcess FlxG_obj::addPostProcess( ::flixel::effects::postprocess::PostProcess postProcess){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_502_addPostProcess)
HXDLIN( 502)		return postProcess;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,addPostProcess,return )

void FlxG_obj::removePostProcess( ::flixel::effects::postprocess::PostProcess postProcess){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_506_removePostProcess)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,removePostProcess,(void))

void FlxG_obj::openURL(::String URL,::String __o_Target){
::String Target = __o_Target.Default(HX_HCSTRING("_blank","\x95","\x26","\xd9","\xb0"));
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_543_openURL)
HXLINE( 544)		::String prefix = HX_("",00,00,00,00);
HXLINE( 546)		if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(URL))) {
HXLINE( 547)			prefix = HX_("http://",52,75,cd,5a);
            		}
HXLINE( 548)		::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + URL)),Target);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxG_obj,openURL,(void))

void FlxG_obj::init( ::flixel::FlxGame Game,int Width,int Height,Float Zoom){
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_556_init)
HXLINE( 557)		::flixel::FlxG_obj::game = Game;
HXLINE( 558)		::flixel::FlxG_obj::width = ::Std_obj::_hx_int(::Math_obj::abs(Width));
HXLINE( 559)		::flixel::FlxG_obj::height = ::Std_obj::_hx_int(::Math_obj::abs(Height));
HXLINE( 561)		::flixel::FlxG_obj::initRenderMethod();
HXLINE( 563)		::flixel::FlxG_obj::initialWidth = ::flixel::FlxG_obj::width;
HXLINE( 564)		::flixel::FlxG_obj::initialHeight = ::flixel::FlxG_obj::height;
HXLINE( 565)		::flixel::FlxG_obj::initialZoom = (::flixel::FlxCamera_obj::defaultZoom = Zoom);
HXLINE( 567)		{
HXLINE( 567)			int Width1 = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXDLIN( 567)			int Height1 = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXDLIN( 567)			::flixel::FlxG_obj::scaleMode->onMeasure(Width1,Height1);
            		}
HXLINE( 571)		 ::flixel::_hx_system::frontEnds::InputFrontEnd _hx_tmp = ::flixel::FlxG_obj::inputs;
HXDLIN( 571)		::flixel::FlxG_obj::keys = _hx_tmp->add_flixel_input_keyboard_FlxKeyboard( ::flixel::input::keyboard::FlxKeyboard_obj::__alloc( HX_CTX ));
HXLINE( 575)		 ::flixel::_hx_system::frontEnds::InputFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::inputs;
HXDLIN( 575)		::flixel::FlxG_obj::set_mouse(_hx_tmp1->add_flixel_input_mouse_FlxMouse( ::flixel::input::mouse::FlxMouse_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::game->_inputContainer)));
HXLINE( 583)		 ::flixel::_hx_system::frontEnds::InputFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::inputs;
HXDLIN( 583)		::flixel::FlxG_obj::gamepads = _hx_tmp2->add_flixel_input_gamepad_FlxGamepadManager( ::flixel::input::gamepad::FlxGamepadManager_obj::__alloc( HX_CTX ));
HXLINE( 593)		::flixel::FlxG_obj::save->bind(HX_("flixel",5c,42,70,3d));
HXLINE( 595)		::flixel::FlxG_obj::plugins =  ::flixel::_hx_system::frontEnds::PluginFrontEnd_obj::__alloc( HX_CTX );
HXLINE( 596)		::flixel::FlxG_obj::vcr =  ::flixel::_hx_system::frontEnds::VCRFrontEnd_obj::__alloc( HX_CTX );
HXLINE( 599)		::flixel::FlxG_obj::sound =  ::flixel::_hx_system::frontEnds::SoundFrontEnd_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxG_obj,init,(void))

void FlxG_obj::initRenderMethod(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_604_initRenderMethod)
HXLINE( 605)		::flixel::FlxG_obj::renderMethod = ::flixel::FlxRenderMethod_obj::BLITTING_dyn();
HXLINE( 609)		::String _g = ::openfl::Lib_obj::get_current()->stage->window->context->type;
HXDLIN( 609)		 ::flixel::FlxRenderMethod _hx_tmp;
HXDLIN( 609)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE( 609)			_hx_tmp = ::flixel::FlxRenderMethod_obj::DRAW_TILES_dyn();
HXDLIN( 609)			goto _hx_goto_12;
            		}
            		/* default */{
HXLINE( 609)			_hx_tmp = ::flixel::FlxRenderMethod_obj::BLITTING_dyn();
            		}
            		_hx_goto_12:;
HXDLIN( 609)		::flixel::FlxG_obj::renderMethod = _hx_tmp;
HXLINE( 641)		::flixel::FlxG_obj::renderBlit = hx::IsEq( ::flixel::FlxG_obj::renderMethod,::flixel::FlxRenderMethod_obj::BLITTING_dyn() );
HXLINE( 642)		::flixel::FlxG_obj::renderTile = hx::IsEq( ::flixel::FlxG_obj::renderMethod,::flixel::FlxRenderMethod_obj::DRAW_TILES_dyn() );
HXLINE( 644)		::flixel::FlxObject_obj::defaultPixelPerfectPosition = ::flixel::FlxG_obj::renderBlit;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,initRenderMethod,(void))

void FlxG_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_652_reset)
HXLINE( 653)		{
HXLINE( 653)			 ::flixel::math::FlxRandom _this = ::flixel::FlxG_obj::random;
HXDLIN( 653)			{
HXLINE( 653)				int Value = ::Std_obj::_hx_int((::Math_obj::random() * (int)2147483647));
HXDLIN( 653)				Float lowerBound;
HXDLIN( 653)				if ((Value < (int)1)) {
HXLINE( 653)					lowerBound = (int)1;
            				}
            				else {
HXLINE( 653)					lowerBound = Value;
            				}
HXDLIN( 653)				 ::Dynamic NewSeed;
HXDLIN( 653)				if ((lowerBound > (int)2147483646)) {
HXLINE( 653)					NewSeed = (int)2147483646;
            				}
            				else {
HXLINE( 653)					NewSeed = lowerBound;
            				}
HXDLIN( 653)				int NewSeed1 = ::Std_obj::_hx_int(NewSeed);
HXDLIN( 653)				Float lowerBound1;
HXDLIN( 653)				if ((NewSeed1 < (int)1)) {
HXLINE( 653)					lowerBound1 = (int)1;
            				}
            				else {
HXLINE( 653)					lowerBound1 = NewSeed1;
            				}
HXDLIN( 653)				 ::Dynamic NewSeed2;
HXDLIN( 653)				if ((lowerBound1 > (int)2147483646)) {
HXLINE( 653)					NewSeed2 = (int)2147483646;
            				}
            				else {
HXLINE( 653)					NewSeed2 = lowerBound1;
            				}
HXDLIN( 653)				int NewSeed3 = ::Std_obj::_hx_int(NewSeed2);
HXDLIN( 653)				Float lowerBound2;
HXDLIN( 653)				if ((NewSeed3 < (int)1)) {
HXLINE( 653)					lowerBound2 = (int)1;
            				}
            				else {
HXLINE( 653)					lowerBound2 = NewSeed3;
            				}
HXDLIN( 653)				 ::Dynamic _hx_tmp;
HXDLIN( 653)				if ((lowerBound2 > (int)2147483646)) {
HXLINE( 653)					_hx_tmp = (int)2147483646;
            				}
            				else {
HXLINE( 653)					_hx_tmp = lowerBound2;
            				}
HXDLIN( 653)				_this->initialSeed = ::Std_obj::_hx_int((_this->internalSeed = ::Std_obj::_hx_int(_hx_tmp)));
            			}
            		}
HXLINE( 655)		::flixel::FlxG_obj::bitmap->reset();
HXLINE( 656)		::flixel::FlxG_obj::inputs->reset();
HXLINE( 658)		::flixel::FlxG_obj::sound->destroy(true);
HXLINE( 660)		::flixel::FlxG_obj::autoPause = true;
HXLINE( 661)		::flixel::FlxG_obj::fixedTimestep = true;
HXLINE( 662)		::flixel::FlxG_obj::timeScale = ((Float)1.0);
HXLINE( 663)		::flixel::FlxG_obj::elapsed = (int)0;
HXLINE( 664)		::flixel::FlxG_obj::maxElapsed = ((Float)0.1);
HXLINE( 665)		{
HXLINE( 665)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 665)			_this1->x = (int)-10;
HXDLIN( 665)			_this1->y = (int)-10;
HXDLIN( 665)			_this1->width = (::flixel::FlxG_obj::width + (int)20);
HXDLIN( 665)			_this1->height = (::flixel::FlxG_obj::height + (int)20);
            		}
HXLINE( 666)		::flixel::FlxG_obj::worldDivisions = (int)6;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,reset,(void))

 ::flixel::_hx_system::scaleModes::BaseScaleMode FlxG_obj::set_scaleMode( ::flixel::_hx_system::scaleModes::BaseScaleMode ScaleMode){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_670_set_scaleMode)
HXLINE( 671)		::flixel::FlxG_obj::scaleMode = ScaleMode;
HXLINE( 672)		::flixel::FlxG_obj::game->onResize(null());
HXLINE( 673)		return ScaleMode;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_scaleMode,return )

 ::flixel::input::mouse::FlxMouse FlxG_obj::set_mouse( ::flixel::input::mouse::FlxMouse NewMouse){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_678_set_mouse)
HXLINE( 679)		if (hx::IsNull( ::flixel::FlxG_obj::mouse )) {
HXLINE( 681)			::flixel::FlxG_obj::mouse = ::flixel::FlxG_obj::inputs->add_flixel_input_mouse_FlxMouse(NewMouse);
HXLINE( 682)			return ::flixel::FlxG_obj::mouse;
            		}
HXLINE( 684)		 ::flixel::input::mouse::FlxMouse oldMouse = ::flixel::FlxG_obj::mouse;
HXLINE( 685)		 ::flixel::input::mouse::FlxMouse result = ::flixel::FlxG_obj::inputs->replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
HXLINE( 686)		if (hx::IsNotNull( result )) {
HXLINE( 688)			::flixel::FlxG_obj::mouse = result;
HXLINE( 689)			oldMouse->destroy();
HXLINE( 690)			return NewMouse;
            		}
HXLINE( 692)		return oldMouse;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_mouse,return )

int FlxG_obj::set_updateFramerate(int Framerate){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_697_set_updateFramerate)
HXLINE( 698)		if ((Framerate < ::flixel::FlxG_obj::drawFramerate)) {
HXLINE( 699)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            		}
HXLINE( 702)		::flixel::FlxG_obj::updateFramerate = Framerate;
HXLINE( 704)		::flixel::FlxG_obj::game->_stepMS = ::Math_obj::abs(((Float)(int)1000 / (Float)Framerate));
HXLINE( 705)		::flixel::FlxG_obj::game->_stepSeconds = ((Float)::flixel::FlxG_obj::game->_stepMS / (Float)(int)1000);
HXLINE( 707)		if ((::flixel::FlxG_obj::game->_maxAccumulation < ::flixel::FlxG_obj::game->_stepMS)) {
HXLINE( 708)			::flixel::FlxG_obj::game->_maxAccumulation = ::flixel::FlxG_obj::game->_stepMS;
            		}
HXLINE( 710)		return Framerate;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_updateFramerate,return )

int FlxG_obj::set_drawFramerate(int Framerate){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_714_set_drawFramerate)
HXLINE( 715)		if ((Framerate > ::flixel::FlxG_obj::updateFramerate)) {
HXLINE( 716)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            		}
HXLINE( 719)		::flixel::FlxG_obj::drawFramerate = ::Std_obj::_hx_int(::Math_obj::abs(Framerate));
HXLINE( 721)		if (hx::IsNotNull( ::flixel::FlxG_obj::game->stage )) {
HXLINE( 722)			::flixel::FlxG_obj::game->stage->set_frameRate(::flixel::FlxG_obj::drawFramerate);
            		}
HXLINE( 724)		::flixel::FlxG_obj::game->_maxAccumulation = (((Float)(int)2000 / (Float)::flixel::FlxG_obj::drawFramerate) - (int)1);
HXLINE( 726)		if ((::flixel::FlxG_obj::game->_maxAccumulation < ::flixel::FlxG_obj::game->_stepMS)) {
HXLINE( 727)			::flixel::FlxG_obj::game->_maxAccumulation = ::flixel::FlxG_obj::game->_stepMS;
            		}
HXLINE( 729)		return Framerate;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_drawFramerate,return )

bool FlxG_obj::get_fullscreen(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_734_get_fullscreen)
HXDLIN( 734)		if (hx::IsNotEq( ::openfl::Lib_obj::get_current()->stage->get_displayState(),(int)0 )) {
HXLINE( 735)			return hx::IsEq( ::openfl::Lib_obj::get_current()->stage->get_displayState(),(int)1 );
            		}
            		else {
HXDLIN( 734)			return true;
            		}
HXDLIN( 734)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_fullscreen,return )

bool FlxG_obj::set_fullscreen(bool Value){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_739_set_fullscreen)
HXLINE( 740)		 ::Dynamic _hx_tmp;
HXDLIN( 740)		if (Value) {
HXLINE( 740)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 740)			_hx_tmp = (int)2;
            		}
HXDLIN( 740)		::openfl::Lib_obj::get_current()->stage->set_displayState(_hx_tmp);
HXLINE( 741)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_fullscreen,return )

 ::openfl::display::Stage FlxG_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_746_get_stage)
HXDLIN( 746)		return ::openfl::Lib_obj::get_current()->stage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_stage,return )

 ::flixel::FlxState FlxG_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_751_get_state)
HXDLIN( 751)		return ::flixel::FlxG_obj::game->_state;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_state,return )

bool FlxG_obj::get_onMobile(){
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_756_get_onMobile)
HXDLIN( 756)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_onMobile,return )


FlxG_obj::FlxG_obj()
{
}

bool FlxG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { outValue = ( log ); return true; }
		if (HX_FIELD_EQ(inName,"vcr") ) { outValue = ( vcr ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { outValue = ( game ); return true; }
		if (HX_FIELD_EQ(inName,"save") ) { outValue = ( save ); return true; }
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = ( keys ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stage") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_stage() ); return true; } }
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_state() ); return true; } }
		if (HX_FIELD_EQ(inName,"width") ) { outValue = ( width ); return true; }
		if (HX_FIELD_EQ(inName,"mouse") ) { outValue = ( mouse ); return true; }
		if (HX_FIELD_EQ(inName,"watch") ) { outValue = ( watch ); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { outValue = ( sound ); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { outValue = ( camera ); return true; }
		if (HX_FIELD_EQ(inName,"height") ) { outValue = ( height ); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { outValue = ( random ); return true; }
		if (HX_FIELD_EQ(inName,"swipes") ) { outValue = ( swipes ); return true; }
		if (HX_FIELD_EQ(inName,"inputs") ) { outValue = ( inputs ); return true; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { outValue = ( bitmap ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { outValue = ( VERSION ); return true; }
		if (HX_FIELD_EQ(inName,"elapsed") ) { outValue = ( elapsed ); return true; }
		if (HX_FIELD_EQ(inName,"console") ) { outValue = ( console ); return true; }
		if (HX_FIELD_EQ(inName,"cameras") ) { outValue = ( cameras ); return true; }
		if (HX_FIELD_EQ(inName,"plugins") ) { outValue = ( plugins ); return true; }
		if (HX_FIELD_EQ(inName,"signals") ) { outValue = ( signals ); return true; }
		if (HX_FIELD_EQ(inName,"overlap") ) { outValue = overlap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"collide") ) { outValue = collide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"openURL") ) { outValue = openURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onMobile") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_onMobile() ); return true; } }
		if (HX_FIELD_EQ(inName,"gamepads") ) { outValue = ( gamepads ); return true; }
		if (HX_FIELD_EQ(inName,"debugger") ) { outValue = ( debugger ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoPause") ) { outValue = ( autoPause ); return true; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { outValue = ( timeScale ); return true; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { outValue = ( scaleMode ); return true; }
		if (HX_FIELD_EQ(inName,"bitmapLog") ) { outValue = ( bitmapLog ); return true; }
		if (HX_FIELD_EQ(inName,"resetGame") ) { outValue = resetGame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_mouse") ) { outValue = set_mouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_stage") ) { outValue = get_stage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_state") ) { outValue = get_state_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderBlit") ) { outValue = ( renderBlit ); return true; }
		if (HX_FIELD_EQ(inName,"renderTile") ) { outValue = ( renderTile ); return true; }
		if (HX_FIELD_EQ(inName,"maxElapsed") ) { outValue = ( maxElapsed ); return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_fullscreen() ); return true; } }
		if (HX_FIELD_EQ(inName,"resizeGame") ) { outValue = resizeGame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetState") ) { outValue = resetState_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"worldBounds") ) { outValue = ( worldBounds ); return true; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { outValue = ( initialZoom ); return true; }
		if (HX_FIELD_EQ(inName,"switchState") ) { outValue = switchState_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderMethod") ) { outValue = ( renderMethod ); return true; }
		if (HX_FIELD_EQ(inName,"initialWidth") ) { outValue = ( initialWidth ); return true; }
		if (HX_FIELD_EQ(inName,"resizeWindow") ) { outValue = resizeWindow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_onMobile") ) { outValue = get_onMobile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedTimestep") ) { outValue = ( fixedTimestep ); return true; }
		if (HX_FIELD_EQ(inName,"drawFramerate") ) { outValue = ( drawFramerate ); return true; }
		if (HX_FIELD_EQ(inName,"initialHeight") ) { outValue = ( initialHeight ); return true; }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { outValue = set_scaleMode_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldDivisions") ) { outValue = ( worldDivisions ); return true; }
		if (HX_FIELD_EQ(inName,"addPostProcess") ) { outValue = addPostProcess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_fullscreen") ) { outValue = get_fullscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_fullscreen") ) { outValue = set_fullscreen_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateFramerate") ) { outValue = ( updateFramerate ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initRenderMethod") ) { outValue = initRenderMethod_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"removePostProcess") ) { outValue = removePostProcess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_drawFramerate") ) { outValue = set_drawFramerate_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pixelPerfectOverlap") ) { outValue = pixelPerfectOverlap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_updateFramerate") ) { outValue = set_updateFramerate_dyn(); return true; }
	}
	return false;
}

bool FlxG_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { log=ioValue.Cast<  ::flixel::_hx_system::frontEnds::LogFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"vcr") ) { vcr=ioValue.Cast<  ::flixel::_hx_system::frontEnds::VCRFrontEnd >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { game=ioValue.Cast<  ::flixel::FlxGame >(); return true; }
		if (HX_FIELD_EQ(inName,"save") ) { save=ioValue.Cast<  ::flixel::util::FlxSave >(); return true; }
		if (HX_FIELD_EQ(inName,"keys") ) { keys=ioValue.Cast<  ::flixel::input::keyboard::FlxKeyboard >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouse") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_mouse(ioValue.Cast<  ::flixel::input::mouse::FlxMouse >()) ); else mouse=ioValue.Cast<  ::flixel::input::mouse::FlxMouse >(); return true; }
		if (HX_FIELD_EQ(inName,"watch") ) { watch=ioValue.Cast<  ::flixel::_hx_system::frontEnds::WatchFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { sound=ioValue.Cast<  ::flixel::_hx_system::frontEnds::SoundFrontEnd >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { camera=ioValue.Cast<  ::flixel::FlxCamera >(); return true; }
		if (HX_FIELD_EQ(inName,"height") ) { height=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { random=ioValue.Cast<  ::flixel::math::FlxRandom >(); return true; }
		if (HX_FIELD_EQ(inName,"swipes") ) { swipes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"inputs") ) { inputs=ioValue.Cast<  ::flixel::_hx_system::frontEnds::InputFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=ioValue.Cast<  ::flixel::_hx_system::frontEnds::BitmapFrontEnd >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=ioValue.Cast<  ::flixel::_hx_system::FlxVersion >(); return true; }
		if (HX_FIELD_EQ(inName,"elapsed") ) { elapsed=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"console") ) { console=ioValue.Cast<  ::flixel::_hx_system::frontEnds::ConsoleFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"cameras") ) { cameras=ioValue.Cast<  ::flixel::_hx_system::frontEnds::CameraFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"plugins") ) { plugins=ioValue.Cast<  ::flixel::_hx_system::frontEnds::PluginFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"signals") ) { signals=ioValue.Cast<  ::flixel::_hx_system::frontEnds::SignalFrontEnd >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gamepads") ) { gamepads=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return true; }
		if (HX_FIELD_EQ(inName,"debugger") ) { debugger=ioValue.Cast<  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoPause") ) { autoPause=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { timeScale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_scaleMode(ioValue.Cast<  ::flixel::_hx_system::scaleModes::BaseScaleMode >()) ); else scaleMode=ioValue.Cast<  ::flixel::_hx_system::scaleModes::BaseScaleMode >(); return true; }
		if (HX_FIELD_EQ(inName,"bitmapLog") ) { bitmapLog=ioValue.Cast<  ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderBlit") ) { renderBlit=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"renderTile") ) { renderTile=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"maxElapsed") ) { maxElapsed=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_fullscreen(ioValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"worldBounds") ) { worldBounds=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { initialZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderMethod") ) { renderMethod=ioValue.Cast<  ::flixel::FlxRenderMethod >(); return true; }
		if (HX_FIELD_EQ(inName,"initialWidth") ) { initialWidth=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedTimestep") ) { fixedTimestep=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"drawFramerate") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_drawFramerate(ioValue.Cast< int >()) ); else drawFramerate=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"initialHeight") ) { initialHeight=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldDivisions") ) { worldDivisions=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateFramerate") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_updateFramerate(ioValue.Cast< int >()) ); else updateFramerate=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxG_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxG_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &FlxG_obj::autoPause,HX_HCSTRING("autoPause","\x07","\x15","\x63","\x9b")},
	{hx::fsBool,(void *) &FlxG_obj::fixedTimestep,HX_HCSTRING("fixedTimestep","\x6d","\x87","\xbc","\x49")},
	{hx::fsFloat,(void *) &FlxG_obj::timeScale,HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d")},
	{hx::fsInt,(void *) &FlxG_obj::worldDivisions,HX_HCSTRING("worldDivisions","\xf4","\x19","\x32","\xa0")},
	{hx::fsObject /*::flixel::FlxCamera*/ ,(void *) &FlxG_obj::camera,HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7")},
	{hx::fsObject /*::flixel::_hx_system::FlxVersion*/ ,(void *) &FlxG_obj::VERSION,HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsObject /*::flixel::FlxGame*/ ,(void *) &FlxG_obj::game,HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44")},
	{hx::fsInt,(void *) &FlxG_obj::updateFramerate,HX_HCSTRING("updateFramerate","\x44","\xb6","\xd6","\x9d")},
	{hx::fsInt,(void *) &FlxG_obj::drawFramerate,HX_HCSTRING("drawFramerate","\xe9","\xf8","\x72","\xad")},
	{hx::fsObject /*::flixel::FlxRenderMethod*/ ,(void *) &FlxG_obj::renderMethod,HX_HCSTRING("renderMethod","\xd7","\xfa","\xb0","\x78")},
	{hx::fsBool,(void *) &FlxG_obj::renderBlit,HX_HCSTRING("renderBlit","\xab","\x32","\x23","\xde")},
	{hx::fsBool,(void *) &FlxG_obj::renderTile,HX_HCSTRING("renderTile","\xa4","\xc5","\x06","\xea")},
	{hx::fsFloat,(void *) &FlxG_obj::elapsed,HX_HCSTRING("elapsed","\x3c","\x98","\xc0","\xba")},
	{hx::fsFloat,(void *) &FlxG_obj::maxElapsed,HX_HCSTRING("maxElapsed","\xf8","\x11","\xe5","\x24")},
	{hx::fsInt,(void *) &FlxG_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &FlxG_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::flixel::_hx_system::scaleModes::BaseScaleMode*/ ,(void *) &FlxG_obj::scaleMode,HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxG_obj::worldBounds,HX_HCSTRING("worldBounds","\x67","\x1a","\x8b","\x31")},
	{hx::fsObject /*::flixel::util::FlxSave*/ ,(void *) &FlxG_obj::save,HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c")},
	{hx::fsObject /*::flixel::math::FlxRandom*/ ,(void *) &FlxG_obj::random,HX_HCSTRING("random","\x03","\x22","\x8f","\xb7")},
	{hx::fsObject /*::flixel::input::mouse::FlxMouse*/ ,(void *) &FlxG_obj::mouse,HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxG_obj::swipes,HX_HCSTRING("swipes","\xb9","\x42","\x76","\xc5")},
	{hx::fsObject /*::flixel::input::keyboard::FlxKeyboard*/ ,(void *) &FlxG_obj::keys,HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadManager*/ ,(void *) &FlxG_obj::gamepads,HX_HCSTRING("gamepads","\xb2","\xac","\x9e","\xcb")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::InputFrontEnd*/ ,(void *) &FlxG_obj::inputs,HX_HCSTRING("inputs","\x29","\xc5","\xed","\x9b")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::ConsoleFrontEnd*/ ,(void *) &FlxG_obj::console,HX_HCSTRING("console","\x57","\xeb","\xd5","\x18")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::LogFrontEnd*/ ,(void *) &FlxG_obj::log,HX_HCSTRING("log","\x84","\x54","\x52","\x00")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::BitmapLogFrontEnd*/ ,(void *) &FlxG_obj::bitmapLog,HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::WatchFrontEnd*/ ,(void *) &FlxG_obj::watch,HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::DebuggerFrontEnd*/ ,(void *) &FlxG_obj::debugger,HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::VCRFrontEnd*/ ,(void *) &FlxG_obj::vcr,HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::BitmapFrontEnd*/ ,(void *) &FlxG_obj::bitmap,HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::CameraFrontEnd*/ ,(void *) &FlxG_obj::cameras,HX_HCSTRING("cameras","\x2e","\x8a","\x31","\xe3")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::PluginFrontEnd*/ ,(void *) &FlxG_obj::plugins,HX_HCSTRING("plugins","\x60","\xd2","\x35","\x02")},
	{hx::fsInt,(void *) &FlxG_obj::initialWidth,HX_HCSTRING("initialWidth","\xe2","\xb6","\x72","\x8e")},
	{hx::fsInt,(void *) &FlxG_obj::initialHeight,HX_HCSTRING("initialHeight","\x8b","\xc7","\x3c","\xcc")},
	{hx::fsFloat,(void *) &FlxG_obj::initialZoom,HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::SoundFrontEnd*/ ,(void *) &FlxG_obj::sound,HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::SignalFrontEnd*/ ,(void *) &FlxG_obj::signals,HX_HCSTRING("signals","\x0b","\x6d","\xe2","\x40")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FlxG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxG_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxG_obj::autoPause,"autoPause");
	HX_MARK_MEMBER_NAME(FlxG_obj::fixedTimestep,"fixedTimestep");
	HX_MARK_MEMBER_NAME(FlxG_obj::timeScale,"timeScale");
	HX_MARK_MEMBER_NAME(FlxG_obj::worldDivisions,"worldDivisions");
	HX_MARK_MEMBER_NAME(FlxG_obj::camera,"camera");
	HX_MARK_MEMBER_NAME(FlxG_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(FlxG_obj::game,"game");
	HX_MARK_MEMBER_NAME(FlxG_obj::updateFramerate,"updateFramerate");
	HX_MARK_MEMBER_NAME(FlxG_obj::drawFramerate,"drawFramerate");
	HX_MARK_MEMBER_NAME(FlxG_obj::renderMethod,"renderMethod");
	HX_MARK_MEMBER_NAME(FlxG_obj::renderBlit,"renderBlit");
	HX_MARK_MEMBER_NAME(FlxG_obj::renderTile,"renderTile");
	HX_MARK_MEMBER_NAME(FlxG_obj::elapsed,"elapsed");
	HX_MARK_MEMBER_NAME(FlxG_obj::maxElapsed,"maxElapsed");
	HX_MARK_MEMBER_NAME(FlxG_obj::width,"width");
	HX_MARK_MEMBER_NAME(FlxG_obj::height,"height");
	HX_MARK_MEMBER_NAME(FlxG_obj::scaleMode,"scaleMode");
	HX_MARK_MEMBER_NAME(FlxG_obj::worldBounds,"worldBounds");
	HX_MARK_MEMBER_NAME(FlxG_obj::save,"save");
	HX_MARK_MEMBER_NAME(FlxG_obj::random,"random");
	HX_MARK_MEMBER_NAME(FlxG_obj::mouse,"mouse");
	HX_MARK_MEMBER_NAME(FlxG_obj::swipes,"swipes");
	HX_MARK_MEMBER_NAME(FlxG_obj::keys,"keys");
	HX_MARK_MEMBER_NAME(FlxG_obj::gamepads,"gamepads");
	HX_MARK_MEMBER_NAME(FlxG_obj::inputs,"inputs");
	HX_MARK_MEMBER_NAME(FlxG_obj::console,"console");
	HX_MARK_MEMBER_NAME(FlxG_obj::log,"log");
	HX_MARK_MEMBER_NAME(FlxG_obj::bitmapLog,"bitmapLog");
	HX_MARK_MEMBER_NAME(FlxG_obj::watch,"watch");
	HX_MARK_MEMBER_NAME(FlxG_obj::debugger,"debugger");
	HX_MARK_MEMBER_NAME(FlxG_obj::vcr,"vcr");
	HX_MARK_MEMBER_NAME(FlxG_obj::bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(FlxG_obj::cameras,"cameras");
	HX_MARK_MEMBER_NAME(FlxG_obj::plugins,"plugins");
	HX_MARK_MEMBER_NAME(FlxG_obj::initialWidth,"initialWidth");
	HX_MARK_MEMBER_NAME(FlxG_obj::initialHeight,"initialHeight");
	HX_MARK_MEMBER_NAME(FlxG_obj::initialZoom,"initialZoom");
	HX_MARK_MEMBER_NAME(FlxG_obj::sound,"sound");
	HX_MARK_MEMBER_NAME(FlxG_obj::signals,"signals");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxG_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxG_obj::autoPause,"autoPause");
	HX_VISIT_MEMBER_NAME(FlxG_obj::fixedTimestep,"fixedTimestep");
	HX_VISIT_MEMBER_NAME(FlxG_obj::timeScale,"timeScale");
	HX_VISIT_MEMBER_NAME(FlxG_obj::worldDivisions,"worldDivisions");
	HX_VISIT_MEMBER_NAME(FlxG_obj::camera,"camera");
	HX_VISIT_MEMBER_NAME(FlxG_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(FlxG_obj::game,"game");
	HX_VISIT_MEMBER_NAME(FlxG_obj::updateFramerate,"updateFramerate");
	HX_VISIT_MEMBER_NAME(FlxG_obj::drawFramerate,"drawFramerate");
	HX_VISIT_MEMBER_NAME(FlxG_obj::renderMethod,"renderMethod");
	HX_VISIT_MEMBER_NAME(FlxG_obj::renderBlit,"renderBlit");
	HX_VISIT_MEMBER_NAME(FlxG_obj::renderTile,"renderTile");
	HX_VISIT_MEMBER_NAME(FlxG_obj::elapsed,"elapsed");
	HX_VISIT_MEMBER_NAME(FlxG_obj::maxElapsed,"maxElapsed");
	HX_VISIT_MEMBER_NAME(FlxG_obj::width,"width");
	HX_VISIT_MEMBER_NAME(FlxG_obj::height,"height");
	HX_VISIT_MEMBER_NAME(FlxG_obj::scaleMode,"scaleMode");
	HX_VISIT_MEMBER_NAME(FlxG_obj::worldBounds,"worldBounds");
	HX_VISIT_MEMBER_NAME(FlxG_obj::save,"save");
	HX_VISIT_MEMBER_NAME(FlxG_obj::random,"random");
	HX_VISIT_MEMBER_NAME(FlxG_obj::mouse,"mouse");
	HX_VISIT_MEMBER_NAME(FlxG_obj::swipes,"swipes");
	HX_VISIT_MEMBER_NAME(FlxG_obj::keys,"keys");
	HX_VISIT_MEMBER_NAME(FlxG_obj::gamepads,"gamepads");
	HX_VISIT_MEMBER_NAME(FlxG_obj::inputs,"inputs");
	HX_VISIT_MEMBER_NAME(FlxG_obj::console,"console");
	HX_VISIT_MEMBER_NAME(FlxG_obj::log,"log");
	HX_VISIT_MEMBER_NAME(FlxG_obj::bitmapLog,"bitmapLog");
	HX_VISIT_MEMBER_NAME(FlxG_obj::watch,"watch");
	HX_VISIT_MEMBER_NAME(FlxG_obj::debugger,"debugger");
	HX_VISIT_MEMBER_NAME(FlxG_obj::vcr,"vcr");
	HX_VISIT_MEMBER_NAME(FlxG_obj::bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(FlxG_obj::cameras,"cameras");
	HX_VISIT_MEMBER_NAME(FlxG_obj::plugins,"plugins");
	HX_VISIT_MEMBER_NAME(FlxG_obj::initialWidth,"initialWidth");
	HX_VISIT_MEMBER_NAME(FlxG_obj::initialHeight,"initialHeight");
	HX_VISIT_MEMBER_NAME(FlxG_obj::initialZoom,"initialZoom");
	HX_VISIT_MEMBER_NAME(FlxG_obj::sound,"sound");
	HX_VISIT_MEMBER_NAME(FlxG_obj::signals,"signals");
};

#endif

hx::Class FlxG_obj::__mClass;

static ::String FlxG_obj_sStaticFields[] = {
	HX_HCSTRING("autoPause","\x07","\x15","\x63","\x9b"),
	HX_HCSTRING("fixedTimestep","\x6d","\x87","\xbc","\x49"),
	HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d"),
	HX_HCSTRING("worldDivisions","\xf4","\x19","\x32","\xa0"),
	HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"),
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44"),
	HX_HCSTRING("updateFramerate","\x44","\xb6","\xd6","\x9d"),
	HX_HCSTRING("drawFramerate","\xe9","\xf8","\x72","\xad"),
	HX_HCSTRING("renderMethod","\xd7","\xfa","\xb0","\x78"),
	HX_HCSTRING("renderBlit","\xab","\x32","\x23","\xde"),
	HX_HCSTRING("renderTile","\xa4","\xc5","\x06","\xea"),
	HX_HCSTRING("elapsed","\x3c","\x98","\xc0","\xba"),
	HX_HCSTRING("maxElapsed","\xf8","\x11","\xe5","\x24"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"),
	HX_HCSTRING("worldBounds","\x67","\x1a","\x8b","\x31"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("swipes","\xb9","\x42","\x76","\xc5"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("gamepads","\xb2","\xac","\x9e","\xcb"),
	HX_HCSTRING("inputs","\x29","\xc5","\xed","\x9b"),
	HX_HCSTRING("console","\x57","\xeb","\xd5","\x18"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6"),
	HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5"),
	HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90"),
	HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("cameras","\x2e","\x8a","\x31","\xe3"),
	HX_HCSTRING("plugins","\x60","\xd2","\x35","\x02"),
	HX_HCSTRING("initialWidth","\xe2","\xb6","\x72","\x8e"),
	HX_HCSTRING("initialHeight","\x8b","\xc7","\x3c","\xcc"),
	HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("signals","\x0b","\x6d","\xe2","\x40"),
	HX_HCSTRING("resizeGame","\x06","\x84","\x99","\xb8"),
	HX_HCSTRING("resizeWindow","\x04","\x51","\x9a","\x36"),
	HX_HCSTRING("resetGame","\x61","\xfd","\x4a","\x8a"),
	HX_HCSTRING("switchState","\x7d","\x07","\x8b","\x77"),
	HX_HCSTRING("resetState","\xc2","\xad","\xa7","\x6c"),
	HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9"),
	HX_HCSTRING("pixelPerfectOverlap","\x20","\x0b","\x1b","\x60"),
	HX_HCSTRING("collide","\x7e","\xaf","\x63","\xed"),
	HX_HCSTRING("addPostProcess","\x4e","\x99","\x59","\xc3"),
	HX_HCSTRING("removePostProcess","\x0b","\x2c","\xd3","\xe7"),
	HX_HCSTRING("openURL","\xc5","\xbd","\x35","\x40"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initRenderMethod","\x07","\xda","\xf2","\x6b"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("set_scaleMode","\xf0","\x90","\x3d","\x32"),
	HX_HCSTRING("set_mouse","\x88","\x5e","\x5f","\x33"),
	HX_HCSTRING("set_updateFramerate","\x67","\x78","\x7e","\x65"),
	HX_HCSTRING("set_drawFramerate","\x4c","\xdc","\x50","\xd7"),
	HX_HCSTRING("get_fullscreen","\x84","\xc2","\xa9","\x6f"),
	HX_HCSTRING("set_fullscreen","\xf8","\xaa","\xc9","\x8f"),
	HX_HCSTRING("get_stage","\x15","\xc7","\xb4","\xc7"),
	HX_HCSTRING("get_state","\x68","\xd2","\xb4","\xc7"),
	HX_HCSTRING("get_onMobile","\xea","\x56","\x3e","\x54"),
	::String(null())
};

void FlxG_obj::__register()
{
	hx::Object *dummy = new FlxG_obj;
	FlxG_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxG","\x07","\xab","\x3b","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxG_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxG_obj::__SetStatic;
	__mClass->mMarkFunc = FlxG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxG_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_71_boot)
HXDLIN(  71)		autoPause = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_76_boot)
HXDLIN(  76)		fixedTimestep = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_80_boot)
HXDLIN(  80)		timeScale = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_86_boot)
HXDLIN(  86)		worldDivisions = (int)6;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_97_boot)
HXDLIN(  97)		VERSION =  ::flixel::_hx_system::FlxVersion_obj::__alloc( HX_CTX ,(int)4,(int)5,(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_143_boot)
HXDLIN( 143)		elapsed = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_150_boot)
HXDLIN( 150)		maxElapsed = ((Float)0.1);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_165_boot)
HXDLIN( 165)		scaleMode = ( ( ::flixel::_hx_system::scaleModes::BaseScaleMode)( ::flixel::_hx_system::scaleModes::RatioScaleMode_obj::__alloc( HX_CTX ,null())) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_175_boot)
HXDLIN( 175)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 175)			_this->x = (int)0;
HXDLIN( 175)			_this->y = (int)0;
HXDLIN( 175)			_this->width = (int)0;
HXDLIN( 175)			_this->height = (int)0;
HXDLIN( 175)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 175)			rect->_inPool = false;
HXDLIN( 175)			return rect;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_175_boot)
HXDLIN( 175)		worldBounds =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_181_boot)
HXDLIN( 181)		save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_187_boot)
HXDLIN( 187)		random =  ::flixel::math::FlxRandom_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_208_boot)
HXDLIN( 208)		swipes = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_250_boot)
HXDLIN( 250)		inputs =  ::flixel::_hx_system::frontEnds::InputFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_254_boot)
HXDLIN( 254)		console =  ::flixel::_hx_system::frontEnds::ConsoleFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_258_boot)
HXDLIN( 258)		log =  ::flixel::_hx_system::frontEnds::LogFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_262_boot)
HXDLIN( 262)		bitmapLog =  ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_266_boot)
HXDLIN( 266)		watch =  ::flixel::_hx_system::frontEnds::WatchFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_271_boot)
HXDLIN( 271)		debugger =  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_281_boot)
HXDLIN( 281)		bitmap =  ::flixel::_hx_system::frontEnds::BitmapFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_285_boot)
HXDLIN( 285)		cameras =  ::flixel::_hx_system::frontEnds::CameraFrontEnd_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_291_boot)
HXDLIN( 291)		initialWidth = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_292_boot)
HXDLIN( 292)		initialHeight = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_293_boot)
HXDLIN( 293)		initialZoom = ((Float)0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_305_boot)
HXDLIN( 305)		signals =  ::flixel::_hx_system::frontEnds::SignalFrontEnd_obj::__alloc( HX_CTX );
            	}
}

} // end namespace flixel
