// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_37_linear,"flixel.tweens.FlxEase","linear",0xeb7e31a7,"flixel.tweens.FlxEase.linear","flixel/tweens/FlxEase.hx",37,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_42_quadIn,"flixel.tweens.FlxEase","quadIn",0xcb7d584e,"flixel.tweens.FlxEase.quadIn","flixel/tweens/FlxEase.hx",42,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_47_quadOut,"flixel.tweens.FlxEase","quadOut",0x42348005,"flixel.tweens.FlxEase.quadOut","flixel/tweens/FlxEase.hx",47,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_52_quadInOut,"flixel.tweens.FlxEase","quadInOut",0x1f34a4e0,"flixel.tweens.FlxEase.quadInOut","flixel/tweens/FlxEase.hx",52,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_57_cubeIn,"flixel.tweens.FlxEase","cubeIn",0x332843fc,"flixel.tweens.FlxEase.cubeIn","flixel/tweens/FlxEase.hx",57,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_62_cubeOut,"flixel.tweens.FlxEase","cubeOut",0x9017cc97,"flixel.tweens.FlxEase.cubeOut","flixel/tweens/FlxEase.hx",62,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_67_cubeInOut,"flixel.tweens.FlxEase","cubeInOut",0x25f1b9f2,"flixel.tweens.FlxEase.cubeInOut","flixel/tweens/FlxEase.hx",67,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_72_quartIn,"flixel.tweens.FlxEase","quartIn",0x4b9169c2,"flixel.tweens.FlxEase.quartIn","flixel/tweens/FlxEase.hx",72,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_77_quartOut,"flixel.tweens.FlxEase","quartOut",0xd3afb411,"flixel.tweens.FlxEase.quartOut","flixel/tweens/FlxEase.hx",77,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_82_quartInOut,"flixel.tweens.FlxEase","quartInOut",0x6cedf3ec,"flixel.tweens.FlxEase.quartInOut","flixel/tweens/FlxEase.hx",82,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_87_quintIn,"flixel.tweens.FlxEase","quintIn",0xe421334e,"flixel.tweens.FlxEase.quintIn","flixel/tweens/FlxEase.hx",87,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_92_quintOut,"flixel.tweens.FlxEase","quintOut",0xb8f04505,"flixel.tweens.FlxEase.quintOut","flixel/tweens/FlxEase.hx",92,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_97_quintInOut,"flixel.tweens.FlxEase","quintInOut",0x902ba9e0,"flixel.tweens.FlxEase.quintInOut","flixel/tweens/FlxEase.hx",97,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_103_smoothStepIn,"flixel.tweens.FlxEase","smoothStepIn",0x03c18261,"flixel.tweens.FlxEase.smoothStepIn","flixel/tweens/FlxEase.hx",103,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_109_smoothStepOut,"flixel.tweens.FlxEase","smoothStepOut",0x45952692,"flixel.tweens.FlxEase.smoothStepOut","flixel/tweens/FlxEase.hx",109,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_115_smoothStepInOut,"flixel.tweens.FlxEase","smoothStepInOut",0x38f5c8ad,"flixel.tweens.FlxEase.smoothStepInOut","flixel/tweens/FlxEase.hx",115,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_121_smootherStepIn,"flixel.tweens.FlxEase","smootherStepIn",0x7902468e,"flixel.tweens.FlxEase.smootherStepIn","flixel/tweens/FlxEase.hx",121,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_127_smootherStepOut,"flixel.tweens.FlxEase","smootherStepOut",0x690009c5,"flixel.tweens.FlxEase.smootherStepOut","flixel/tweens/FlxEase.hx",127,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_133_smootherStepInOut,"flixel.tweens.FlxEase","smootherStepInOut",0x37461ea0,"flixel.tweens.FlxEase.smootherStepInOut","flixel/tweens/FlxEase.hx",133,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_138_sineIn,"flixel.tweens.FlxEase","sineIn",0xb7fda354,"flixel.tweens.FlxEase.sineIn","flixel/tweens/FlxEase.hx",138,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_143_sineOut,"flixel.tweens.FlxEase","sineOut",0x45f5da3f,"flixel.tweens.FlxEase.sineOut","flixel/tweens/FlxEase.hx",143,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_148_sineInOut,"flixel.tweens.FlxEase","sineInOut",0x99ac819a,"flixel.tweens.FlxEase.sineInOut","flixel/tweens/FlxEase.hx",148,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_152_bounceIn,"flixel.tweens.FlxEase","bounceIn",0x26970bcf,"flixel.tweens.FlxEase.bounceIn","flixel/tweens/FlxEase.hx",152,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_161_bounceOut,"flixel.tweens.FlxEase","bounceOut",0x9d97dd64,"flixel.tweens.FlxEase.bounceOut","flixel/tweens/FlxEase.hx",161,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_169_bounceInOut,"flixel.tweens.FlxEase","bounceInOut",0xa03157ff,"flixel.tweens.FlxEase.bounceInOut","flixel/tweens/FlxEase.hx",169,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_187_circIn,"flixel.tweens.FlxEase","circIn",0x54eb335e,"flixel.tweens.FlxEase.circIn","flixel/tweens/FlxEase.hx",187,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_192_circOut,"flixel.tweens.FlxEase","circOut",0xf8e652f5,"flixel.tweens.FlxEase.circOut","flixel/tweens/FlxEase.hx",192,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_197_circInOut,"flixel.tweens.FlxEase","circInOut",0x443513d0,"flixel.tweens.FlxEase.circInOut","flixel/tweens/FlxEase.hx",197,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_202_expoIn,"flixel.tweens.FlxEase","expoIn",0xc35b4d79,"flixel.tweens.FlxEase.expoIn","flixel/tweens/FlxEase.hx",202,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_207_expoOut,"flixel.tweens.FlxEase","expoOut",0x2c8d107a,"flixel.tweens.FlxEase.expoOut","flixel/tweens/FlxEase.hx",207,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_212_expoInOut,"flixel.tweens.FlxEase","expoInOut",0xbd29fc95,"flixel.tweens.FlxEase.expoInOut","flixel/tweens/FlxEase.hx",212,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_217_backIn,"flixel.tweens.FlxEase","backIn",0x497711ae,"flixel.tweens.FlxEase.backIn","flixel/tweens/FlxEase.hx",217,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_222_backOut,"flixel.tweens.FlxEase","backOut",0xfebcfaa5,"flixel.tweens.FlxEase.backOut","flixel/tweens/FlxEase.hx",222,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_226_backInOut,"flixel.tweens.FlxEase","backInOut",0x6ac90780,"flixel.tweens.FlxEase.backInOut","flixel/tweens/FlxEase.hx",226,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_235_elasticIn,"flixel.tweens.FlxEase","elasticIn",0xf7740698,"flixel.tweens.FlxEase.elasticIn","flixel/tweens/FlxEase.hx",235,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_240_elasticOut,"flixel.tweens.FlxEase","elasticOut",0x8e16527b,"flixel.tweens.FlxEase.elasticOut","flixel/tweens/FlxEase.hx",240,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_244_elasticInOut,"flixel.tweens.FlxEase","elasticInOut",0x850880d6,"flixel.tweens.FlxEase.elasticInOut","flixel/tweens/FlxEase.hx",244,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_23_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",23,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_24_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",24,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_25_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",25,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_26_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",26,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_27_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",27,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_28_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",28,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_29_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",29,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_30_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",30,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_31_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",31,0x71810bf2)
HX_LOCAL_STACK_FRAME(_hx_pos_a9a0b53a43037f15_32_boot,"flixel.tweens.FlxEase","boot",0xecae8f74,"flixel.tweens.FlxEase.boot","flixel/tweens/FlxEase.hx",32,0x71810bf2)
namespace flixel{
namespace tweens{

void FlxEase_obj::__construct() { }

Dynamic FlxEase_obj::__CreateEmpty() { return new FlxEase_obj; }

void *FlxEase_obj::_hx_vtable = 0;

Dynamic FlxEase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxEase_obj > _hx_result = new FlxEase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxEase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a5d9594;
}

Float FlxEase_obj::PI2;

Float FlxEase_obj::EL;

Float FlxEase_obj::B1;

Float FlxEase_obj::B2;

Float FlxEase_obj::B3;

Float FlxEase_obj::B4;

Float FlxEase_obj::B5;

Float FlxEase_obj::B6;

Float FlxEase_obj::ELASTIC_AMPLITUDE;

Float FlxEase_obj::ELASTIC_PERIOD;

Float FlxEase_obj::linear(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_37_linear)
HXDLIN(  37)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,linear,return )

Float FlxEase_obj::quadIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_42_quadIn)
HXDLIN(  42)		return (t * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quadIn,return )

Float FlxEase_obj::quadOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_47_quadOut)
HXDLIN(  47)		return (-(t) * (t - (int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quadOut,return )

Float FlxEase_obj::quadInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_52_quadInOut)
HXDLIN(  52)		if ((t <= ((Float).5))) {
HXDLIN(  52)			return ((t * t) * (int)2);
            		}
            		else {
HXDLIN(  52)			t = (t - (int)1);
HXDLIN(  52)			return ((int)1 - ((t * t) * (int)2));
            		}
HXDLIN(  52)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quadInOut,return )

Float FlxEase_obj::cubeIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_57_cubeIn)
HXDLIN(  57)		return ((t * t) * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,cubeIn,return )

Float FlxEase_obj::cubeOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_62_cubeOut)
HXDLIN(  62)		t = (t - (int)1);
HXDLIN(  62)		return ((int)1 + ((t * t) * t));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,cubeOut,return )

Float FlxEase_obj::cubeInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_67_cubeInOut)
HXDLIN(  67)		if ((t <= ((Float).5))) {
HXDLIN(  67)			return (((t * t) * t) * (int)4);
            		}
            		else {
HXDLIN(  67)			t = (t - (int)1);
HXDLIN(  67)			return ((int)1 + (((t * t) * t) * (int)4));
            		}
HXDLIN(  67)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,cubeInOut,return )

Float FlxEase_obj::quartIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_72_quartIn)
HXDLIN(  72)		return (((t * t) * t) * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quartIn,return )

Float FlxEase_obj::quartOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_77_quartOut)
HXDLIN(  77)		t = (t - (int)1);
HXDLIN(  77)		return ((int)1 - (((t * t) * t) * t));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quartOut,return )

Float FlxEase_obj::quartInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_82_quartInOut)
HXDLIN(  82)		if ((t <= ((Float).5))) {
HXDLIN(  82)			return ((((t * t) * t) * t) * (int)8);
            		}
            		else {
HXDLIN(  82)			t = ((t * (int)2) - (int)2);
HXDLIN(  82)			return (((Float)((int)1 - (((t * t) * t) * t)) / (Float)(int)2) + ((Float).5));
            		}
HXDLIN(  82)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quartInOut,return )

Float FlxEase_obj::quintIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_87_quintIn)
HXDLIN(  87)		return ((((t * t) * t) * t) * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quintIn,return )

Float FlxEase_obj::quintOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_92_quintOut)
HXDLIN(  92)		t = (t - (int)1);
HXDLIN(  92)		return (((((t * t) * t) * t) * t) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quintOut,return )

Float FlxEase_obj::quintInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_97_quintInOut)
HXDLIN(  97)		t = (t * (int)2);
HXDLIN(  97)		if ((t < (int)1)) {
HXDLIN(  97)			return ((Float)((((t * t) * t) * t) * t) / (Float)(int)2);
            		}
            		else {
HXDLIN(  97)			t = (t - (int)2);
HXDLIN(  97)			return ((Float)(((((t * t) * t) * t) * t) + (int)2) / (Float)(int)2);
            		}
HXDLIN(  97)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,quintInOut,return )

Float FlxEase_obj::smoothStepIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_103_smoothStepIn)
HXDLIN( 103)		Float t1 = ((Float)t / (Float)(int)2);
HXDLIN( 103)		return ((int)2 * ((t1 * t1) * ((t1 * (int)-2) + (int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,smoothStepIn,return )

Float FlxEase_obj::smoothStepOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_109_smoothStepOut)
HXDLIN( 109)		Float t1 = (((Float)t / (Float)(int)2) + ((Float)0.5));
HXDLIN( 109)		return (((int)2 * ((t1 * t1) * ((t1 * (int)-2) + (int)3))) - (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,smoothStepOut,return )

Float FlxEase_obj::smoothStepInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_115_smoothStepInOut)
HXDLIN( 115)		return ((t * t) * ((t * (int)-2) + (int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,smoothStepInOut,return )

Float FlxEase_obj::smootherStepIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_121_smootherStepIn)
HXDLIN( 121)		Float t1 = ((Float)t / (Float)(int)2);
HXDLIN( 121)		return ((int)2 * (((t1 * t1) * t1) * ((t1 * ((t1 * (int)6) - (int)15)) + (int)10)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,smootherStepIn,return )

Float FlxEase_obj::smootherStepOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_127_smootherStepOut)
HXDLIN( 127)		Float t1 = (((Float)t / (Float)(int)2) + ((Float)0.5));
HXDLIN( 127)		return (((int)2 * (((t1 * t1) * t1) * ((t1 * ((t1 * (int)6) - (int)15)) + (int)10))) - (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,smootherStepOut,return )

Float FlxEase_obj::smootherStepInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_133_smootherStepInOut)
HXDLIN( 133)		return (((t * t) * t) * ((t * ((t * (int)6) - (int)15)) + (int)10));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,smootherStepInOut,return )

Float FlxEase_obj::sineIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_138_sineIn)
HXDLIN( 138)		return (-(::Math_obj::cos((::flixel::tweens::FlxEase_obj::PI2 * t))) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,sineIn,return )

Float FlxEase_obj::sineOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_143_sineOut)
HXDLIN( 143)		return ::Math_obj::sin((::flixel::tweens::FlxEase_obj::PI2 * t));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,sineOut,return )

Float FlxEase_obj::sineInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_148_sineInOut)
HXDLIN( 148)		return (((Float)-(::Math_obj::cos((::Math_obj::PI * t))) / (Float)(int)2) + ((Float).5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,sineInOut,return )

Float FlxEase_obj::bounceIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_152_bounceIn)
HXLINE( 153)		t = ((int)1 - t);
HXLINE( 154)		if ((t < ::flixel::tweens::FlxEase_obj::B1)) {
HXLINE( 154)			return ((int)1 - ((((Float)7.5625) * t) * t));
            		}
HXLINE( 155)		if ((t < ::flixel::tweens::FlxEase_obj::B2)) {
HXLINE( 155)			Float _hx_tmp = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B3));
HXDLIN( 155)			return ((int)1 - ((_hx_tmp * (t - ::flixel::tweens::FlxEase_obj::B3)) + ((Float).75)));
            		}
HXLINE( 156)		if ((t < ::flixel::tweens::FlxEase_obj::B4)) {
HXLINE( 156)			Float _hx_tmp1 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B5));
HXDLIN( 156)			return ((int)1 - ((_hx_tmp1 * (t - ::flixel::tweens::FlxEase_obj::B5)) + ((Float).9375)));
            		}
HXLINE( 157)		Float _hx_tmp2 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B6));
HXDLIN( 157)		return ((int)1 - ((_hx_tmp2 * (t - ::flixel::tweens::FlxEase_obj::B6)) + ((Float).984375)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,bounceIn,return )

Float FlxEase_obj::bounceOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_161_bounceOut)
HXLINE( 162)		if ((t < ::flixel::tweens::FlxEase_obj::B1)) {
HXLINE( 162)			return ((((Float)7.5625) * t) * t);
            		}
HXLINE( 163)		if ((t < ::flixel::tweens::FlxEase_obj::B2)) {
HXLINE( 163)			Float _hx_tmp = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B3));
HXDLIN( 163)			return ((_hx_tmp * (t - ::flixel::tweens::FlxEase_obj::B3)) + ((Float).75));
            		}
HXLINE( 164)		if ((t < ::flixel::tweens::FlxEase_obj::B4)) {
HXLINE( 164)			Float _hx_tmp1 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B5));
HXDLIN( 164)			return ((_hx_tmp1 * (t - ::flixel::tweens::FlxEase_obj::B5)) + ((Float).9375));
            		}
HXLINE( 165)		Float _hx_tmp2 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B6));
HXDLIN( 165)		return ((_hx_tmp2 * (t - ::flixel::tweens::FlxEase_obj::B6)) + ((Float).984375));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,bounceOut,return )

Float FlxEase_obj::bounceInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_169_bounceInOut)
HXLINE( 170)		if ((t < ((Float).5))) {
HXLINE( 172)			t = ((int)1 - (t * (int)2));
HXLINE( 173)			if ((t < ::flixel::tweens::FlxEase_obj::B1)) {
HXLINE( 173)				return ((Float)((int)1 - ((((Float)7.5625) * t) * t)) / (Float)(int)2);
            			}
HXLINE( 174)			if ((t < ::flixel::tweens::FlxEase_obj::B2)) {
HXLINE( 174)				Float _hx_tmp = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B3));
HXDLIN( 174)				return ((Float)((int)1 - ((_hx_tmp * (t - ::flixel::tweens::FlxEase_obj::B3)) + ((Float).75))) / (Float)(int)2);
            			}
HXLINE( 175)			if ((t < ::flixel::tweens::FlxEase_obj::B4)) {
HXLINE( 175)				Float _hx_tmp1 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B5));
HXDLIN( 175)				return ((Float)((int)1 - ((_hx_tmp1 * (t - ::flixel::tweens::FlxEase_obj::B5)) + ((Float).9375))) / (Float)(int)2);
            			}
HXLINE( 176)			Float _hx_tmp2 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B6));
HXDLIN( 176)			return ((Float)((int)1 - ((_hx_tmp2 * (t - ::flixel::tweens::FlxEase_obj::B6)) + ((Float).984375))) / (Float)(int)2);
            		}
HXLINE( 178)		t = ((t * (int)2) - (int)1);
HXLINE( 179)		if ((t < ::flixel::tweens::FlxEase_obj::B1)) {
HXLINE( 179)			return (((Float)((((Float)7.5625) * t) * t) / (Float)(int)2) + ((Float).5));
            		}
HXLINE( 180)		if ((t < ::flixel::tweens::FlxEase_obj::B2)) {
HXLINE( 180)			Float _hx_tmp3 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B3));
HXDLIN( 180)			return (((Float)((_hx_tmp3 * (t - ::flixel::tweens::FlxEase_obj::B3)) + ((Float).75)) / (Float)(int)2) + ((Float).5));
            		}
HXLINE( 181)		if ((t < ::flixel::tweens::FlxEase_obj::B4)) {
HXLINE( 181)			Float _hx_tmp4 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B5));
HXDLIN( 181)			return (((Float)((_hx_tmp4 * (t - ::flixel::tweens::FlxEase_obj::B5)) + ((Float).9375)) / (Float)(int)2) + ((Float).5));
            		}
HXLINE( 182)		Float _hx_tmp5 = (((Float)7.5625) * (t - ::flixel::tweens::FlxEase_obj::B6));
HXDLIN( 182)		return (((Float)((_hx_tmp5 * (t - ::flixel::tweens::FlxEase_obj::B6)) + ((Float).984375)) / (Float)(int)2) + ((Float).5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,bounceInOut,return )

Float FlxEase_obj::circIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_187_circIn)
HXDLIN( 187)		return -((::Math_obj::sqrt(((int)1 - (t * t))) - (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,circIn,return )

Float FlxEase_obj::circOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_192_circOut)
HXDLIN( 192)		return ::Math_obj::sqrt(((int)1 - ((t - (int)1) * (t - (int)1))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,circOut,return )

Float FlxEase_obj::circInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_197_circInOut)
HXDLIN( 197)		if ((t <= ((Float).5))) {
HXDLIN( 197)			return ((Float)(::Math_obj::sqrt(((int)1 - ((t * t) * (int)4))) - (int)1) / (Float)(int)-2);
            		}
            		else {
HXDLIN( 197)			return ((Float)(::Math_obj::sqrt(((int)1 - (((t * (int)2) - (int)2) * ((t * (int)2) - (int)2)))) + (int)1) / (Float)(int)2);
            		}
HXDLIN( 197)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,circInOut,return )

Float FlxEase_obj::expoIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_202_expoIn)
HXDLIN( 202)		return ::Math_obj::pow((int)2,((int)10 * (t - (int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,expoIn,return )

Float FlxEase_obj::expoOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_207_expoOut)
HXDLIN( 207)		return (-(::Math_obj::pow((int)2,((int)-10 * t))) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,expoOut,return )

Float FlxEase_obj::expoInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_212_expoInOut)
HXDLIN( 212)		if ((t < ((Float).5))) {
HXDLIN( 212)			return ((Float)::Math_obj::pow((int)2,((int)10 * ((t * (int)2) - (int)1))) / (Float)(int)2);
            		}
            		else {
HXDLIN( 212)			return ((Float)(-(::Math_obj::pow((int)2,((int)-10 * ((t * (int)2) - (int)1)))) + (int)2) / (Float)(int)2);
            		}
HXDLIN( 212)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,expoInOut,return )

Float FlxEase_obj::backIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_217_backIn)
HXDLIN( 217)		return ((t * t) * ((((Float)2.70158) * t) - ((Float)1.70158)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,backIn,return )

Float FlxEase_obj::backOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_222_backOut)
HXDLIN( 222)		t = (t - (int)1);
HXDLIN( 222)		Float _hx_tmp = (t * t);
HXDLIN( 222)		return ((int)1 - (_hx_tmp * ((((Float)-2.70158) * t) - ((Float)1.70158))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,backOut,return )

Float FlxEase_obj::backInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_226_backInOut)
HXLINE( 227)		t = (t * (int)2);
HXLINE( 228)		if ((t < (int)1)) {
HXLINE( 228)			return ((Float)((t * t) * ((((Float)2.70158) * t) - ((Float)1.70158))) / (Float)(int)2);
            		}
HXLINE( 229)		t = (t - (int)1);
HXLINE( 230)		t = (t - (int)1);
HXDLIN( 230)		Float _hx_tmp = (t * t);
HXDLIN( 230)		return (((Float)((int)1 - (_hx_tmp * ((((Float)-2.70158) * t) - ((Float)1.70158)))) / (Float)(int)2) + ((Float).5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,backInOut,return )

Float FlxEase_obj::elasticIn(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_235_elasticIn)
HXDLIN( 235)		Float _hx_tmp = ::flixel::tweens::FlxEase_obj::ELASTIC_AMPLITUDE;
HXDLIN( 235)		t = (t - (int)1);
HXDLIN( 235)		Float _hx_tmp1 = (_hx_tmp * ::Math_obj::pow((int)2,((int)10 * t)));
HXDLIN( 235)		Float _hx_tmp2 = ::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD;
HXDLIN( 235)		Float _hx_tmp3 = ((Float)_hx_tmp2 / (Float)((int)2 * ::Math_obj::PI));
HXDLIN( 235)		Float _hx_tmp4 = (t - (_hx_tmp3 * ::Math_obj::asin(((Float)(int)1 / (Float)::flixel::tweens::FlxEase_obj::ELASTIC_AMPLITUDE))));
HXDLIN( 235)		return -((_hx_tmp1 * ::Math_obj::sin(((Float)(_hx_tmp4 * ((int)2 * ::Math_obj::PI)) / (Float)::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,elasticIn,return )

Float FlxEase_obj::elasticOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_240_elasticOut)
HXDLIN( 240)		Float _hx_tmp = ::flixel::tweens::FlxEase_obj::ELASTIC_AMPLITUDE;
HXDLIN( 240)		Float _hx_tmp1 = (_hx_tmp * ::Math_obj::pow((int)2,((int)-10 * t)));
HXDLIN( 240)		Float _hx_tmp2 = ::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD;
HXDLIN( 240)		Float _hx_tmp3 = ((Float)_hx_tmp2 / (Float)((int)2 * ::Math_obj::PI));
HXDLIN( 240)		Float _hx_tmp4 = (t - (_hx_tmp3 * ::Math_obj::asin(((Float)(int)1 / (Float)::flixel::tweens::FlxEase_obj::ELASTIC_AMPLITUDE))));
HXDLIN( 240)		return ((_hx_tmp1 * ::Math_obj::sin(((Float)(_hx_tmp4 * ((int)2 * ::Math_obj::PI)) / (Float)::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD))) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,elasticOut,return )

Float FlxEase_obj::elasticInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_244_elasticInOut)
HXLINE( 245)		if ((t < ((Float)0.5))) {
HXLINE( 247)			t = (t - ((Float)0.5));
HXDLIN( 247)			Float _hx_tmp = ::Math_obj::pow((int)2,((int)10 * t));
HXDLIN( 247)			Float _hx_tmp1 = (t - ((Float)::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD / (Float)(int)4));
HXDLIN( 247)			return (((Float)-0.5) * (_hx_tmp * ::Math_obj::sin(((Float)(_hx_tmp1 * ((int)2 * ::Math_obj::PI)) / (Float)::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD))));
            		}
HXLINE( 249)		t = (t - ((Float)0.5));
HXDLIN( 249)		Float _hx_tmp2 = ::Math_obj::pow((int)2,((int)-10 * t));
HXDLIN( 249)		Float _hx_tmp3 = (t - ((Float)::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD / (Float)(int)4));
HXDLIN( 249)		return (((_hx_tmp2 * ::Math_obj::sin(((Float)(_hx_tmp3 * ((int)2 * ::Math_obj::PI)) / (Float)::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD))) * ((Float)0.5)) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxEase_obj,elasticInOut,return )


FlxEase_obj::FlxEase_obj()
{
}

bool FlxEase_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"EL") ) { outValue = ( EL ); return true; }
		if (HX_FIELD_EQ(inName,"B1") ) { outValue = ( B1 ); return true; }
		if (HX_FIELD_EQ(inName,"B2") ) { outValue = ( B2 ); return true; }
		if (HX_FIELD_EQ(inName,"B3") ) { outValue = ( B3 ); return true; }
		if (HX_FIELD_EQ(inName,"B4") ) { outValue = ( B4 ); return true; }
		if (HX_FIELD_EQ(inName,"B5") ) { outValue = ( B5 ); return true; }
		if (HX_FIELD_EQ(inName,"B6") ) { outValue = ( B6 ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"PI2") ) { outValue = ( PI2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"linear") ) { outValue = linear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadIn") ) { outValue = quadIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cubeIn") ) { outValue = cubeIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sineIn") ) { outValue = sineIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circIn") ) { outValue = circIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoIn") ) { outValue = expoIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backIn") ) { outValue = backIn_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quadOut") ) { outValue = quadOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cubeOut") ) { outValue = cubeOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quartIn") ) { outValue = quartIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintIn") ) { outValue = quintIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sineOut") ) { outValue = sineOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circOut") ) { outValue = circOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoOut") ) { outValue = expoOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backOut") ) { outValue = backOut_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"quartOut") ) { outValue = quartOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintOut") ) { outValue = quintOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceIn") ) { outValue = bounceIn_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"quadInOut") ) { outValue = quadInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cubeInOut") ) { outValue = cubeInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sineInOut") ) { outValue = sineInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceOut") ) { outValue = bounceOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circInOut") ) { outValue = circInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoInOut") ) { outValue = expoInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backInOut") ) { outValue = backInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"elasticIn") ) { outValue = elasticIn_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quartInOut") ) { outValue = quartInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintInOut") ) { outValue = quintInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"elasticOut") ) { outValue = elasticOut_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bounceInOut") ) { outValue = bounceInOut_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"smoothStepIn") ) { outValue = smoothStepIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"elasticInOut") ) { outValue = elasticInOut_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"smoothStepOut") ) { outValue = smoothStepOut_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ELASTIC_PERIOD") ) { outValue = ( ELASTIC_PERIOD ); return true; }
		if (HX_FIELD_EQ(inName,"smootherStepIn") ) { outValue = smootherStepIn_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"smoothStepInOut") ) { outValue = smoothStepInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"smootherStepOut") ) { outValue = smootherStepOut_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"ELASTIC_AMPLITUDE") ) { outValue = ( ELASTIC_AMPLITUDE ); return true; }
		if (HX_FIELD_EQ(inName,"smootherStepInOut") ) { outValue = smootherStepInOut_dyn(); return true; }
	}
	return false;
}

bool FlxEase_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"EL") ) { EL=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"B1") ) { B1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"B2") ) { B2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"B3") ) { B3=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"B4") ) { B4=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"B5") ) { B5=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"B6") ) { B6=ioValue.Cast< Float >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"PI2") ) { PI2=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ELASTIC_PERIOD") ) { ELASTIC_PERIOD=ioValue.Cast< Float >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"ELASTIC_AMPLITUDE") ) { ELASTIC_AMPLITUDE=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxEase_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxEase_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &FlxEase_obj::PI2,HX_HCSTRING("PI2","\x19","\xf4","\x3c","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::EL,HX_HCSTRING("EL","\x67","\x3c","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::B1,HX_HCSTRING("B1","\xaf","\x39","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::B2,HX_HCSTRING("B2","\xb0","\x39","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::B3,HX_HCSTRING("B3","\xb1","\x39","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::B4,HX_HCSTRING("B4","\xb2","\x39","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::B5,HX_HCSTRING("B5","\xb3","\x39","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::B6,HX_HCSTRING("B6","\xb4","\x39","\x00","\x00")},
	{hx::fsFloat,(void *) &FlxEase_obj::ELASTIC_AMPLITUDE,HX_HCSTRING("ELASTIC_AMPLITUDE","\xd9","\xea","\x04","\x7e")},
	{hx::fsFloat,(void *) &FlxEase_obj::ELASTIC_PERIOD,HX_HCSTRING("ELASTIC_PERIOD","\x8b","\x99","\x23","\x3b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FlxEase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxEase_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxEase_obj::PI2,"PI2");
	HX_MARK_MEMBER_NAME(FlxEase_obj::EL,"EL");
	HX_MARK_MEMBER_NAME(FlxEase_obj::B1,"B1");
	HX_MARK_MEMBER_NAME(FlxEase_obj::B2,"B2");
	HX_MARK_MEMBER_NAME(FlxEase_obj::B3,"B3");
	HX_MARK_MEMBER_NAME(FlxEase_obj::B4,"B4");
	HX_MARK_MEMBER_NAME(FlxEase_obj::B5,"B5");
	HX_MARK_MEMBER_NAME(FlxEase_obj::B6,"B6");
	HX_MARK_MEMBER_NAME(FlxEase_obj::ELASTIC_AMPLITUDE,"ELASTIC_AMPLITUDE");
	HX_MARK_MEMBER_NAME(FlxEase_obj::ELASTIC_PERIOD,"ELASTIC_PERIOD");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxEase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxEase_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::PI2,"PI2");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::EL,"EL");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::B1,"B1");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::B2,"B2");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::B3,"B3");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::B4,"B4");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::B5,"B5");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::B6,"B6");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::ELASTIC_AMPLITUDE,"ELASTIC_AMPLITUDE");
	HX_VISIT_MEMBER_NAME(FlxEase_obj::ELASTIC_PERIOD,"ELASTIC_PERIOD");
};

#endif

hx::Class FlxEase_obj::__mClass;

static ::String FlxEase_obj_sStaticFields[] = {
	HX_HCSTRING("PI2","\x19","\xf4","\x3c","\x00"),
	HX_HCSTRING("EL","\x67","\x3c","\x00","\x00"),
	HX_HCSTRING("B1","\xaf","\x39","\x00","\x00"),
	HX_HCSTRING("B2","\xb0","\x39","\x00","\x00"),
	HX_HCSTRING("B3","\xb1","\x39","\x00","\x00"),
	HX_HCSTRING("B4","\xb2","\x39","\x00","\x00"),
	HX_HCSTRING("B5","\xb3","\x39","\x00","\x00"),
	HX_HCSTRING("B6","\xb4","\x39","\x00","\x00"),
	HX_HCSTRING("ELASTIC_AMPLITUDE","\xd9","\xea","\x04","\x7e"),
	HX_HCSTRING("ELASTIC_PERIOD","\x8b","\x99","\x23","\x3b"),
	HX_HCSTRING("linear","\xe5","\x51","\xa0","\xec"),
	HX_HCSTRING("quadIn","\x8c","\x78","\x9f","\xcc"),
	HX_HCSTRING("quadOut","\x07","\x96","\xee","\x3e"),
	HX_HCSTRING("quadInOut","\x62","\xbf","\x21","\x4f"),
	HX_HCSTRING("cubeIn","\x3a","\x64","\x4a","\x34"),
	HX_HCSTRING("cubeOut","\x99","\xe2","\xd1","\x8c"),
	HX_HCSTRING("cubeInOut","\x74","\xd4","\xde","\x55"),
	HX_HCSTRING("quartIn","\xc4","\x7f","\x4b","\x48"),
	HX_HCSTRING("quartOut","\xcf","\xdf","\xc8","\xf9"),
	HX_HCSTRING("quartInOut","\x2a","\x0b","\x78","\x2c"),
	HX_HCSTRING("quintIn","\x50","\x49","\xdb","\xe0"),
	HX_HCSTRING("quintOut","\xc3","\x70","\x09","\xdf"),
	HX_HCSTRING("quintInOut","\x1e","\xc1","\xb5","\x4f"),
	HX_HCSTRING("smoothStepIn","\x1f","\x65","\x6e","\x4b"),
	HX_HCSTRING("smoothStepOut","\x14","\xaa","\x2e","\xb5"),
	HX_HCSTRING("smoothStepInOut","\xaf","\xb0","\x98","\xe4"),
	HX_HCSTRING("smootherStepIn","\xcc","\xd4","\xbb","\xaf"),
	HX_HCSTRING("smootherStepOut","\xc7","\xf1","\xa2","\x14"),
	HX_HCSTRING("smootherStepInOut","\x22","\x8b","\x74","\x3f"),
	HX_HCSTRING("sineIn","\x92","\xc3","\x1f","\xb9"),
	HX_HCSTRING("sineOut","\x41","\xf0","\xaf","\x42"),
	HX_HCSTRING("sineInOut","\x1c","\x9c","\x99","\xc9"),
	HX_HCSTRING("bounceIn","\x8d","\x37","\xb0","\x4c"),
	HX_HCSTRING("bounceOut","\xe6","\xf7","\x84","\xcd"),
	HX_HCSTRING("bounceInOut","\x01","\x97","\x7b","\x79"),
	HX_HCSTRING("circIn","\x9c","\x53","\x0d","\x56"),
	HX_HCSTRING("circOut","\xf7","\x68","\xa0","\xf5"),
	HX_HCSTRING("circInOut","\x52","\x2e","\x22","\x74"),
	HX_HCSTRING("expoIn","\xb7","\x6d","\x7d","\xc4"),
	HX_HCSTRING("expoOut","\x7c","\x26","\x47","\x29"),
	HX_HCSTRING("expoInOut","\x17","\x17","\x17","\xed"),
	HX_HCSTRING("backIn","\xec","\x31","\x99","\x4a"),
	HX_HCSTRING("backOut","\xa7","\x10","\x77","\xfb"),
	HX_HCSTRING("backInOut","\x02","\x22","\xb6","\x9a"),
	HX_HCSTRING("elasticIn","\x1a","\x21","\x61","\x27"),
	HX_HCSTRING("elasticOut","\xb9","\x69","\xa0","\x4d"),
	HX_HCSTRING("elasticInOut","\x94","\x63","\xb5","\xcc"),
	::String(null())
};

void FlxEase_obj::__register()
{
	hx::Object *dummy = new FlxEase_obj;
	FlxEase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tweens.FlxEase","\x6c","\x1c","\xe1","\x0d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxEase_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxEase_obj::__SetStatic;
	__mClass->mMarkFunc = FlxEase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxEase_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxEase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxEase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxEase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxEase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxEase_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_23_boot)
HXDLIN(  23)		PI2 = ((Float)::Math_obj::PI / (Float)(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_24_boot)
HXDLIN(  24)		EL = ((Float)((int)2 * ::Math_obj::PI) / (Float)((Float).45));
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_25_boot)
HXDLIN(  25)		B1 = ((Float)0.36363636363636365);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_26_boot)
HXDLIN(  26)		B2 = ((Float)0.72727272727272729);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_27_boot)
HXDLIN(  27)		B3 = ((Float)0.54545454545454541);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_28_boot)
HXDLIN(  28)		B4 = ((Float)0.90909090909090906);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_29_boot)
HXDLIN(  29)		B5 = ((Float)0.81818181818181823);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_30_boot)
HXDLIN(  30)		B6 = ((Float)0.95454545454545459);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_31_boot)
HXDLIN(  31)		ELASTIC_AMPLITUDE = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9a0b53a43037f15_32_boot)
HXDLIN(  32)		ELASTIC_PERIOD = ((Float)0.4);
            	}
}

} // end namespace flixel
} // end namespace tweens
