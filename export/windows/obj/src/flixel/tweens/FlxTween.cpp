// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTweenManager
#include <flixel/tweens/FlxTweenManager.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_AngleTween
#include <flixel/tweens/misc/AngleTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_CircularMotion
#include <flixel/tweens/motion/CircularMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_CubicMotion
#include <flixel/tweens/motion/CubicMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_LinearMotion
#include <flixel/tweens/motion/LinearMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_LinearPath
#include <flixel/tweens/motion/LinearPath.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_Motion
#include <flixel/tweens/motion/Motion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_QuadMotion
#include <flixel/tweens/motion/QuadMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_QuadPath
#include <flixel/tweens/motion/QuadPath.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b949e09b4c4d130d_48_new,"flixel.tweens.FlxTween","new",0xa442439f,"flixel.tweens.FlxTween.new","flixel/tweens/FlxTween.hx",48,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_358_resolveTweenOptions,"flixel.tweens.FlxTween","resolveTweenOptions",0x40bbd67e,"flixel.tweens.FlxTween.resolveTweenOptions","flixel/tweens/FlxTween.hx",358,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_369_destroy,"flixel.tweens.FlxTween","destroy",0xb268abb9,"flixel.tweens.FlxTween.destroy","flixel/tweens/FlxTween.hx",369,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_385_then,"flixel.tweens.FlxTween","then",0x19b266be,"flixel.tweens.FlxTween.then","flixel/tweens/FlxTween.hx",385,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_393_wait,"flixel.tweens.FlxTween","wait",0x1ba8be56,"flixel.tweens.FlxTween.wait","flixel/tweens/FlxTween.hx",393,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_397_addChainedTween,"flixel.tweens.FlxTween","addChainedTween",0xc68ec82b,"flixel.tweens.FlxTween.addChainedTween","flixel/tweens/FlxTween.hx",397,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_409_update,"flixel.tweens.FlxTween","update",0xb905642a,"flixel.tweens.FlxTween.update","flixel/tweens/FlxTween.hx",409,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_447_start,"flixel.tweens.FlxTween","start",0xd6ec7561,"flixel.tweens.FlxTween.start","flixel/tweens/FlxTween.hx",447,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_469_cancel,"flixel.tweens.FlxTween","cancel",0xea33cb9b,"flixel.tweens.FlxTween.cancel","flixel/tweens/FlxTween.hx",469,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_487_cancelChain,"flixel.tweens.FlxTween","cancelChain",0x815e4766,"flixel.tweens.FlxTween.cancelChain","flixel/tweens/FlxTween.hx",487,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_500_finish,"flixel.tweens.FlxTween","finish",0xb87f1e74,"flixel.tweens.FlxTween.finish","flixel/tweens/FlxTween.hx",500,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_546_onEnd,"flixel.tweens.FlxTween","onEnd",0x854598fb,"flixel.tweens.FlxTween.onEnd","flixel/tweens/FlxTween.hx",546,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_552_setVarsOnEnd,"flixel.tweens.FlxTween","setVarsOnEnd",0x855d798f,"flixel.tweens.FlxTween.setVarsOnEnd","flixel/tweens/FlxTween.hx",552,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_559_processTweenChain,"flixel.tweens.FlxTween","processTweenChain",0xe0e06164,"flixel.tweens.FlxTween.processTweenChain","flixel/tweens/FlxTween.hx",559,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_571_doNextTween,"flixel.tweens.FlxTween","doNextTween",0xb736cdac,"flixel.tweens.FlxTween.doNextTween","flixel/tweens/FlxTween.hx",571,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_582_setChain,"flixel.tweens.FlxTween","setChain",0xec346660,"flixel.tweens.FlxTween.setChain","flixel/tweens/FlxTween.hx",582,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_598_restart,"flixel.tweens.FlxTween","restart",0xf888468e,"flixel.tweens.FlxTween.restart","flixel/tweens/FlxTween.hx",598,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_615_setDelays,"flixel.tweens.FlxTween","setDelays",0x750c1d51,"flixel.tweens.FlxTween.setDelays","flixel/tweens/FlxTween.hx",615,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_622_set_startDelay,"flixel.tweens.FlxTween","set_startDelay",0xdc7f879f,"flixel.tweens.FlxTween.set_startDelay","flixel/tweens/FlxTween.hx",622,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_633_set_loopDelay,"flixel.tweens.FlxTween","set_loopDelay",0xc5954461,"flixel.tweens.FlxTween.set_loopDelay","flixel/tweens/FlxTween.hx",633,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_645_get_percent,"flixel.tweens.FlxTween","get_percent",0x9c57551b,"flixel.tweens.FlxTween.get_percent","flixel/tweens/FlxTween.hx",645,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_650_set_percent,"flixel.tweens.FlxTween","set_percent",0xa6c45c27,"flixel.tweens.FlxTween.set_percent","flixel/tweens/FlxTween.hx",650,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_654_set_type,"flixel.tweens.FlxTween","set_type",0x136d7018,"flixel.tweens.FlxTween.set_type","flixel/tweens/FlxTween.hx",654,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_669_set_active,"flixel.tweens.FlxTween","set_active",0x9ccb52a4,"flixel.tweens.FlxTween.set_active","flixel/tweens/FlxTween.hx",669,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_96_tween,"flixel.tweens.FlxTween","tween",0x6c51ab6a,"flixel.tweens.FlxTween.tween","flixel/tweens/FlxTween.hx",96,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_121_num,"flixel.tweens.FlxTween","num",0xa4425185,"flixel.tweens.FlxTween.num","flixel/tweens/FlxTween.hx",121,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_140_angle,"flixel.tweens.FlxTween","angle",0x75c344d2,"flixel.tweens.FlxTween.angle","flixel/tweens/FlxTween.hx",140,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_159_color,"flixel.tweens.FlxTween","color",0x9d3d7262,"flixel.tweens.FlxTween.color","flixel/tweens/FlxTween.hx",159,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_181_linearMotion,"flixel.tweens.FlxTween","linearMotion",0xd656f2dc,"flixel.tweens.FlxTween.linearMotion","flixel/tweens/FlxTween.hx",181,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_205_quadMotion,"flixel.tweens.FlxTween","quadMotion",0xc62584fe,"flixel.tweens.FlxTween.quadMotion","flixel/tweens/FlxTween.hx",205,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_230_cubicMotion,"flixel.tweens.FlxTween","cubicMotion",0xa068755f,"flixel.tweens.FlxTween.cubicMotion","flixel/tweens/FlxTween.hx",230,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_254_circularMotion,"flixel.tweens.FlxTween","circularMotion",0x65e89916,"flixel.tweens.FlxTween.circularMotion","flixel/tweens/FlxTween.hx",254,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_273_linearPath,"flixel.tweens.FlxTween","linearPath",0xd40abccb,"flixel.tweens.FlxTween.linearPath","flixel/tweens/FlxTween.hx",273,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_292_quadPath,"flixel.tweens.FlxTween","quadPath",0x6abb226d,"flixel.tweens.FlxTween.quadPath","flixel/tweens/FlxTween.hx",292,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_54_boot,"flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",54,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_59_boot,"flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",59,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_64_boot,"flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",64,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_69_boot,"flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",69,0x5d58d691)
HX_LOCAL_STACK_FRAME(_hx_pos_b949e09b4c4d130d_74_boot,"flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",74,0x5d58d691)
namespace flixel{
namespace tweens{

void FlxTween_obj::__construct( ::Dynamic Options, ::flixel::tweens::FlxTweenManager manager){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_48_new)
HXLINE( 337)		this->_waitingForRestart = false;
HXLINE( 336)		this->_running = false;
HXLINE( 335)		this->_delayToUse = ((Float)0);
HXLINE( 334)		this->_secondsSinceStart = ((Float)0);
HXLINE( 332)		this->loopDelay = ((Float)0);
HXLINE( 327)		this->startDelay = ((Float)0);
HXLINE( 322)		this->executions = (int)0;
HXLINE( 315)		this->scale = ((Float)0);
HXLINE( 301)		this->duration = ((Float)0);
HXLINE( 300)		this->active = false;
HXLINE( 346)		Options = this->resolveTweenOptions(Options);
HXLINE( 348)		this->set_type(( (int)(Options->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ));
HXLINE( 349)		this->onStart = Options->__Field(HX_("onStart",c3,12,49,1a),hx::paccDynamic);
HXLINE( 350)		this->onUpdate = Options->__Field(HX_("onUpdate",88,7c,b2,66),hx::paccDynamic);
HXLINE( 351)		this->onComplete = Options->__Field(HX_("onComplete",f8,d4,7e,5d),hx::paccDynamic);
HXLINE( 352)		this->ease = Options->__Field(HX_("ease",ee,8b,0c,43),hx::paccDynamic);
HXLINE( 353)		this->setDelays(Options->__Field(HX_("startDelay",c1,af,3d,f3),hx::paccDynamic),Options->__Field(HX_("loopDelay",7f,f6,d2,04),hx::paccDynamic));
HXLINE( 354)		 ::flixel::tweens::FlxTweenManager _hx_tmp;
HXDLIN( 354)		if (hx::IsNotNull( manager )) {
HXLINE( 354)			_hx_tmp = manager;
            		}
            		else {
HXLINE( 354)			_hx_tmp = ::flixel::tweens::FlxTween_obj::globalManager;
            		}
HXDLIN( 354)		this->manager = _hx_tmp;
            	}

Dynamic FlxTween_obj::__CreateEmpty() { return new FlxTween_obj; }

void *FlxTween_obj::_hx_vtable = 0;

Dynamic FlxTween_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTween_obj > _hx_result = new FlxTween_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxTween_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x123505a1;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_tweens_FlxTween__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::tweens::FlxTween_obj::destroy,
};

void *FlxTween_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_tweens_FlxTween__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic FlxTween_obj::resolveTweenOptions( ::Dynamic Options){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_358_resolveTweenOptions)
HXLINE( 359)		if (hx::IsNull( Options )) {
HXLINE( 360)			Options =  ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("type",ba,f2,08,4d),(int)8));
            		}
HXLINE( 362)		if (hx::IsNull( Options->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic) )) {
HXLINE( 363)			Options->__SetField(HX_("type",ba,f2,08,4d),(int)8,hx::paccDynamic);
            		}
HXLINE( 365)		return Options;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,resolveTweenOptions,return )

void FlxTween_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_369_destroy)
HXLINE( 370)		this->onStart = null();
HXLINE( 371)		this->onUpdate = null();
HXLINE( 372)		this->onComplete = null();
HXLINE( 373)		this->ease = null();
HXLINE( 374)		this->manager = null();
HXLINE( 375)		this->_chainedTweens = null();
HXLINE( 376)		this->_nextTweenInChain = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,destroy,(void))

 ::flixel::tweens::FlxTween FlxTween_obj::then( ::flixel::tweens::FlxTween tween){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_385_then)
HXDLIN( 385)		return this->addChainedTween(tween);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,then,return )

 ::flixel::tweens::FlxTween FlxTween_obj::wait(Float delay){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_393_wait)
HXDLIN( 393)		return this->addChainedTween(::flixel::tweens::FlxTween_obj::num((int)0,(int)0,delay,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,wait,return )

 ::flixel::tweens::FlxTween FlxTween_obj::addChainedTween( ::flixel::tweens::FlxTween tween){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_397_addChainedTween)
HXLINE( 398)		tween->setVarsOnEnd();
HXLINE( 399)		tween->manager->remove(tween,false);
HXLINE( 401)		if (hx::IsNull( this->_chainedTweens )) {
HXLINE( 402)			this->_chainedTweens = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 404)		this->_chainedTweens->push(tween);
HXLINE( 405)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,addChainedTween,return )

void FlxTween_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_409_update)
HXLINE( 410)		 ::flixel::tweens::FlxTween _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 410)		_hx_tmp->_secondsSinceStart = (_hx_tmp->_secondsSinceStart + elapsed);
HXLINE( 411)		Float delay;
HXDLIN( 411)		if ((this->executions > (int)0)) {
HXLINE( 411)			delay = this->loopDelay;
            		}
            		else {
HXLINE( 411)			delay = this->startDelay;
            		}
HXLINE( 412)		if ((this->_secondsSinceStart < delay)) {
HXLINE( 414)			return;
            		}
HXLINE( 416)		this->scale = ((Float)::Math_obj::max((this->_secondsSinceStart - delay),(int)0) / (Float)this->duration);
HXLINE( 417)		if (hx::IsNotNull( this->ease )) {
HXLINE( 419)			this->scale = ( (Float)(this->ease(this->scale)) );
            		}
HXLINE( 421)		if (this->backward) {
HXLINE( 423)			this->scale = ((int)1 - this->scale);
            		}
HXLINE( 425)		bool _hx_tmp1;
HXDLIN( 425)		if ((this->_secondsSinceStart > delay)) {
HXLINE( 425)			_hx_tmp1 = !(this->_running);
            		}
            		else {
HXLINE( 425)			_hx_tmp1 = false;
            		}
HXDLIN( 425)		if (_hx_tmp1) {
HXLINE( 427)			this->_running = true;
HXLINE( 428)			if (hx::IsNotNull( this->onStart )) {
HXLINE( 429)				this->onStart(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 431)		Float _hx_tmp2 = this->_secondsSinceStart;
HXDLIN( 431)		if ((_hx_tmp2 >= (this->duration + delay))) {
HXLINE( 433)			Float _hx_tmp3;
HXDLIN( 433)			if (this->backward) {
HXLINE( 433)				_hx_tmp3 = (int)0;
            			}
            			else {
HXLINE( 433)				_hx_tmp3 = (int)1;
            			}
HXDLIN( 433)			this->scale = _hx_tmp3;
HXLINE( 434)			this->finished = true;
            		}
            		else {
HXLINE( 438)			if (hx::IsNotNull( this->onUpdate )) {
HXLINE( 439)				this->onUpdate(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,update,(void))

 ::flixel::tweens::FlxTween FlxTween_obj::start(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_447_start)
HXLINE( 448)		this->_waitingForRestart = false;
HXLINE( 449)		this->_secondsSinceStart = (int)0;
HXLINE( 450)		Float _hx_tmp;
HXDLIN( 450)		if ((this->executions > (int)0)) {
HXLINE( 450)			_hx_tmp = this->loopDelay;
            		}
            		else {
HXLINE( 450)			_hx_tmp = this->startDelay;
            		}
HXDLIN( 450)		this->_delayToUse = _hx_tmp;
HXLINE( 451)		if ((this->duration == (int)0)) {
HXLINE( 453)			this->set_active(false);
HXLINE( 454)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 456)		this->set_active(true);
HXLINE( 457)		this->_running = false;
HXLINE( 458)		this->finished = false;
HXLINE( 459)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,start,return )

void FlxTween_obj::cancel(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_469_cancel)
HXLINE( 470)		this->onEnd();
HXLINE( 472)		if (hx::IsNotNull( this->manager )) {
HXLINE( 473)			this->manager->remove(hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,cancel,(void))

void FlxTween_obj::cancelChain(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_487_cancelChain)
HXLINE( 489)		if (hx::IsNotNull( this->_nextTweenInChain )) {
HXLINE( 490)			this->_nextTweenInChain->cancelChain();
            		}
HXLINE( 493)		if (hx::IsNotNull( this->_chainedTweens )) {
HXLINE( 494)			this->_chainedTweens = null();
            		}
HXLINE( 496)		this->cancel();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,cancelChain,(void))

void FlxTween_obj::finish(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_500_finish)
HXLINE( 501)		this->executions++;
HXLINE( 503)		if (hx::IsNotNull( this->onComplete )) {
HXLINE( 504)			this->onComplete(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 506)		int type = ((int)this->type & (int)~((int)16));
HXLINE( 508)		bool _hx_tmp;
HXDLIN( 508)		if ((type != (int)1)) {
HXLINE( 508)			_hx_tmp = (type == (int)8);
            		}
            		else {
HXLINE( 508)			_hx_tmp = true;
            		}
HXDLIN( 508)		if (_hx_tmp) {
HXLINE( 510)			this->onEnd();
HXLINE( 511)			this->_secondsSinceStart = (this->duration + this->startDelay);
HXLINE( 513)			bool _hx_tmp1;
HXDLIN( 513)			if ((type == (int)8)) {
HXLINE( 513)				_hx_tmp1 = hx::IsNotNull( this->manager );
            			}
            			else {
HXLINE( 513)				_hx_tmp1 = false;
            			}
HXDLIN( 513)			if (_hx_tmp1) {
HXLINE( 515)				this->manager->remove(hx::ObjectPtr<OBJ_>(this),null());
            			}
            		}
HXLINE( 519)		bool _hx_tmp2;
HXDLIN( 519)		if ((type != (int)2)) {
HXLINE( 519)			_hx_tmp2 = (type == (int)4);
            		}
            		else {
HXLINE( 519)			_hx_tmp2 = true;
            		}
HXDLIN( 519)		if (_hx_tmp2) {
HXLINE( 521)			this->_secondsSinceStart = (hx::Mod((this->_secondsSinceStart - this->_delayToUse),this->duration) + this->_delayToUse);
HXLINE( 522)			this->scale = ((Float)::Math_obj::max((this->_secondsSinceStart - this->_delayToUse),(int)0) / (Float)this->duration);
HXLINE( 524)			bool _hx_tmp3;
HXDLIN( 524)			bool _hx_tmp4;
HXDLIN( 524)			if (hx::IsNotNull( this->ease )) {
HXLINE( 524)				_hx_tmp4 = (this->scale > (int)0);
            			}
            			else {
HXLINE( 524)				_hx_tmp4 = false;
            			}
HXDLIN( 524)			if (_hx_tmp4) {
HXLINE( 524)				_hx_tmp3 = (this->scale < (int)1);
            			}
            			else {
HXLINE( 524)				_hx_tmp3 = false;
            			}
HXDLIN( 524)			if (_hx_tmp3) {
HXLINE( 526)				this->scale = ( (Float)(this->ease(this->scale)) );
            			}
HXLINE( 529)			if ((type == (int)4)) {
HXLINE( 531)				this->backward = !(this->backward);
HXLINE( 532)				if (this->backward) {
HXLINE( 534)					this->scale = ((int)1 - this->scale);
            				}
            			}
HXLINE( 538)			this->restart();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,finish,(void))

void FlxTween_obj::onEnd(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_546_onEnd)
HXLINE( 547)		this->setVarsOnEnd();
HXLINE( 548)		this->processTweenChain();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,onEnd,(void))

void FlxTween_obj::setVarsOnEnd(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_552_setVarsOnEnd)
HXLINE( 553)		this->set_active(false);
HXLINE( 554)		this->_running = false;
HXLINE( 555)		this->finished = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,setVarsOnEnd,(void))

void FlxTween_obj::processTweenChain(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_559_processTweenChain)
HXLINE( 560)		bool _hx_tmp;
HXDLIN( 560)		if (hx::IsNotNull( this->_chainedTweens )) {
HXLINE( 560)			_hx_tmp = (this->_chainedTweens->length <= (int)0);
            		}
            		else {
HXLINE( 560)			_hx_tmp = true;
            		}
HXDLIN( 560)		if (_hx_tmp) {
HXLINE( 561)			return;
            		}
HXLINE( 564)		this->_nextTweenInChain = this->_chainedTweens->shift().StaticCast<  ::flixel::tweens::FlxTween >();
HXLINE( 566)		this->doNextTween(this->_nextTweenInChain);
HXLINE( 567)		this->_chainedTweens = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,processTweenChain,(void))

void FlxTween_obj::doNextTween( ::flixel::tweens::FlxTween tween){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_571_doNextTween)
HXLINE( 572)		if (!(tween->active)) {
HXLINE( 574)			tween->start();
HXLINE( 575)			this->manager->add_flixel_tweens_FlxTween(tween,null());
            		}
HXLINE( 578)		tween->setChain(this->_chainedTweens);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,doNextTween,(void))

void FlxTween_obj::setChain(::Array< ::Dynamic> previousChain){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_582_setChain)
HXLINE( 583)		if (hx::IsNull( previousChain )) {
HXLINE( 584)			return;
            		}
HXLINE( 586)		if (hx::IsNull( this->_chainedTweens )) {
HXLINE( 587)			this->_chainedTweens = previousChain;
            		}
            		else {
HXLINE( 589)			this->_chainedTweens = this->_chainedTweens->concat(previousChain);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,setChain,(void))

void FlxTween_obj::restart(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_598_restart)
HXDLIN( 598)		if (this->active) {
HXLINE( 600)			this->start();
            		}
            		else {
HXLINE( 604)			this->_waitingForRestart = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,restart,(void))

 ::flixel::tweens::FlxTween FlxTween_obj::setDelays( ::Dynamic StartDelay, ::Dynamic LoopDelay){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_615_setDelays)
HXLINE( 616)		Float _hx_tmp;
HXDLIN( 616)		if (hx::IsNotNull( StartDelay )) {
HXLINE( 616)			_hx_tmp = StartDelay;
            		}
            		else {
HXLINE( 616)			_hx_tmp = (int)0;
            		}
HXDLIN( 616)		this->set_startDelay(_hx_tmp);
HXLINE( 617)		Float _hx_tmp1;
HXDLIN( 617)		if (hx::IsNotNull( LoopDelay )) {
HXLINE( 617)			_hx_tmp1 = LoopDelay;
            		}
            		else {
HXLINE( 617)			_hx_tmp1 = (int)0;
            		}
HXDLIN( 617)		this->set_loopDelay(_hx_tmp1);
HXLINE( 618)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTween_obj,setDelays,return )

Float FlxTween_obj::set_startDelay(Float value){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_622_set_startDelay)
HXLINE( 623)		Float dly = ::Math_obj::abs(value);
HXLINE( 624)		if ((this->executions == (int)0)) {
HXLINE( 626)			Float _hx_tmp = this->duration;
HXDLIN( 626)			Float _hx_tmp1 = (_hx_tmp * ((Float)::Math_obj::max((this->_secondsSinceStart - this->_delayToUse),(int)0) / (Float)this->duration));
HXDLIN( 626)			this->_secondsSinceStart = (_hx_tmp1 + ::Math_obj::max((dly - this->startDelay),(int)0));
HXLINE( 627)			this->_delayToUse = dly;
            		}
HXLINE( 629)		return (this->startDelay = dly);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_startDelay,return )

Float FlxTween_obj::set_loopDelay( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_633_set_loopDelay)
HXLINE( 634)		Float dly = ::Math_obj::abs(value);
HXLINE( 635)		if ((this->executions > (int)0)) {
HXLINE( 637)			Float _hx_tmp = this->duration;
HXDLIN( 637)			Float _hx_tmp1 = (_hx_tmp * ((Float)::Math_obj::max((this->_secondsSinceStart - this->_delayToUse),(int)0) / (Float)this->duration));
HXDLIN( 637)			this->_secondsSinceStart = (_hx_tmp1 + ::Math_obj::max((dly - this->loopDelay),(int)0));
HXLINE( 638)			this->_delayToUse = dly;
            		}
HXLINE( 640)		return (this->loopDelay = dly);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_loopDelay,return )

Float FlxTween_obj::get_percent(){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_645_get_percent)
HXDLIN( 645)		return ((Float)::Math_obj::max((this->_secondsSinceStart - this->_delayToUse),(int)0) / (Float)this->duration);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,get_percent,return )

Float FlxTween_obj::set_percent(Float value){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_650_set_percent)
HXDLIN( 650)		return (this->_secondsSinceStart = ((this->duration * value) + this->_delayToUse));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_percent,return )

int FlxTween_obj::set_type(int value){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_654_set_type)
HXLINE( 655)		if ((value == (int)0)) {
HXLINE( 657)			value = (int)8;
            		}
            		else {
HXLINE( 659)			if ((value == (int)16)) {
HXLINE( 661)				value = ((int)(int)1 | (int)(int)16);
            			}
            		}
HXLINE( 664)		this->backward = (((int)value & (int)(int)16) > (int)0);
HXLINE( 665)		return (this->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_type,return )

bool FlxTween_obj::set_active(bool active){
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_669_set_active)
HXLINE( 670)		this->active = active;
HXLINE( 672)		if (this->_waitingForRestart) {
HXLINE( 673)			this->restart();
            		}
HXLINE( 675)		return active;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_active,return )

int FlxTween_obj::PERSIST;

int FlxTween_obj::LOOPING;

int FlxTween_obj::PINGPONG;

int FlxTween_obj::ONESHOT;

int FlxTween_obj::BACKWARD;

 ::flixel::tweens::FlxTweenManager FlxTween_obj::globalManager;

 ::flixel::tweens::misc::VarTween FlxTween_obj::tween( ::Dynamic Object, ::Dynamic Values,hx::Null< Float >  __o_Duration, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_96_tween)
HXDLIN(  96)		return ::flixel::tweens::FlxTween_obj::globalManager->tween(Object,Values,Duration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTween_obj,tween,return )

 ::flixel::tweens::misc::NumTween FlxTween_obj::num(Float FromValue,Float ToValue,hx::Null< Float >  __o_Duration, ::Dynamic Options, ::Dynamic TweenFunction){
Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_121_num)
HXDLIN( 121)		return ::flixel::tweens::FlxTween_obj::globalManager->num(FromValue,ToValue,Duration,Options,TweenFunction);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,num,return )

 ::flixel::tweens::misc::AngleTween FlxTween_obj::angle( ::flixel::FlxSprite Sprite,Float FromAngle,Float ToAngle,hx::Null< Float >  __o_Duration, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_140_angle)
HXDLIN( 140)		return ::flixel::tweens::FlxTween_obj::globalManager->angle(Sprite,FromAngle,ToAngle,Duration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,angle,return )

 ::flixel::tweens::misc::ColorTween FlxTween_obj::color( ::flixel::FlxSprite Sprite,hx::Null< Float >  __o_Duration,int FromColor,int ToColor, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_159_color)
HXDLIN( 159)		return ::flixel::tweens::FlxTween_obj::globalManager->color(Sprite,Duration,FromColor,ToColor,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,color,return )

 ::flixel::tweens::motion::LinearMotion FlxTween_obj::linearMotion( ::flixel::FlxObject Object,Float FromX,Float FromY,Float ToX,Float ToY,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_181_linearMotion)
HXDLIN( 181)		return ::flixel::tweens::FlxTween_obj::globalManager->linearMotion(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlxTween_obj,linearMotion,return )

 ::flixel::tweens::motion::QuadMotion FlxTween_obj::quadMotion( ::flixel::FlxObject Object,Float FromX,Float FromY,Float ControlX,Float ControlY,Float ToX,Float ToY,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_205_quadMotion)
HXDLIN( 205)		return ::flixel::tweens::FlxTween_obj::globalManager->quadMotion(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FlxTween_obj,quadMotion,return )

 ::flixel::tweens::motion::CubicMotion FlxTween_obj::cubicMotion( ::flixel::FlxObject Object,Float FromX,Float FromY,Float aX,Float aY,Float bX,Float bY,Float ToX,Float ToY,hx::Null< Float >  __o_Duration, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_230_cubicMotion)
HXDLIN( 230)		return ::flixel::tweens::FlxTween_obj::globalManager->cubicMotion(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(FlxTween_obj,cubicMotion,return )

 ::flixel::tweens::motion::CircularMotion FlxTween_obj::circularMotion( ::flixel::FlxObject Object,Float CenterX,Float CenterY,Float Radius,Float Angle,bool Clockwise,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_254_circularMotion)
HXDLIN( 254)		return ::flixel::tweens::FlxTween_obj::globalManager->circularMotion(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(FlxTween_obj,circularMotion,return )

 ::flixel::tweens::motion::LinearPath FlxTween_obj::linearPath( ::flixel::FlxObject Object,::Array< ::Dynamic> Points,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_273_linearPath)
HXDLIN( 273)		return ::flixel::tweens::FlxTween_obj::globalManager->linearPath(Object,Points,DurationOrSpeed,UseDuration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,linearPath,return )

 ::flixel::tweens::motion::QuadPath FlxTween_obj::quadPath( ::flixel::FlxObject Object,::Array< ::Dynamic> Points,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_292_quadPath)
HXDLIN( 292)		return ::flixel::tweens::FlxTween_obj::globalManager->quadPath(Object,Points,DurationOrSpeed,UseDuration,Options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,quadPath,return )


hx::ObjectPtr< FlxTween_obj > FlxTween_obj::__new( ::Dynamic Options, ::flixel::tweens::FlxTweenManager manager) {
	hx::ObjectPtr< FlxTween_obj > __this = new FlxTween_obj();
	__this->__construct(Options,manager);
	return __this;
}

hx::ObjectPtr< FlxTween_obj > FlxTween_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic Options, ::flixel::tweens::FlxTweenManager manager) {
	FlxTween_obj *__this = (FlxTween_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTween_obj), true, "flixel.tweens.FlxTween"));
	*(void **)__this = FlxTween_obj::_hx_vtable;
	__this->__construct(Options,manager);
	return __this;
}

FlxTween_obj::FlxTween_obj()
{
}

void FlxTween_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTween);
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(ease,"ease");
	HX_MARK_MEMBER_NAME(onStart,"onStart");
	HX_MARK_MEMBER_NAME(onUpdate,"onUpdate");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(backward,"backward");
	HX_MARK_MEMBER_NAME(executions,"executions");
	HX_MARK_MEMBER_NAME(startDelay,"startDelay");
	HX_MARK_MEMBER_NAME(loopDelay,"loopDelay");
	HX_MARK_MEMBER_NAME(_secondsSinceStart,"_secondsSinceStart");
	HX_MARK_MEMBER_NAME(_delayToUse,"_delayToUse");
	HX_MARK_MEMBER_NAME(_running,"_running");
	HX_MARK_MEMBER_NAME(_waitingForRestart,"_waitingForRestart");
	HX_MARK_MEMBER_NAME(_chainedTweens,"_chainedTweens");
	HX_MARK_MEMBER_NAME(_nextTweenInChain,"_nextTweenInChain");
	HX_MARK_END_CLASS();
}

void FlxTween_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(ease,"ease");
	HX_VISIT_MEMBER_NAME(onStart,"onStart");
	HX_VISIT_MEMBER_NAME(onUpdate,"onUpdate");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(backward,"backward");
	HX_VISIT_MEMBER_NAME(executions,"executions");
	HX_VISIT_MEMBER_NAME(startDelay,"startDelay");
	HX_VISIT_MEMBER_NAME(loopDelay,"loopDelay");
	HX_VISIT_MEMBER_NAME(_secondsSinceStart,"_secondsSinceStart");
	HX_VISIT_MEMBER_NAME(_delayToUse,"_delayToUse");
	HX_VISIT_MEMBER_NAME(_running,"_running");
	HX_VISIT_MEMBER_NAME(_waitingForRestart,"_waitingForRestart");
	HX_VISIT_MEMBER_NAME(_chainedTweens,"_chainedTweens");
	HX_VISIT_MEMBER_NAME(_nextTweenInChain,"_nextTweenInChain");
}

hx::Val FlxTween_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"then") ) { return hx::Val( then_dyn() ); }
		if (HX_FIELD_EQ(inName,"wait") ) { return hx::Val( wait_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnd") ) { return hx::Val( onEnd_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return hx::Val( cancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"finish") ) { return hx::Val( finish_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"manager") ) { return hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"onStart") ) { return hx::Val( onStart ); }
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_percent() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"restart") ) { return hx::Val( restart_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration ); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished ); }
		if (HX_FIELD_EQ(inName,"backward") ) { return hx::Val( backward ); }
		if (HX_FIELD_EQ(inName,"_running") ) { return hx::Val( _running ); }
		if (HX_FIELD_EQ(inName,"setChain") ) { return hx::Val( setChain_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopDelay") ) { return hx::Val( loopDelay ); }
		if (HX_FIELD_EQ(inName,"setDelays") ) { return hx::Val( setDelays_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete ); }
		if (HX_FIELD_EQ(inName,"executions") ) { return hx::Val( executions ); }
		if (HX_FIELD_EQ(inName,"startDelay") ) { return hx::Val( startDelay ); }
		if (HX_FIELD_EQ(inName,"set_active") ) { return hx::Val( set_active_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_delayToUse") ) { return hx::Val( _delayToUse ); }
		if (HX_FIELD_EQ(inName,"cancelChain") ) { return hx::Val( cancelChain_dyn() ); }
		if (HX_FIELD_EQ(inName,"doNextTween") ) { return hx::Val( doNextTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_percent") ) { return hx::Val( get_percent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_percent") ) { return hx::Val( set_percent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setVarsOnEnd") ) { return hx::Val( setVarsOnEnd_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_loopDelay") ) { return hx::Val( set_loopDelay_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_chainedTweens") ) { return hx::Val( _chainedTweens ); }
		if (HX_FIELD_EQ(inName,"set_startDelay") ) { return hx::Val( set_startDelay_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addChainedTween") ) { return hx::Val( addChainedTween_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_nextTweenInChain") ) { return hx::Val( _nextTweenInChain ); }
		if (HX_FIELD_EQ(inName,"processTweenChain") ) { return hx::Val( processTweenChain_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_secondsSinceStart") ) { return hx::Val( _secondsSinceStart ); }
		if (HX_FIELD_EQ(inName,"_waitingForRestart") ) { return hx::Val( _waitingForRestart ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"resolveTweenOptions") ) { return hx::Val( resolveTweenOptions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTween_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { outValue = num_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tween") ) { outValue = tween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angle") ) { outValue = angle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color") ) { outValue = color_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"PERSIST") ) { outValue = ( PERSIST ); return true; }
		if (HX_FIELD_EQ(inName,"LOOPING") ) { outValue = ( LOOPING ); return true; }
		if (HX_FIELD_EQ(inName,"ONESHOT") ) { outValue = ( ONESHOT ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"PINGPONG") ) { outValue = ( PINGPONG ); return true; }
		if (HX_FIELD_EQ(inName,"BACKWARD") ) { outValue = ( BACKWARD ); return true; }
		if (HX_FIELD_EQ(inName,"quadPath") ) { outValue = quadPath_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadMotion") ) { outValue = quadMotion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"linearPath") ) { outValue = linearPath_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubicMotion") ) { outValue = cubicMotion_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"linearMotion") ) { outValue = linearMotion_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"globalManager") ) { outValue = ( globalManager ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"circularMotion") ) { outValue = circularMotion_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTween_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { ease=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast< int >()) );type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_active(inValue.Cast< bool >()) );active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::tweens::FlxTweenManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStart") ) { onStart=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_percent(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { onUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backward") ) { backward=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_running") ) { _running=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopDelay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_loopDelay(inValue.Cast< Float >()) );loopDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executions") ) { executions=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startDelay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_startDelay(inValue.Cast< Float >()) );startDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_delayToUse") ) { _delayToUse=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_chainedTweens") ) { _chainedTweens=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_nextTweenInChain") ) { _nextTweenInChain=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_secondsSinceStart") ) { _secondsSinceStart=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waitingForRestart") ) { _waitingForRestart=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxTween_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"PERSIST") ) { PERSIST=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"LOOPING") ) { LOOPING=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"ONESHOT") ) { ONESHOT=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"PINGPONG") ) { PINGPONG=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"BACKWARD") ) { BACKWARD=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"globalManager") ) { globalManager=ioValue.Cast<  ::flixel::tweens::FlxTweenManager >(); return true; }
	}
	return false;
}

void FlxTween_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27"));
	outFields->push(HX_HCSTRING("executions","\xdb","\xf9","\x36","\x3c"));
	outFields->push(HX_HCSTRING("startDelay","\xc1","\xaf","\x3d","\xf3"));
	outFields->push(HX_HCSTRING("loopDelay","\x7f","\xf6","\xd2","\x04"));
	outFields->push(HX_HCSTRING("_secondsSinceStart","\x68","\x4a","\x61","\xcd"));
	outFields->push(HX_HCSTRING("_delayToUse","\x28","\x28","\x40","\x14"));
	outFields->push(HX_HCSTRING("_running","\x80","\xc7","\x21","\x25"));
	outFields->push(HX_HCSTRING("_waitingForRestart","\x74","\xf0","\x92","\xee"));
	outFields->push(HX_HCSTRING("_chainedTweens","\xa9","\x3f","\x16","\x71"));
	outFields->push(HX_HCSTRING("_nextTweenInChain","\xa3","\xbb","\x2c","\xa7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTween_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::tweens::FlxTweenManager*/ ,(int)offsetof(FlxTween_obj,manager),HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,ease),HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,onStart),HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,onUpdate),HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsInt,(int)offsetof(FlxTween_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,backward),HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27")},
	{hx::fsInt,(int)offsetof(FlxTween_obj,executions),HX_HCSTRING("executions","\xdb","\xf9","\x36","\x3c")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,startDelay),HX_HCSTRING("startDelay","\xc1","\xaf","\x3d","\xf3")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,loopDelay),HX_HCSTRING("loopDelay","\x7f","\xf6","\xd2","\x04")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,_secondsSinceStart),HX_HCSTRING("_secondsSinceStart","\x68","\x4a","\x61","\xcd")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,_delayToUse),HX_HCSTRING("_delayToUse","\x28","\x28","\x40","\x14")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,_running),HX_HCSTRING("_running","\x80","\xc7","\x21","\x25")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,_waitingForRestart),HX_HCSTRING("_waitingForRestart","\x74","\xf0","\x92","\xee")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTween_obj,_chainedTweens),HX_HCSTRING("_chainedTweens","\xa9","\x3f","\x16","\x71")},
	{hx::fsObject /*::flixel::tweens::FlxTween*/ ,(int)offsetof(FlxTween_obj,_nextTweenInChain),HX_HCSTRING("_nextTweenInChain","\xa3","\xbb","\x2c","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxTween_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxTween_obj::PERSIST,HX_HCSTRING("PERSIST","\xf4","\xf5","\x44","\x03")},
	{hx::fsInt,(void *) &FlxTween_obj::LOOPING,HX_HCSTRING("LOOPING","\xde","\x50","\x51","\xa0")},
	{hx::fsInt,(void *) &FlxTween_obj::PINGPONG,HX_HCSTRING("PINGPONG","\x6a","\x23","\xc9","\x01")},
	{hx::fsInt,(void *) &FlxTween_obj::ONESHOT,HX_HCSTRING("ONESHOT","\x40","\x6e","\xaf","\xf6")},
	{hx::fsInt,(void *) &FlxTween_obj::BACKWARD,HX_HCSTRING("BACKWARD","\xe3","\x6b","\x9e","\x80")},
	{hx::fsObject /*::flixel::tweens::FlxTweenManager*/ ,(void *) &FlxTween_obj::globalManager,HX_HCSTRING("globalManager","\x4a","\xcb","\xfa","\x39")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTween_obj_sMemberFields[] = {
	HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27"),
	HX_HCSTRING("executions","\xdb","\xf9","\x36","\x3c"),
	HX_HCSTRING("startDelay","\xc1","\xaf","\x3d","\xf3"),
	HX_HCSTRING("loopDelay","\x7f","\xf6","\xd2","\x04"),
	HX_HCSTRING("_secondsSinceStart","\x68","\x4a","\x61","\xcd"),
	HX_HCSTRING("_delayToUse","\x28","\x28","\x40","\x14"),
	HX_HCSTRING("_running","\x80","\xc7","\x21","\x25"),
	HX_HCSTRING("_waitingForRestart","\x74","\xf0","\x92","\xee"),
	HX_HCSTRING("_chainedTweens","\xa9","\x3f","\x16","\x71"),
	HX_HCSTRING("_nextTweenInChain","\xa3","\xbb","\x2c","\xa7"),
	HX_HCSTRING("resolveTweenOptions","\x3f","\xb5","\x76","\x9f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("then","\xdd","\x02","\xfc","\x4c"),
	HX_HCSTRING("wait","\x75","\x5a","\xf2","\x4e"),
	HX_HCSTRING("addChainedTween","\x6c","\xf2","\xe0","\x52"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("cancel","\x7a","\xed","\x33","\xb8"),
	HX_HCSTRING("cancelChain","\x27","\xfd","\xdb","\xe3"),
	HX_HCSTRING("finish","\x53","\x40","\x7f","\x86"),
	HX_HCSTRING("onEnd","\xfc","\x97","\x64","\x32"),
	HX_HCSTRING("setVarsOnEnd","\xae","\xcc","\xde","\x50"),
	HX_HCSTRING("processTweenChain","\xe5","\x5d","\xc2","\xc5"),
	HX_HCSTRING("doNextTween","\x6d","\x83","\xb4","\x19"),
	HX_HCSTRING("setChain","\xff","\xfd","\xe7","\x53"),
	HX_HCSTRING("restart","\xcf","\xc7","\xa5","\x6a"),
	HX_HCSTRING("setDelays","\xd2","\x30","\x7d","\xca"),
	HX_HCSTRING("set_startDelay","\x7e","\x20","\x53","\x89"),
	HX_HCSTRING("set_loopDelay","\x62","\xac","\x3c","\x0b"),
	HX_HCSTRING("get_percent","\xdc","\x0a","\xd5","\xfe"),
	HX_HCSTRING("set_percent","\xe8","\x11","\x42","\x09"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("set_active","\x03","\x50","\x4b","\x0a"),
	::String(null()) };

static void FlxTween_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTween_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxTween_obj::PERSIST,"PERSIST");
	HX_MARK_MEMBER_NAME(FlxTween_obj::LOOPING,"LOOPING");
	HX_MARK_MEMBER_NAME(FlxTween_obj::PINGPONG,"PINGPONG");
	HX_MARK_MEMBER_NAME(FlxTween_obj::ONESHOT,"ONESHOT");
	HX_MARK_MEMBER_NAME(FlxTween_obj::BACKWARD,"BACKWARD");
	HX_MARK_MEMBER_NAME(FlxTween_obj::globalManager,"globalManager");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTween_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTween_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::PERSIST,"PERSIST");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::LOOPING,"LOOPING");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::PINGPONG,"PINGPONG");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::ONESHOT,"ONESHOT");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::BACKWARD,"BACKWARD");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::globalManager,"globalManager");
};

#endif

hx::Class FlxTween_obj::__mClass;

static ::String FlxTween_obj_sStaticFields[] = {
	HX_HCSTRING("PERSIST","\xf4","\xf5","\x44","\x03"),
	HX_HCSTRING("LOOPING","\xde","\x50","\x51","\xa0"),
	HX_HCSTRING("PINGPONG","\x6a","\x23","\xc9","\x01"),
	HX_HCSTRING("ONESHOT","\x40","\x6e","\xaf","\xf6"),
	HX_HCSTRING("BACKWARD","\xe3","\x6b","\x9e","\x80"),
	HX_HCSTRING("globalManager","\x4a","\xcb","\xfa","\x39"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("num","\x46","\xde","\x53","\x00"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("linearMotion","\xfb","\x45","\xd8","\xa1"),
	HX_HCSTRING("quadMotion","\x5d","\x82","\xa5","\x33"),
	HX_HCSTRING("cubicMotion","\x20","\x2b","\xe6","\x02"),
	HX_HCSTRING("circularMotion","\xf5","\x31","\xbc","\x12"),
	HX_HCSTRING("linearPath","\x2a","\xba","\x8a","\x41"),
	HX_HCSTRING("quadPath","\x0c","\xba","\x6e","\xd2"),
	::String(null())
};

void FlxTween_obj::__register()
{
	hx::Object *dummy = new FlxTween_obj;
	FlxTween_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tweens.FlxTween","\x2d","\x88","\x9a","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTween_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxTween_obj::__SetStatic;
	__mClass->mMarkFunc = FlxTween_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTween_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTween_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTween_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTween_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTween_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTween_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTween_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_54_boot)
HXDLIN(  54)		PERSIST = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_59_boot)
HXDLIN(  59)		LOOPING = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_64_boot)
HXDLIN(  64)		PINGPONG = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_69_boot)
HXDLIN(  69)		ONESHOT = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b949e09b4c4d130d_74_boot)
HXDLIN(  74)		BACKWARD = (int)16;
            	}
}

} // end namespace flixel
} // end namespace tweens
