// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_55_alphaMask,"flixel.util.FlxSpriteUtil","alphaMask",0xaad6793b,"flixel.util.FlxSpriteUtil.alphaMask","flixel/util/FlxSpriteUtil.hx",55,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_84_alphaMaskFlxSprite,"flixel.util.FlxSpriteUtil","alphaMaskFlxSprite",0x13c0dd5c,"flixel.util.FlxSpriteUtil.alphaMaskFlxSprite","flixel/util/FlxSpriteUtil.hx",84,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_104_screenWrap,"flixel.util.FlxSpriteUtil","screenWrap",0x74418065,"flixel.util.FlxSpriteUtil.screenWrap","flixel/util/FlxSpriteUtil.hx",104,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_137_bound,"flixel.util.FlxSpriteUtil","bound",0x7d89918f,"flixel.util.FlxSpriteUtil.bound","flixel/util/FlxSpriteUtil.hx",137,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_169_space,"flixel.util.FlxSpriteUtil","space",0x47f36e17,"flixel.util.FlxSpriteUtil.space","flixel/util/FlxSpriteUtil.hx",169,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_272_drawLine,"flixel.util.FlxSpriteUtil","drawLine",0x239cc967,"flixel.util.FlxSpriteUtil.drawLine","flixel/util/FlxSpriteUtil.hx",272,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_299_drawCurve,"flixel.util.FlxSpriteUtil","drawCurve",0xdee9dfdc,"flixel.util.FlxSpriteUtil.drawCurve","flixel/util/FlxSpriteUtil.hx",299,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_323_drawRect,"flixel.util.FlxSpriteUtil","drawRect",0x2790fe97,"flixel.util.FlxSpriteUtil.drawRect","flixel/util/FlxSpriteUtil.hx",323,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_347_drawRoundRect,"flixel.util.FlxSpriteUtil","drawRoundRect",0x00e2de3f,"flixel.util.FlxSpriteUtil.drawRoundRect","flixel/util/FlxSpriteUtil.hx",347,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_398_drawCircle,"flixel.util.FlxSpriteUtil","drawCircle",0x44dca643,"flixel.util.FlxSpriteUtil.drawCircle","flixel/util/FlxSpriteUtil.hx",398,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_438_drawEllipse,"flixel.util.FlxSpriteUtil","drawEllipse",0x1204b94b,"flixel.util.FlxSpriteUtil.drawEllipse","flixel/util/FlxSpriteUtil.hx",438,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_459_drawTriangle,"flixel.util.FlxSpriteUtil","drawTriangle",0x35f0a5bb,"flixel.util.FlxSpriteUtil.drawTriangle","flixel/util/FlxSpriteUtil.hx",459,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_481_drawPolygon,"flixel.util.FlxSpriteUtil","drawPolygon",0x190f7ae7,"flixel.util.FlxSpriteUtil.drawPolygon","flixel/util/FlxSpriteUtil.hx",481,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_502_beginDraw,"flixel.util.FlxSpriteUtil","beginDraw",0x53d0689e,"flixel.util.FlxSpriteUtil.beginDraw","flixel/util/FlxSpriteUtil.hx",502,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_520_endDraw,"flixel.util.FlxSpriteUtil","endDraw",0x51197d10,"flixel.util.FlxSpriteUtil.endDraw","flixel/util/FlxSpriteUtil.hx",520,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_535_updateSpriteGraphic,"flixel.util.FlxSpriteUtil","updateSpriteGraphic",0x448b866b,"flixel.util.FlxSpriteUtil.updateSpriteGraphic","flixel/util/FlxSpriteUtil.hx",535,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_560_setLineStyle,"flixel.util.FlxSpriteUtil","setLineStyle",0xc19fc36a,"flixel.util.FlxSpriteUtil.setLineStyle","flixel/util/FlxSpriteUtil.hx",560,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_589_getDefaultLineStyle,"flixel.util.FlxSpriteUtil","getDefaultLineStyle",0x36c9a563,"flixel.util.FlxSpriteUtil.getDefaultLineStyle","flixel/util/FlxSpriteUtil.hx",589,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_608_fill,"flixel.util.FlxSpriteUtil","fill",0x7a944252,"flixel.util.FlxSpriteUtil.fill","flixel/util/FlxSpriteUtil.hx",608,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_634_flicker,"flixel.util.FlxSpriteUtil","flicker",0xa3717289,"flixel.util.FlxSpriteUtil.flicker","flixel/util/FlxSpriteUtil.hx",634,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_644_isFlickering,"flixel.util.FlxSpriteUtil","isFlickering",0x05aae043,"flixel.util.FlxSpriteUtil.isFlickering","flixel/util/FlxSpriteUtil.hx",644,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_654_stopFlickering,"flixel.util.FlxSpriteUtil","stopFlickering",0x9d49141b,"flixel.util.FlxSpriteUtil.stopFlickering","flixel/util/FlxSpriteUtil.hx",654,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_672_fadeIn,"flixel.util.FlxSpriteUtil","fadeIn",0xd9639210,"flixel.util.FlxSpriteUtil.fadeIn","flixel/util/FlxSpriteUtil.hx",672,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_667_fadeIn,"flixel.util.FlxSpriteUtil","fadeIn",0xd9639210,"flixel.util.FlxSpriteUtil.fadeIn","flixel/util/FlxSpriteUtil.hx",667,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_685_fadeOut,"flixel.util.FlxSpriteUtil","fadeOut",0x5dc0d003,"flixel.util.FlxSpriteUtil.fadeOut","flixel/util/FlxSpriteUtil.hx",685,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_684_fadeOut,"flixel.util.FlxSpriteUtil","fadeOut",0x5dc0d003,"flixel.util.FlxSpriteUtil.fadeOut","flixel/util/FlxSpriteUtil.hx",684,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_691_alphaTween,"flixel.util.FlxSpriteUtil","alphaTween",0xe721b73c,"flixel.util.FlxSpriteUtil.alphaTween","flixel/util/FlxSpriteUtil.hx",691,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_38_boot,"flixel.util.FlxSpriteUtil","boot",0x77f3f801,"flixel.util.FlxSpriteUtil.boot","flixel/util/FlxSpriteUtil.hx",38,0xc647097f)
HX_LOCAL_STACK_FRAME(_hx_pos_aff86ac70b6ed09e_39_boot,"flixel.util.FlxSpriteUtil","boot",0x77f3f801,"flixel.util.FlxSpriteUtil.boot","flixel/util/FlxSpriteUtil.hx",39,0xc647097f)
namespace flixel{
namespace util{

void FlxSpriteUtil_obj::__construct() { }

Dynamic FlxSpriteUtil_obj::__CreateEmpty() { return new FlxSpriteUtil_obj; }

void *FlxSpriteUtil_obj::_hx_vtable = 0;

Dynamic FlxSpriteUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSpriteUtil_obj > _hx_result = new FlxSpriteUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxSpriteUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ba7b897;
}

 ::openfl::display::Sprite FlxSpriteUtil_obj::flashGfxSprite;

 ::openfl::display::Graphics FlxSpriteUtil_obj::flashGfx;

 ::flixel::FlxSprite FlxSpriteUtil_obj::alphaMask( ::flixel::FlxSprite output, ::Dynamic source, ::Dynamic mask){
            	HX_GC_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_55_alphaMask)
HXLINE(  56)		 ::openfl::display::BitmapData data = ::flixel::_hx_system::FlxAssets_obj::resolveBitmapData(source);
HXLINE(  57)		 ::openfl::display::BitmapData maskData = ::flixel::_hx_system::FlxAssets_obj::resolveBitmapData(mask);
HXLINE(  59)		bool _hx_tmp;
HXDLIN(  59)		if (hx::IsNotNull( data )) {
HXLINE(  59)			_hx_tmp = hx::IsNull( maskData );
            		}
            		else {
HXLINE(  59)			_hx_tmp = true;
            		}
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  61)			return null();
            		}
HXLINE(  64)		data = data->clone();
HXLINE(  65)		 ::openfl::geom::Rectangle _hx_tmp1 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,data->width,data->height);
HXDLIN(  65)		data->copyChannel(maskData,_hx_tmp1, ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null()),(int)8,(int)8);
HXLINE(  66)		output->set_pixels(data);
HXLINE(  67)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxSpriteUtil_obj,alphaMask,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::alphaMaskFlxSprite( ::flixel::FlxSprite sprite, ::flixel::FlxSprite mask, ::flixel::FlxSprite output){
            	HX_GC_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_84_alphaMaskFlxSprite)
HXLINE(  85)		sprite->drawFrame(null());
HXLINE(  86)		 ::openfl::display::BitmapData data = sprite->get_pixels()->clone();
HXLINE(  87)		 ::openfl::display::BitmapData _hx_tmp = mask->get_pixels();
HXDLIN(  87)		Float _hx_tmp1 = sprite->get_width();
HXDLIN(  87)		 ::openfl::geom::Rectangle _hx_tmp2 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp1,sprite->get_height());
HXDLIN(  87)		data->copyChannel(_hx_tmp,_hx_tmp2, ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null()),(int)8,(int)8);
HXLINE(  88)		output->set_pixels(data);
HXLINE(  89)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxSpriteUtil_obj,alphaMaskFlxSprite,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::screenWrap( ::flixel::FlxSprite sprite,hx::Null< bool >  __o_Left,hx::Null< bool >  __o_Right,hx::Null< bool >  __o_Top,hx::Null< bool >  __o_Bottom){
bool Left = __o_Left.Default(true);
bool Right = __o_Right.Default(true);
bool Top = __o_Top.Default(true);
bool Bottom = __o_Bottom.Default(true);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_104_screenWrap)
HXLINE( 105)		bool _hx_tmp;
HXDLIN( 105)		if (Left) {
HXLINE( 105)			Float sprite1 = sprite->x;
HXDLIN( 105)			_hx_tmp = ((sprite1 + ((Float)sprite->frameWidth / (Float)(int)2)) <= (int)0);
            		}
            		else {
HXLINE( 105)			_hx_tmp = false;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 107)			sprite->set_x(::flixel::FlxG_obj::width);
            		}
            		else {
HXLINE( 109)			bool _hx_tmp1;
HXDLIN( 109)			if (Right) {
HXLINE( 109)				_hx_tmp1 = (sprite->x >= ::flixel::FlxG_obj::width);
            			}
            			else {
HXLINE( 109)				_hx_tmp1 = false;
            			}
HXDLIN( 109)			if (_hx_tmp1) {
HXLINE( 111)				sprite->set_x((int)0);
            			}
            		}
HXLINE( 114)		bool _hx_tmp2;
HXDLIN( 114)		if (Top) {
HXLINE( 114)			Float sprite2 = sprite->y;
HXDLIN( 114)			_hx_tmp2 = ((sprite2 + ((Float)sprite->frameHeight / (Float)(int)2)) <= (int)0);
            		}
            		else {
HXLINE( 114)			_hx_tmp2 = false;
            		}
HXDLIN( 114)		if (_hx_tmp2) {
HXLINE( 116)			sprite->set_y(::flixel::FlxG_obj::height);
            		}
            		else {
HXLINE( 118)			bool _hx_tmp3;
HXDLIN( 118)			if (Bottom) {
HXLINE( 118)				_hx_tmp3 = (sprite->y >= ::flixel::FlxG_obj::height);
            			}
            			else {
HXLINE( 118)				_hx_tmp3 = false;
            			}
HXDLIN( 118)			if (_hx_tmp3) {
HXLINE( 120)				sprite->set_y((int)0);
            			}
            		}
HXLINE( 122)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxSpriteUtil_obj,screenWrap,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::bound( ::flixel::FlxSprite sprite,hx::Null< Float >  __o_MinX,hx::Null< Float >  __o_MaxX,hx::Null< Float >  __o_MinY,hx::Null< Float >  __o_MaxY){
Float MinX = __o_MinX.Default(0);
Float MaxX = __o_MaxX.Default(0);
Float MinY = __o_MinY.Default(0);
Float MaxY = __o_MaxY.Default(0);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_137_bound)
HXLINE( 138)		if ((MaxX <= (int)0)) {
HXLINE( 140)			MaxX = ::flixel::FlxG_obj::width;
            		}
HXLINE( 142)		if ((MaxY <= (int)0)) {
HXLINE( 144)			MaxY = ::flixel::FlxG_obj::height;
            		}
HXLINE( 147)		MaxX = (MaxX - sprite->frameWidth);
HXLINE( 148)		MaxY = (MaxY - sprite->frameHeight);
HXLINE( 150)		Float Value = sprite->x;
HXDLIN( 150)		Float lowerBound;
HXDLIN( 150)		bool lowerBound1;
HXDLIN( 150)		if (hx::IsNotNull( MinX )) {
HXLINE( 150)			lowerBound1 = (Value < MinX);
            		}
            		else {
HXLINE( 150)			lowerBound1 = false;
            		}
HXDLIN( 150)		if (lowerBound1) {
HXLINE( 150)			lowerBound = MinX;
            		}
            		else {
HXLINE( 150)			lowerBound = Value;
            		}
HXDLIN( 150)		Float _hx_tmp;
HXDLIN( 150)		bool _hx_tmp1;
HXDLIN( 150)		if (hx::IsNotNull( MaxX )) {
HXLINE( 150)			_hx_tmp1 = (lowerBound > MaxX);
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = false;
            		}
HXDLIN( 150)		if (_hx_tmp1) {
HXLINE( 150)			_hx_tmp = MaxX;
            		}
            		else {
HXLINE( 150)			_hx_tmp = lowerBound;
            		}
HXDLIN( 150)		sprite->set_x(_hx_tmp);
HXLINE( 151)		Float Value1 = sprite->y;
HXDLIN( 151)		Float lowerBound2;
HXDLIN( 151)		bool lowerBound3;
HXDLIN( 151)		if (hx::IsNotNull( MinY )) {
HXLINE( 151)			lowerBound3 = (Value1 < MinY);
            		}
            		else {
HXLINE( 151)			lowerBound3 = false;
            		}
HXDLIN( 151)		if (lowerBound3) {
HXLINE( 151)			lowerBound2 = MinY;
            		}
            		else {
HXLINE( 151)			lowerBound2 = Value1;
            		}
HXDLIN( 151)		Float _hx_tmp2;
HXDLIN( 151)		bool _hx_tmp3;
HXDLIN( 151)		if (hx::IsNotNull( MaxY )) {
HXLINE( 151)			_hx_tmp3 = (lowerBound2 > MaxY);
            		}
            		else {
HXLINE( 151)			_hx_tmp3 = false;
            		}
HXDLIN( 151)		if (_hx_tmp3) {
HXLINE( 151)			_hx_tmp2 = MaxY;
            		}
            		else {
HXLINE( 151)			_hx_tmp2 = lowerBound2;
            		}
HXDLIN( 151)		sprite->set_y(_hx_tmp2);
HXLINE( 153)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxSpriteUtil_obj,bound,return )

void FlxSpriteUtil_obj::space(::Array< ::Dynamic> objects,Float startX,Float startY, ::Dynamic horizontalSpacing, ::Dynamic verticalSpacing,hx::Null< bool >  __o_spaceFromBounds, ::Dynamic position){
bool spaceFromBounds = __o_spaceFromBounds.Default(false);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_169_space)
HXLINE( 170)		Float prevWidth = (int)0;
HXLINE( 171)		Float runningX = (int)0;
HXLINE( 173)		if (hx::IsNotNull( horizontalSpacing )) {
HXLINE( 175)			if (spaceFromBounds) {
HXLINE( 177)				prevWidth = objects->__get((int)0).StaticCast<  ::flixel::FlxObject >()->get_width();
            			}
HXLINE( 179)			runningX = startX;
            		}
            		else {
HXLINE( 183)			runningX = objects->__get((int)0).StaticCast<  ::flixel::FlxObject >()->x;
            		}
HXLINE( 186)		Float prevHeight = (int)0;
HXLINE( 187)		Float runningY = (int)0;
HXLINE( 189)		if (hx::IsNotNull( verticalSpacing )) {
HXLINE( 191)			if (spaceFromBounds) {
HXLINE( 193)				prevHeight = objects->__get((int)0).StaticCast<  ::flixel::FlxObject >()->get_height();
            			}
HXLINE( 195)			runningY = startY;
            		}
            		else {
HXLINE( 199)			runningY = objects->__get((int)0).StaticCast<  ::flixel::FlxObject >()->y;
            		}
HXLINE( 202)		if (hx::IsNotNull( position )) {
HXLINE( 204)			position(objects->__get((int)0).StaticCast<  ::flixel::FlxObject >(),runningX,runningY);
            		}
            		else {
HXLINE( 208)			objects->__get((int)0).StaticCast<  ::flixel::FlxObject >()->set_x(runningX);
HXLINE( 209)			objects->__get((int)0).StaticCast<  ::flixel::FlxObject >()->set_y(runningY);
            		}
HXLINE( 212)		Float curX = (int)0;
HXLINE( 213)		Float curY = (int)0;
HXLINE( 215)		{
HXLINE( 215)			int _g1 = (int)1;
HXDLIN( 215)			int _g = objects->length;
HXDLIN( 215)			while((_g1 < _g)){
HXLINE( 215)				_g1 = (_g1 + (int)1);
HXDLIN( 215)				int i = (_g1 - (int)1);
HXLINE( 217)				 ::flixel::FlxObject object = objects->__get(i).StaticCast<  ::flixel::FlxObject >();
HXLINE( 219)				if (hx::IsNotNull( horizontalSpacing )) {
HXLINE( 221)					curX = ((runningX + prevWidth) + horizontalSpacing);
HXLINE( 222)					runningX = curX;
            				}
            				else {
HXLINE( 226)					curX = object->x;
            				}
HXLINE( 229)				if (hx::IsNotNull( verticalSpacing )) {
HXLINE( 231)					curY = ((runningY + prevHeight) + verticalSpacing);
HXLINE( 232)					runningY = curY;
            				}
            				else {
HXLINE( 236)					curY = object->y;
            				}
HXLINE( 239)				if (hx::IsNotNull( position )) {
HXLINE( 241)					position(object,curX,curY);
            				}
            				else {
HXLINE( 245)					object->set_x(curX);
HXLINE( 246)					object->set_y(curY);
            				}
HXLINE( 249)				if (spaceFromBounds) {
HXLINE( 251)					prevWidth = object->get_width();
HXLINE( 252)					prevHeight = object->get_height();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxSpriteUtil_obj,space,(void))

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawLine( ::flixel::FlxSprite sprite,Float StartX,Float StartY,Float EndX,Float EndY, ::Dynamic lineStyle, ::Dynamic drawStyle){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_272_drawLine)
HXLINE( 273)		 ::Dynamic lineStyle1 = lineStyle;
HXDLIN( 273)		if (hx::IsNull( lineStyle1 )) {
HXLINE( 273)			lineStyle1 =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("color",63,71,5c,4a),(int)-1)
            				->setFixed(1,HX_("thickness",74,f1,66,5a),(int)1));
            		}
HXDLIN( 273)		if (hx::IsNull( lineStyle1->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 273)			lineStyle1->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            		}
HXDLIN( 273)		if (hx::IsNull( lineStyle1->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 273)			lineStyle1->__SetField(HX_("color",63,71,5c,4a),(int)-1,hx::paccDynamic);
            		}
HXDLIN( 273)		lineStyle = lineStyle1;
HXLINE( 274)		{
HXLINE( 274)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 274)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 274)				 ::Dynamic color;
HXDLIN( 274)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 274)					color = (int)-16777216;
            				}
            				else {
HXLINE( 274)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 274)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 274)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 274)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 274)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 274)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 274)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 274)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 274)			if (((int)0 != (int)0)) {
HXLINE( 274)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 274)				_hx_tmp->beginFill(((int)(int)0 & (int)(int)16777215),((Float)((int)((int)(int)0 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 275)		::flixel::util::FlxSpriteUtil_obj::flashGfx->moveTo(StartX,StartY);
HXLINE( 276)		::flixel::util::FlxSpriteUtil_obj::flashGfx->lineTo(EndX,EndY);
HXLINE( 277)		{
HXLINE( 277)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 277)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 278)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxSpriteUtil_obj,drawLine,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawCurve( ::flixel::FlxSprite sprite,Float StartX,Float StartY,Float EndX,Float EndY,Float ControlX,Float ControlY,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
int FillColor = __o_FillColor.Default(0);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_299_drawCurve)
HXLINE( 300)		 ::Dynamic lineStyle1 = lineStyle;
HXDLIN( 300)		if (hx::IsNull( lineStyle1 )) {
HXLINE( 300)			lineStyle1 =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("color",63,71,5c,4a),(int)-1)
            				->setFixed(1,HX_("thickness",74,f1,66,5a),(int)1));
            		}
HXDLIN( 300)		if (hx::IsNull( lineStyle1->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 300)			lineStyle1->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            		}
HXDLIN( 300)		if (hx::IsNull( lineStyle1->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 300)			lineStyle1->__SetField(HX_("color",63,71,5c,4a),(int)-1,hx::paccDynamic);
            		}
HXDLIN( 300)		lineStyle = lineStyle1;
HXLINE( 301)		{
HXLINE( 301)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 301)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 301)				 ::Dynamic color;
HXDLIN( 301)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 301)					color = (int)-16777216;
            				}
            				else {
HXLINE( 301)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 301)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 301)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 301)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 301)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 301)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 301)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 301)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 301)			if ((FillColor != (int)0)) {
HXLINE( 301)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 301)				_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 302)		::flixel::util::FlxSpriteUtil_obj::flashGfx->moveTo(StartX,StartY);
HXLINE( 303)		::flixel::util::FlxSpriteUtil_obj::flashGfx->curveTo(EndX,EndY,ControlX,ControlY);
HXLINE( 304)		{
HXLINE( 304)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 304)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 305)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FlxSpriteUtil_obj,drawCurve,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawRect( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
int FillColor = __o_FillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_323_drawRect)
HXLINE( 324)		{
HXLINE( 324)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 324)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 324)				 ::Dynamic color;
HXDLIN( 324)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 324)					color = (int)-16777216;
            				}
            				else {
HXLINE( 324)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 324)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 324)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 324)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 324)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 324)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 324)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 324)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 324)			if ((FillColor != (int)0)) {
HXLINE( 324)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 324)				_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 325)		::flixel::util::FlxSpriteUtil_obj::flashGfx->drawRect(X,Y,Width,Height);
HXLINE( 326)		{
HXLINE( 326)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 326)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 327)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlxSpriteUtil_obj,drawRect,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawRoundRect( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,Float EllipseWidth,Float EllipseHeight,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
int FillColor = __o_FillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_347_drawRoundRect)
HXLINE( 348)		{
HXLINE( 348)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 348)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 348)				 ::Dynamic color;
HXDLIN( 348)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 348)					color = (int)-16777216;
            				}
            				else {
HXLINE( 348)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 348)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 348)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 348)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 348)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 348)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 348)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 348)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 348)			if ((FillColor != (int)0)) {
HXLINE( 348)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 348)				_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 349)		::flixel::util::FlxSpriteUtil_obj::flashGfx->drawRoundRect(X,Y,Width,Height,EllipseWidth,EllipseHeight);
HXLINE( 350)		{
HXLINE( 350)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 350)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 351)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FlxSpriteUtil_obj,drawRoundRect,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawCircle( ::flixel::FlxSprite sprite,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Radius,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
Float X = __o_X.Default(-1);
Float Y = __o_Y.Default(-1);
Float Radius = __o_Radius.Default(-1);
int FillColor = __o_FillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_398_drawCircle)
HXLINE( 399)		bool _hx_tmp;
HXDLIN( 399)		if ((X != (int)-1)) {
HXLINE( 399)			_hx_tmp = (Y == (int)-1);
            		}
            		else {
HXLINE( 399)			_hx_tmp = true;
            		}
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 401)			 ::flixel::math::FlxPoint midPoint = sprite->getGraphicMidpoint(null());
HXLINE( 403)			if ((X == (int)-1)) {
HXLINE( 404)				X = (midPoint->x - sprite->x);
            			}
HXLINE( 405)			if ((Y == (int)-1)) {
HXLINE( 406)				Y = (midPoint->y - sprite->y);
            			}
HXLINE( 408)			midPoint->put();
            		}
HXLINE( 411)		if ((Radius < (int)1)) {
HXLINE( 413)			Float minVal = ::Math_obj::min(sprite->frameWidth,sprite->frameHeight);
HXLINE( 414)			Radius = ((Float)minVal / (Float)(int)2);
            		}
HXLINE( 417)		{
HXLINE( 417)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 417)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 417)				 ::Dynamic color;
HXDLIN( 417)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 417)					color = (int)-16777216;
            				}
            				else {
HXLINE( 417)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 417)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 417)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 417)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 417)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 417)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 417)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 417)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 417)			if ((FillColor != (int)0)) {
HXLINE( 417)				 ::openfl::display::Graphics _hx_tmp1 = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 417)				_hx_tmp1->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 418)		::flixel::util::FlxSpriteUtil_obj::flashGfx->drawCircle(X,Y,Radius);
HXLINE( 419)		{
HXLINE( 419)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 419)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 420)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxSpriteUtil_obj,drawCircle,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawEllipse( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
int FillColor = __o_FillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_438_drawEllipse)
HXLINE( 439)		{
HXLINE( 439)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 439)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 439)				 ::Dynamic color;
HXDLIN( 439)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 439)					color = (int)-16777216;
            				}
            				else {
HXLINE( 439)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 439)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 439)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 439)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 439)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 439)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 439)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 439)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 439)			if ((FillColor != (int)0)) {
HXLINE( 439)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 439)				_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 440)		::flixel::util::FlxSpriteUtil_obj::flashGfx->drawEllipse(X,Y,Width,Height);
HXLINE( 441)		{
HXLINE( 441)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 441)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 442)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlxSpriteUtil_obj,drawEllipse,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawTriangle( ::flixel::FlxSprite sprite,Float X,Float Y,Float Height,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
int FillColor = __o_FillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_459_drawTriangle)
HXLINE( 460)		{
HXLINE( 460)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 460)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 460)				 ::Dynamic color;
HXDLIN( 460)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 460)					color = (int)-16777216;
            				}
            				else {
HXLINE( 460)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 460)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 460)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 460)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 460)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 460)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 460)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 460)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 460)			if ((FillColor != (int)0)) {
HXLINE( 460)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 460)				_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 461)		 ::openfl::display::Graphics _hx_tmp1 = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 461)		_hx_tmp1->moveTo((X + ((Float)Height / (Float)(int)2)),Y);
HXLINE( 462)		 ::openfl::display::Graphics _hx_tmp2 = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 462)		_hx_tmp2->lineTo((X + Height),(Height + Y));
HXLINE( 463)		 ::openfl::display::Graphics _hx_tmp3 = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 463)		_hx_tmp3->lineTo(X,(Height + Y));
HXLINE( 464)		 ::openfl::display::Graphics _hx_tmp4 = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 464)		_hx_tmp4->lineTo((X + ((Float)Height / (Float)(int)2)),Y);
HXLINE( 465)		{
HXLINE( 465)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 465)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 466)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxSpriteUtil_obj,drawTriangle,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::drawPolygon( ::flixel::FlxSprite sprite,::Array< ::Dynamic> Vertices,hx::Null< int >  __o_FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
int FillColor = __o_FillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_481_drawPolygon)
HXLINE( 482)		{
HXLINE( 482)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXDLIN( 482)			if (hx::IsNotNull( lineStyle )) {
HXLINE( 482)				 ::Dynamic color;
HXDLIN( 482)				if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 482)					color = (int)-16777216;
            				}
            				else {
HXLINE( 482)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            				}
HXDLIN( 482)				if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 482)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            				}
HXDLIN( 482)				if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 482)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            				}
HXDLIN( 482)				if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 482)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            				}
HXDLIN( 482)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            			}
HXDLIN( 482)			if ((FillColor != (int)0)) {
HXLINE( 482)				 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 482)				_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            			}
            		}
HXLINE( 483)		 ::flixel::math::FlxPoint p = Vertices->shift().StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 484)		::flixel::util::FlxSpriteUtil_obj::flashGfx->moveTo(p->x,p->y);
HXLINE( 485)		{
HXLINE( 485)			int _g = (int)0;
HXDLIN( 485)			while((_g < Vertices->length)){
HXLINE( 485)				 ::flixel::math::FlxPoint p1 = Vertices->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 485)				_g = (_g + (int)1);
HXLINE( 487)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineTo(p1->x,p1->y);
            			}
            		}
HXLINE( 489)		{
HXLINE( 489)			::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXDLIN( 489)			::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
            		}
HXLINE( 490)		Vertices->unshift(p);
HXLINE( 491)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxSpriteUtil_obj,drawPolygon,return )

void FlxSpriteUtil_obj::beginDraw(int FillColor, ::Dynamic lineStyle){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_502_beginDraw)
HXLINE( 503)		::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 504)		if (hx::IsNotNull( lineStyle )) {
HXLINE( 504)			 ::Dynamic color;
HXDLIN( 504)			if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 504)				color = (int)-16777216;
            			}
            			else {
HXLINE( 504)				color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            			}
HXDLIN( 504)			if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 504)				lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            			}
HXDLIN( 504)			if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 504)				lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            			}
HXDLIN( 504)			if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 504)				lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            			}
HXDLIN( 504)			::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            		}
HXLINE( 506)		if ((FillColor != (int)0)) {
HXLINE( 508)			 ::openfl::display::Graphics _hx_tmp = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXDLIN( 508)			_hx_tmp->beginFill(((int)FillColor & (int)(int)16777215),((Float)((int)((int)FillColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSpriteUtil_obj,beginDraw,(void))

 ::flixel::FlxSprite FlxSpriteUtil_obj::endDraw( ::flixel::FlxSprite sprite, ::Dynamic drawStyle){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_520_endDraw)
HXLINE( 521)		::flixel::util::FlxSpriteUtil_obj::flashGfx->endFill();
HXLINE( 522)		::flixel::util::FlxSpriteUtil_obj::updateSpriteGraphic(sprite,drawStyle);
HXLINE( 523)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSpriteUtil_obj,endDraw,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::updateSpriteGraphic( ::flixel::FlxSprite sprite, ::Dynamic drawStyle){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_535_updateSpriteGraphic)
HXLINE( 536)		if (hx::IsNull( drawStyle )) {
HXLINE( 538)			drawStyle =  ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("smoothing",74,d5,e1,95),false));
            		}
            		else {
HXLINE( 540)			if (hx::IsNull( drawStyle->__Field(HX_("smoothing",74,d5,e1,95),hx::paccDynamic) )) {
HXLINE( 542)				drawStyle->__SetField(HX_("smoothing",74,d5,e1,95),false,hx::paccDynamic);
            			}
            		}
HXLINE( 545)		sprite->get_pixels()->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,( ( ::openfl::geom::Matrix)(drawStyle->__Field(HX_("matrix",41,36,c8,bb),hx::paccDynamic)) ),( ( ::openfl::geom::ColorTransform)(drawStyle->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic)) ),drawStyle->__Field(HX_("blendMode",54,e4,37,0c),hx::paccDynamic),( ( ::openfl::geom::Rectangle)(drawStyle->__Field(HX_("clipRect",14,90,6a,58),hx::paccDynamic)) ),drawStyle->__Field(HX_("smoothing",74,d5,e1,95),hx::paccDynamic));
HXLINE( 547)		sprite->dirty = true;
HXLINE( 548)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSpriteUtil_obj,updateSpriteGraphic,return )

void FlxSpriteUtil_obj::setLineStyle( ::Dynamic lineStyle){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_560_setLineStyle)
HXDLIN( 560)		if (hx::IsNotNull( lineStyle )) {
HXLINE( 562)			 ::Dynamic color;
HXDLIN( 562)			if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 562)				color = (int)-16777216;
            			}
            			else {
HXLINE( 562)				color = lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
            			}
HXLINE( 564)			if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 565)				lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            			}
HXLINE( 566)			if (hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic) )) {
HXLINE( 567)				lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,hx::paccDynamic);
            			}
HXLINE( 568)			if (hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic) )) {
HXLINE( 569)				lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),(int)3,hx::paccDynamic);
            			}
HXLINE( 571)			::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic),((int)color & (int)(int)16777215),((Float)((int)((int)color >> (int)(int)24) & (int)(int)255) / (Float)(int)255),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxSpriteUtil_obj,setLineStyle,(void))

 ::Dynamic FlxSpriteUtil_obj::getDefaultLineStyle( ::Dynamic lineStyle){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_589_getDefaultLineStyle)
HXLINE( 590)		if (hx::IsNull( lineStyle )) {
HXLINE( 591)			lineStyle =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("color",63,71,5c,4a),(int)-1)
            				->setFixed(1,HX_("thickness",74,f1,66,5a),(int)1));
            		}
HXLINE( 592)		if (hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 593)			lineStyle->__SetField(HX_("thickness",74,f1,66,5a),(int)1,hx::paccDynamic);
            		}
HXLINE( 594)		if (hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE( 595)			lineStyle->__SetField(HX_("color",63,71,5c,4a),(int)-1,hx::paccDynamic);
            		}
HXLINE( 597)		return lineStyle;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxSpriteUtil_obj,getDefaultLineStyle,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::fill( ::flixel::FlxSprite sprite,int FillColor){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_608_fill)
HXLINE( 609)		 ::openfl::display::BitmapData _hx_tmp = sprite->get_pixels();
HXDLIN( 609)		_hx_tmp->fillRect(sprite->get_pixels()->rect,FillColor);
HXLINE( 611)		 ::openfl::display::BitmapData _hx_tmp1 = sprite->get_pixels();
HXDLIN( 611)		if (hx::IsNotEq( _hx_tmp1,sprite->framePixels )) {
HXLINE( 613)			sprite->dirty = true;
            		}
HXLINE( 616)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSpriteUtil_obj,fill,return )

 ::flixel::effects::FlxFlicker FlxSpriteUtil_obj::flicker( ::flixel::FlxObject Object,hx::Null< Float >  __o_Duration,hx::Null< Float >  __o_Interval,hx::Null< bool >  __o_EndVisibility,hx::Null< bool >  __o_ForceRestart, ::Dynamic CompletionCallback, ::Dynamic ProgressCallback){
Float Duration = __o_Duration.Default(1);
Float Interval = __o_Interval.Default(((Float)0.04));
bool EndVisibility = __o_EndVisibility.Default(true);
bool ForceRestart = __o_ForceRestart.Default(true);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_634_flicker)
HXDLIN( 634)		return ::flixel::effects::FlxFlicker_obj::flicker(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxSpriteUtil_obj,flicker,return )

bool FlxSpriteUtil_obj::isFlickering( ::flixel::FlxObject Object){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_644_isFlickering)
HXDLIN( 644)		return ::flixel::effects::FlxFlicker_obj::isFlickering(Object);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxSpriteUtil_obj,isFlickering,return )

 ::flixel::FlxObject FlxSpriteUtil_obj::stopFlickering( ::flixel::FlxObject Object){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_654_stopFlickering)
HXLINE( 655)		::flixel::effects::FlxFlicker_obj::stopFlickering(Object);
HXLINE( 656)		return Object;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxSpriteUtil_obj,stopFlickering,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::fadeIn( ::flixel::FlxSprite sprite,hx::Null< Float >  __o_Duration, ::Dynamic ResetAlpha, ::Dynamic OnComplete){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,a1) HXARGC(1)
            		void _hx_run(Float f){
            			HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_672_fadeIn)
HXLINE( 672)			::flixel::util::FlxSpriteUtil_obj::alphaTween(a1,f);
            		}
            		HX_END_LOCAL_FUNC1((void))

Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_667_fadeIn)
HXLINE( 668)		if (ResetAlpha) {
HXLINE( 670)			sprite->set_alpha((int)0);
            		}
HXLINE( 672)		 ::flixel::FlxSprite a1 = sprite;
HXDLIN( 672)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1));
HXDLIN( 672)		::flixel::tweens::FlxTween_obj::num(sprite->alpha,(int)1,Duration, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d),OnComplete)),_hx_tmp);
HXLINE( 673)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxSpriteUtil_obj,fadeIn,return )

 ::flixel::FlxSprite FlxSpriteUtil_obj::fadeOut( ::flixel::FlxSprite sprite,hx::Null< Float >  __o_Duration, ::Dynamic OnComplete){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,a1) HXARGC(1)
            		void _hx_run(Float f){
            			HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_685_fadeOut)
HXLINE( 685)			::flixel::util::FlxSpriteUtil_obj::alphaTween(a1,f);
            		}
            		HX_END_LOCAL_FUNC1((void))

Float Duration = __o_Duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_684_fadeOut)
HXLINE( 685)		 ::flixel::FlxSprite a1 = sprite;
HXDLIN( 685)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1));
HXDLIN( 685)		::flixel::tweens::FlxTween_obj::num(sprite->alpha,(int)0,Duration, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d),OnComplete)),_hx_tmp);
HXLINE( 686)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxSpriteUtil_obj,fadeOut,return )

void FlxSpriteUtil_obj::alphaTween( ::flixel::FlxSprite sprite,Float f){
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_691_alphaTween)
HXDLIN( 691)		sprite->set_alpha(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSpriteUtil_obj,alphaTween,(void))


FlxSpriteUtil_obj::FlxSpriteUtil_obj()
{
}

bool FlxSpriteUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { outValue = fill_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bound") ) { outValue = bound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"space") ) { outValue = space_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fadeIn") ) { outValue = fadeIn_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endDraw") ) { outValue = endDraw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flicker") ) { outValue = flicker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fadeOut") ) { outValue = fadeOut_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"flashGfx") ) { outValue = ( flashGfx ); return true; }
		if (HX_FIELD_EQ(inName,"drawLine") ) { outValue = drawLine_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawRect") ) { outValue = drawRect_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"alphaMask") ) { outValue = alphaMask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawCurve") ) { outValue = drawCurve_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"beginDraw") ) { outValue = beginDraw_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"screenWrap") ) { outValue = screenWrap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { outValue = drawCircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alphaTween") ) { outValue = alphaTween_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { outValue = drawEllipse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawPolygon") ) { outValue = drawPolygon_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawTriangle") ) { outValue = drawTriangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setLineStyle") ) { outValue = setLineStyle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isFlickering") ) { outValue = isFlickering_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { outValue = drawRoundRect_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flashGfxSprite") ) { outValue = ( flashGfxSprite ); return true; }
		if (HX_FIELD_EQ(inName,"stopFlickering") ) { outValue = stopFlickering_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"alphaMaskFlxSprite") ) { outValue = alphaMaskFlxSprite_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateSpriteGraphic") ) { outValue = updateSpriteGraphic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDefaultLineStyle") ) { outValue = getDefaultLineStyle_dyn(); return true; }
	}
	return false;
}

bool FlxSpriteUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"flashGfx") ) { flashGfx=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flashGfxSprite") ) { flashGfxSprite=ioValue.Cast<  ::openfl::display::Sprite >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxSpriteUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxSpriteUtil_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(void *) &FlxSpriteUtil_obj::flashGfxSprite,HX_HCSTRING("flashGfxSprite","\x8e","\x26","\x3f","\xab")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(void *) &FlxSpriteUtil_obj::flashGfx,HX_HCSTRING("flashGfx","\xa9","\xb1","\xce","\x99")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FlxSpriteUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSpriteUtil_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxSpriteUtil_obj::flashGfxSprite,"flashGfxSprite");
	HX_MARK_MEMBER_NAME(FlxSpriteUtil_obj::flashGfx,"flashGfx");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSpriteUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSpriteUtil_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxSpriteUtil_obj::flashGfxSprite,"flashGfxSprite");
	HX_VISIT_MEMBER_NAME(FlxSpriteUtil_obj::flashGfx,"flashGfx");
};

#endif

hx::Class FlxSpriteUtil_obj::__mClass;

static ::String FlxSpriteUtil_obj_sStaticFields[] = {
	HX_HCSTRING("flashGfxSprite","\x8e","\x26","\x3f","\xab"),
	HX_HCSTRING("flashGfx","\xa9","\xb1","\xce","\x99"),
	HX_HCSTRING("alphaMask","\x6a","\x1b","\x50","\xe2"),
	HX_HCSTRING("alphaMaskFlxSprite","\x4d","\xfd","\xae","\x12"),
	HX_HCSTRING("screenWrap","\x56","\xc7","\x35","\xc7"),
	HX_HCSTRING("bound","\x3e","\xb0","\xfc","\xb6"),
	HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"),
	HX_HCSTRING("drawLine","\x18","\xc2","\x1c","\x5c"),
	HX_HCSTRING("drawCurve","\x0b","\x82","\x63","\x16"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawTriangle","\xec","\x4a","\xb9","\x63"),
	HX_HCSTRING("drawPolygon","\xd6","\x46","\xd9","\x5b"),
	HX_HCSTRING("beginDraw","\xcd","\x0a","\x4a","\x8b"),
	HX_HCSTRING("endDraw","\x7f","\xe5","\x94","\x24"),
	HX_HCSTRING("updateSpriteGraphic","\x5a","\x59","\xf9","\x55"),
	HX_HCSTRING("setLineStyle","\x9b","\x68","\x68","\xef"),
	HX_HCSTRING("getDefaultLineStyle","\x52","\x78","\x37","\x48"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("flicker","\xf8","\xda","\xec","\x76"),
	HX_HCSTRING("isFlickering","\x74","\x85","\x73","\x33"),
	HX_HCSTRING("stopFlickering","\x8c","\x27","\x6a","\x4a"),
	HX_HCSTRING("fadeIn","\x81","\x4c","\xab","\xe4"),
	HX_HCSTRING("fadeOut","\x72","\x38","\x3c","\x31"),
	HX_HCSTRING("alphaTween","\x2d","\xfe","\x15","\x3a"),
	::String(null())
};

void FlxSpriteUtil_obj::__register()
{
	hx::Object *dummy = new FlxSpriteUtil_obj;
	FlxSpriteUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.util.FlxSpriteUtil","\xff","\x7e","\x4e","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxSpriteUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxSpriteUtil_obj::__SetStatic;
	__mClass->mMarkFunc = FlxSpriteUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxSpriteUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxSpriteUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSpriteUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSpriteUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSpriteUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxSpriteUtil_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_38_boot)
HXDLIN(  38)		flashGfxSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_aff86ac70b6ed09e_39_boot)
HXDLIN(  39)		flashGfx = ::flixel::util::FlxSpriteUtil_obj::flashGfxSprite->get_graphics();
            	}
}

} // end namespace flixel
} // end namespace util
