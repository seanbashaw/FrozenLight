// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_18_new,"flixel.group.FlxTypedGroup","new",0x9772c4d8,"flixel.group.FlxTypedGroup.new","flixel/group/FlxGroup.hx",18,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_129_destroy,"flixel.group.FlxTypedGroup","destroy",0x8044bd72,"flixel.group.FlxTypedGroup.destroy","flixel/group/FlxGroup.hx",129,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_156_update,"flixel.group.FlxTypedGroup","update",0x4e08ac91,"flixel.group.FlxTypedGroup.update","flixel/group/FlxGroup.hx",156,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_175_draw,"flixel.group.FlxTypedGroup","draw",0xe667208c,"flixel.group.FlxTypedGroup.draw","flixel/group/FlxGroup.hx",175,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_201_add,"flixel.group.FlxTypedGroup","add",0x9768e699,"flixel.group.FlxTypedGroup.add","flixel/group/FlxGroup.hx",201,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_256_insert,"flixel.group.FlxTypedGroup","insert",0x64e069c1,"flixel.group.FlxTypedGroup.insert","flixel/group/FlxGroup.hx",256,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_318_recycle,"flixel.group.FlxTypedGroup","recycle",0x934aa08b,"flixel.group.FlxTypedGroup.recycle","flixel/group/FlxGroup.hx",318,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_361_recycleCreateObject,"flixel.group.FlxTypedGroup","recycleCreateObject",0x87e5d006,"flixel.group.FlxTypedGroup.recycleCreateObject","flixel/group/FlxGroup.hx",361,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_380_remove,"flixel.group.FlxTypedGroup","remove",0xcb8bc2cc,"flixel.group.FlxTypedGroup.remove","flixel/group/FlxGroup.hx",380,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_412_replace,"flixel.group.FlxTypedGroup","replace",0x06e6d8ac,"flixel.group.FlxTypedGroup.replace","flixel/group/FlxGroup.hx",412,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_440_sort,"flixel.group.FlxTypedGroup","sort",0xf04f1be6,"flixel.group.FlxTypedGroup.sort","flixel/group/FlxGroup.hx",440,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_453_getFirstAvailable,"flixel.group.FlxTypedGroup","getFirstAvailable",0x3f88c127,"flixel.group.FlxTypedGroup.getFirstAvailable","flixel/group/FlxGroup.hx",453,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_481_getFirstNull,"flixel.group.FlxTypedGroup","getFirstNull",0xc17e73e9,"flixel.group.FlxTypedGroup.getFirstNull","flixel/group/FlxGroup.hx",481,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_501_getFirstExisting,"flixel.group.FlxTypedGroup","getFirstExisting",0x314444ed,"flixel.group.FlxTypedGroup.getFirstExisting","flixel/group/FlxGroup.hx",501,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_523_getFirstAlive,"flixel.group.FlxTypedGroup","getFirstAlive",0x0afc442b,"flixel.group.FlxTypedGroup.getFirstAlive","flixel/group/FlxGroup.hx",523,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_545_getFirstDead,"flixel.group.FlxTypedGroup","getFirstDead",0xbad62406,"flixel.group.FlxTypedGroup.getFirstDead","flixel/group/FlxGroup.hx",545,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_566_countLiving,"flixel.group.FlxTypedGroup","countLiving",0x0ee705d0,"flixel.group.FlxTypedGroup.countLiving","flixel/group/FlxGroup.hx",566,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_593_countDead,"flixel.group.FlxTypedGroup","countDead",0x0964718b,"flixel.group.FlxTypedGroup.countDead","flixel/group/FlxGroup.hx",593,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_623_getRandom,"flixel.group.FlxTypedGroup","getRandom",0xe8c349b1,"flixel.group.FlxTypedGroup.getRandom","flixel/group/FlxGroup.hx",623,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_637_clear,"flixel.group.FlxTypedGroup","clear",0x1c7a7405,"flixel.group.FlxTypedGroup.clear","flixel/group/FlxGroup.hx",637,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_657_kill,"flixel.group.FlxTypedGroup","kill",0xeb00d426,"flixel.group.FlxTypedGroup.kill","flixel/group/FlxGroup.hx",657,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_676_revive,"flixel.group.FlxTypedGroup","revive",0xd17a20dd,"flixel.group.FlxTypedGroup.revive","flixel/group/FlxGroup.hx",676,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_696_iterator,"flixel.group.FlxTypedGroup","iterator",0x7e9a2276,"flixel.group.FlxTypedGroup.iterator","flixel/group/FlxGroup.hx",696,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_706_forEach,"flixel.group.FlxTypedGroup","forEach",0x207cba22,"flixel.group.FlxTypedGroup.forEach","flixel/group/FlxGroup.hx",706,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_735_forEachAlive,"flixel.group.FlxTypedGroup","forEachAlive",0x4c021e4b,"flixel.group.FlxTypedGroup.forEachAlive","flixel/group/FlxGroup.hx",735,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_764_forEachDead,"flixel.group.FlxTypedGroup","forEachDead",0x5740ede6,"flixel.group.FlxTypedGroup.forEachDead","flixel/group/FlxGroup.hx",764,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_793_forEachExists,"flixel.group.FlxTypedGroup","forEachExists",0xb812919e,"flixel.group.FlxTypedGroup.forEachExists","flixel/group/FlxGroup.hx",793,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_823_forEachOfType,"flixel.group.FlxTypedGroup","forEachOfType",0x4c90cb33,"flixel.group.FlxTypedGroup.forEachOfType","flixel/group/FlxGroup.hx",823,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_848_set_maxSize,"flixel.group.FlxTypedGroup","set_maxSize",0x3b478d20,"flixel.group.FlxTypedGroup.set_maxSize","flixel/group/FlxGroup.hx",848,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_883_get_memberAdded,"flixel.group.FlxTypedGroup","get_memberAdded",0xd5201c15,"flixel.group.FlxTypedGroup.get_memberAdded","flixel/group/FlxGroup.hx",883,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_892_get_memberRemoved,"flixel.group.FlxTypedGroup","get_memberRemoved",0xd0fca635,"flixel.group.FlxTypedGroup.get_memberRemoved","flixel/group/FlxGroup.hx",892,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_26_overlaps,"flixel.group.FlxTypedGroup","overlaps",0x302aab94,"flixel.group.FlxTypedGroup.overlaps","flixel/group/FlxGroup.hx",26,0x1e89d58e)
HX_LOCAL_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_50_resolveGroup,"flixel.group.FlxTypedGroup","resolveGroup",0x84c4b53b,"flixel.group.FlxTypedGroup.resolveGroup","flixel/group/FlxGroup.hx",50,0x1e89d58e)
namespace flixel{
namespace group{

void FlxTypedGroup_obj::__construct(hx::Null< int >  __o_MaxSize){
int MaxSize = __o_MaxSize.Default(0);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_18_new)
HXLINE( 104)		this->_marker = (int)0;
HXLINE(  79)		this->length = (int)0;
HXLINE( 111)		super::__construct();
HXLINE( 113)		this->members = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 114)		this->set_maxSize(::Std_obj::_hx_int(::Math_obj::abs(MaxSize)));
HXLINE( 115)		this->flixelType = (int)2;
            	}

Dynamic FlxTypedGroup_obj::__CreateEmpty() { return new FlxTypedGroup_obj; }

void *FlxTypedGroup_obj::_hx_vtable = 0;

Dynamic FlxTypedGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedGroup_obj > _hx_result = new FlxTypedGroup_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxTypedGroup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void FlxTypedGroup_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_129_destroy)
HXLINE( 130)		this->super::destroy();
HXLINE( 132)		::flixel::util::FlxDestroyUtil_obj::destroy(this->_memberAdded);
HXLINE( 133)		::flixel::util::FlxDestroyUtil_obj::destroy(this->_memberRemoved);
HXLINE( 135)		if (hx::IsNotNull( this->members )) {
HXLINE( 137)			int i = (int)0;
HXLINE( 138)			 ::flixel::FlxBasic basic = null();
HXLINE( 140)			while((i < this->length)){
HXLINE( 142)				::cpp::VirtualArray basic1 = this->members;
HXDLIN( 142)				i = (i + (int)1);
HXDLIN( 142)				basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 144)				if (hx::IsNotNull( basic )) {
HXLINE( 145)					basic->destroy();
            				}
            			}
HXLINE( 148)			this->members = null();
            		}
            	}


void FlxTypedGroup_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_156_update)
HXLINE( 157)		int i = (int)0;
HXLINE( 158)		 ::flixel::FlxBasic basic = null();
HXLINE( 160)		while((i < this->length)){
HXLINE( 162)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 162)			i = (i + (int)1);
HXDLIN( 162)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 164)			bool _hx_tmp;
HXDLIN( 164)			bool _hx_tmp1;
HXDLIN( 164)			if (hx::IsNotNull( basic )) {
HXLINE( 164)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 164)				_hx_tmp1 = false;
            			}
HXDLIN( 164)			if (_hx_tmp1) {
HXLINE( 164)				_hx_tmp = basic->active;
            			}
            			else {
HXLINE( 164)				_hx_tmp = false;
            			}
HXDLIN( 164)			if (_hx_tmp) {
HXLINE( 166)				basic->update(elapsed);
            			}
            		}
            	}


void FlxTypedGroup_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_175_draw)
HXLINE( 176)		int i = (int)0;
HXLINE( 177)		 ::flixel::FlxBasic basic = null();
HXLINE( 179)		while((i < this->length)){
HXLINE( 181)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 181)			i = (i + (int)1);
HXDLIN( 181)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 183)			bool _hx_tmp;
HXDLIN( 183)			bool _hx_tmp1;
HXDLIN( 183)			if (hx::IsNotNull( basic )) {
HXLINE( 183)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 183)				_hx_tmp1 = false;
            			}
HXDLIN( 183)			if (_hx_tmp1) {
HXLINE( 183)				_hx_tmp = basic->visible;
            			}
            			else {
HXLINE( 183)				_hx_tmp = false;
            			}
HXDLIN( 183)			if (_hx_tmp) {
HXLINE( 185)				basic->draw();
            			}
            		}
            	}


 ::Dynamic FlxTypedGroup_obj::add( ::Dynamic Object){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_201_add)
HXLINE( 202)		if (hx::IsNull( Object )) {
HXLINE( 204)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXLINE( 205)			return null();
            		}
HXLINE( 209)		if ((this->members->indexOf(Object,null()) >= (int)0)) {
HXLINE( 210)			return Object;
            		}
HXLINE( 213)		int index = this->getFirstNull();
HXLINE( 214)		if ((index != (int)-1)) {
HXLINE( 216)			this->members->set(index,Object);
HXLINE( 218)			if ((index >= this->length)) {
HXLINE( 220)				this->length = (index + (int)1);
            			}
HXLINE( 223)			if (hx::IsNotNull( this->_memberAdded )) {
HXLINE( 224)				this->_memberAdded->dispatch(Object);
            			}
HXLINE( 226)			return Object;
            		}
HXLINE( 230)		bool _hx_tmp;
HXDLIN( 230)		if ((this->maxSize > (int)0)) {
HXLINE( 230)			_hx_tmp = (this->length >= this->maxSize);
            		}
            		else {
HXLINE( 230)			_hx_tmp = false;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 231)			return Object;
            		}
HXLINE( 234)		this->members->push(Object);
HXLINE( 235)		this->length++;
HXLINE( 237)		if (hx::IsNotNull( this->_memberAdded )) {
HXLINE( 238)			this->_memberAdded->dispatch(Object);
            		}
HXLINE( 240)		return Object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,add,return )

 ::Dynamic FlxTypedGroup_obj::insert(int position, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_256_insert)
HXLINE( 257)		if (hx::IsNull( object )) {
HXLINE( 259)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXLINE( 260)			return null();
            		}
HXLINE( 264)		if ((this->members->indexOf(object,null()) >= (int)0)) {
HXLINE( 265)			return object;
            		}
HXLINE( 268)		bool _hx_tmp;
HXDLIN( 268)		if ((position < this->length)) {
HXLINE( 268)			_hx_tmp = hx::IsNull( this->members->__get(position) );
            		}
            		else {
HXLINE( 268)			_hx_tmp = false;
            		}
HXDLIN( 268)		if (_hx_tmp) {
HXLINE( 270)			this->members->set(position,object);
HXLINE( 272)			if (hx::IsNotNull( this->_memberAdded )) {
HXLINE( 273)				this->_memberAdded->dispatch(object);
            			}
HXLINE( 275)			return object;
            		}
HXLINE( 279)		bool _hx_tmp1;
HXDLIN( 279)		if ((this->maxSize > (int)0)) {
HXLINE( 279)			_hx_tmp1 = (this->length >= this->maxSize);
            		}
            		else {
HXLINE( 279)			_hx_tmp1 = false;
            		}
HXDLIN( 279)		if (_hx_tmp1) {
HXLINE( 280)			return object;
            		}
HXLINE( 283)		this->members->insert(position,object);
HXLINE( 284)		this->length++;
HXLINE( 286)		if (hx::IsNotNull( this->_memberAdded )) {
HXLINE( 287)			this->_memberAdded->dispatch(object);
            		}
HXLINE( 289)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,insert,return )

 ::Dynamic FlxTypedGroup_obj::recycle(hx::Class ObjectClass, ::Dynamic ObjectFactory,hx::Null< bool >  __o_Force,hx::Null< bool >  __o_Revive){
bool Force = __o_Force.Default(false);
bool Revive = __o_Revive.Default(true);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_318_recycle)
HXLINE( 319)		 ::flixel::FlxBasic basic = null();
HXLINE( 322)		if ((this->maxSize > (int)0)) {
HXLINE( 325)			if ((this->length < this->maxSize)) {
HXLINE( 327)				 ::Dynamic object = null();
HXDLIN( 327)				if (hx::IsNotNull( ObjectFactory )) {
HXLINE( 327)					object = ObjectFactory();
HXDLIN( 327)					this->add(object);
            				}
            				else {
HXLINE( 327)					if (hx::IsNotNull( ObjectClass )) {
HXLINE( 327)						object = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 327)						this->add(object);
            					}
            				}
HXDLIN( 327)				return object;
            			}
            			else {
HXLINE( 332)				::cpp::VirtualArray basic1 = this->members;
HXDLIN( 332)				basic = ( ( ::flixel::FlxBasic)(basic1->__get(this->_marker++)) );
HXLINE( 334)				if ((this->_marker >= this->maxSize)) {
HXLINE( 335)					this->_marker = (int)0;
            				}
HXLINE( 337)				if (Revive) {
HXLINE( 338)					basic->revive();
            				}
HXLINE( 340)				return basic;
            			}
            		}
            		else {
HXLINE( 346)			basic = ( ( ::flixel::FlxBasic)(this->getFirstAvailable(ObjectClass,Force)) );
HXLINE( 348)			if (hx::IsNotNull( basic )) {
HXLINE( 350)				if (Revive) {
HXLINE( 351)					basic->revive();
            				}
HXLINE( 352)				return basic;
            			}
HXLINE( 355)			 ::Dynamic object1 = null();
HXDLIN( 355)			if (hx::IsNotNull( ObjectFactory )) {
HXLINE( 355)				object1 = ObjectFactory();
HXDLIN( 355)				this->add(object1);
            			}
            			else {
HXLINE( 355)				if (hx::IsNotNull( ObjectClass )) {
HXLINE( 355)					object1 = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 355)					this->add(object1);
            				}
            			}
HXDLIN( 355)			return object1;
            		}
HXLINE( 322)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypedGroup_obj,recycle,return )

 ::Dynamic FlxTypedGroup_obj::recycleCreateObject(hx::Class ObjectClass, ::Dynamic ObjectFactory){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_361_recycleCreateObject)
HXLINE( 362)		 ::Dynamic object = null();
HXLINE( 364)		if (hx::IsNotNull( ObjectFactory )) {
HXLINE( 365)			object = ObjectFactory();
HXDLIN( 365)			this->add(object);
            		}
            		else {
HXLINE( 366)			if (hx::IsNotNull( ObjectClass )) {
HXLINE( 367)				object = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 367)				this->add(object);
            			}
            		}
HXLINE( 369)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,recycleCreateObject,return )

 ::Dynamic FlxTypedGroup_obj::remove( ::Dynamic Object,hx::Null< bool >  __o_Splice){
bool Splice = __o_Splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_380_remove)
HXLINE( 381)		if (hx::IsNull( this->members )) {
HXLINE( 382)			return null();
            		}
HXLINE( 384)		int index = this->members->indexOf(Object,null());
HXLINE( 386)		if ((index < (int)0)) {
HXLINE( 387)			return null();
            		}
HXLINE( 389)		if (Splice) {
HXLINE( 391)			this->members->splice(index,(int)1);
HXLINE( 392)			this->length--;
            		}
            		else {
HXLINE( 395)			this->members->set(index,null());
            		}
HXLINE( 397)		if (hx::IsNotNull( this->_memberRemoved )) {
HXLINE( 398)			this->_memberRemoved->dispatch(Object);
            		}
HXLINE( 400)		return Object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,remove,return )

 ::Dynamic FlxTypedGroup_obj::replace( ::Dynamic OldObject, ::Dynamic NewObject){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_412_replace)
HXLINE( 413)		int index = this->members->indexOf(OldObject,null());
HXLINE( 415)		if ((index < (int)0)) {
HXLINE( 416)			return null();
            		}
HXLINE( 418)		this->members->set(index,NewObject);
HXLINE( 420)		if (hx::IsNotNull( this->_memberRemoved )) {
HXLINE( 421)			this->_memberRemoved->dispatch(OldObject);
            		}
HXLINE( 422)		if (hx::IsNotNull( this->_memberAdded )) {
HXLINE( 423)			this->_memberAdded->dispatch(NewObject);
            		}
HXLINE( 425)		return NewObject;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,replace,return )

void FlxTypedGroup_obj::sort( ::Dynamic Function,hx::Null< int >  __o_Order){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,int,a1) HXARGC(2)
            		int _hx_run( ::Dynamic a2, ::Dynamic a3){
            			HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_440_sort)
HXDLIN( 440)			return ( (int)(f(a1,a2,a3)) );
            		}
            		HX_END_LOCAL_FUNC2(return)

int Order = __o_Order.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_440_sort)
HXDLIN( 440)		 ::Dynamic f = Function;
HXDLIN( 440)		int a1 = Order;
HXDLIN( 440)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 440)		this->members->sort(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,sort,(void))

 ::Dynamic FlxTypedGroup_obj::getFirstAvailable(hx::Class ObjectClass,hx::Null< bool >  __o_Force){
bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_453_getFirstAvailable)
HXLINE( 454)		int i = (int)0;
HXLINE( 455)		 ::flixel::FlxBasic basic = null();
HXLINE( 457)		while((i < this->length)){
HXLINE( 459)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 459)			i = (i + (int)1);
HXDLIN( 459)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 461)			bool _hx_tmp;
HXDLIN( 461)			bool _hx_tmp1;
HXDLIN( 461)			if (hx::IsNotNull( basic )) {
HXLINE( 461)				_hx_tmp1 = !(basic->exists);
            			}
            			else {
HXLINE( 461)				_hx_tmp1 = false;
            			}
HXDLIN( 461)			if (_hx_tmp1) {
HXLINE( 461)				if (hx::IsNotNull( ObjectClass )) {
HXLINE( 461)					_hx_tmp = ::Std_obj::is(basic,ObjectClass);
            				}
            				else {
HXLINE( 461)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 461)				_hx_tmp = false;
            			}
HXDLIN( 461)			if (_hx_tmp) {
HXLINE( 463)				bool _hx_tmp2;
HXDLIN( 463)				if (Force) {
HXLINE( 463)					::String _hx_tmp3 = ::Type_obj::getClassName(::Type_obj::getClass(basic));
HXDLIN( 463)					_hx_tmp2 = (_hx_tmp3 != ::Type_obj::getClassName(ObjectClass));
            				}
            				else {
HXLINE( 463)					_hx_tmp2 = false;
            				}
HXDLIN( 463)				if (_hx_tmp2) {
HXLINE( 465)					continue;
            				}
HXLINE( 467)				::cpp::VirtualArray _hx_tmp4 = this->members;
HXDLIN( 467)				return _hx_tmp4->__get((i - (int)1));
            			}
            		}
HXLINE( 471)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,getFirstAvailable,return )

int FlxTypedGroup_obj::getFirstNull(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_481_getFirstNull)
HXLINE( 482)		int i = (int)0;
HXLINE( 484)		while((i < this->length)){
HXLINE( 486)			if (hx::IsNull( this->members->__get(i) )) {
HXLINE( 487)				return i;
            			}
HXLINE( 488)			i = (i + (int)1);
            		}
HXLINE( 491)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstNull,return )

 ::Dynamic FlxTypedGroup_obj::getFirstExisting(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_501_getFirstExisting)
HXLINE( 502)		int i = (int)0;
HXLINE( 503)		 ::flixel::FlxBasic basic = null();
HXLINE( 505)		while((i < this->length)){
HXLINE( 507)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 507)			i = (i + (int)1);
HXDLIN( 507)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 509)			bool _hx_tmp;
HXDLIN( 509)			if (hx::IsNotNull( basic )) {
HXLINE( 509)				_hx_tmp = basic->exists;
            			}
            			else {
HXLINE( 509)				_hx_tmp = false;
            			}
HXDLIN( 509)			if (_hx_tmp) {
HXLINE( 510)				return basic;
            			}
            		}
HXLINE( 513)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstExisting,return )

 ::Dynamic FlxTypedGroup_obj::getFirstAlive(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_523_getFirstAlive)
HXLINE( 524)		int i = (int)0;
HXLINE( 525)		 ::flixel::FlxBasic basic = null();
HXLINE( 527)		while((i < this->length)){
HXLINE( 529)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 529)			i = (i + (int)1);
HXDLIN( 529)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 531)			bool _hx_tmp;
HXDLIN( 531)			bool _hx_tmp1;
HXDLIN( 531)			if (hx::IsNotNull( basic )) {
HXLINE( 531)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 531)				_hx_tmp1 = false;
            			}
HXDLIN( 531)			if (_hx_tmp1) {
HXLINE( 531)				_hx_tmp = basic->alive;
            			}
            			else {
HXLINE( 531)				_hx_tmp = false;
            			}
HXDLIN( 531)			if (_hx_tmp) {
HXLINE( 532)				return basic;
            			}
            		}
HXLINE( 535)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstAlive,return )

 ::Dynamic FlxTypedGroup_obj::getFirstDead(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_545_getFirstDead)
HXLINE( 546)		int i = (int)0;
HXLINE( 547)		 ::flixel::FlxBasic basic = null();
HXLINE( 549)		while((i < this->length)){
HXLINE( 551)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 551)			i = (i + (int)1);
HXDLIN( 551)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 553)			bool _hx_tmp;
HXDLIN( 553)			if (hx::IsNotNull( basic )) {
HXLINE( 553)				_hx_tmp = !(basic->alive);
            			}
            			else {
HXLINE( 553)				_hx_tmp = false;
            			}
HXDLIN( 553)			if (_hx_tmp) {
HXLINE( 554)				return basic;
            			}
            		}
HXLINE( 557)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstDead,return )

int FlxTypedGroup_obj::countLiving(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_566_countLiving)
HXLINE( 567)		int i = (int)0;
HXLINE( 568)		int count = (int)-1;
HXLINE( 569)		 ::flixel::FlxBasic basic = null();
HXLINE( 571)		while((i < this->length)){
HXLINE( 573)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 573)			i = (i + (int)1);
HXDLIN( 573)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 575)			if (hx::IsNotNull( basic )) {
HXLINE( 577)				if ((count < (int)0)) {
HXLINE( 578)					count = (int)0;
            				}
HXLINE( 579)				bool _hx_tmp;
HXDLIN( 579)				if (basic->exists) {
HXLINE( 579)					_hx_tmp = basic->alive;
            				}
            				else {
HXLINE( 579)					_hx_tmp = false;
            				}
HXDLIN( 579)				if (_hx_tmp) {
HXLINE( 580)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 584)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,countLiving,return )

int FlxTypedGroup_obj::countDead(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_593_countDead)
HXLINE( 594)		int i = (int)0;
HXLINE( 595)		int count = (int)-1;
HXLINE( 596)		 ::flixel::FlxBasic basic = null();
HXLINE( 598)		while((i < this->length)){
HXLINE( 600)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 600)			i = (i + (int)1);
HXDLIN( 600)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 602)			if (hx::IsNotNull( basic )) {
HXLINE( 604)				if ((count < (int)0)) {
HXLINE( 605)					count = (int)0;
            				}
HXLINE( 606)				if (!(basic->alive)) {
HXLINE( 607)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 611)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,countDead,return )

 ::Dynamic FlxTypedGroup_obj::getRandom(hx::Null< int >  __o_StartIndex,hx::Null< int >  __o_Length){
int StartIndex = __o_StartIndex.Default(0);
int Length = __o_Length.Default(0);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_623_getRandom)
HXLINE( 624)		if ((StartIndex < (int)0)) {
HXLINE( 625)			StartIndex = (int)0;
            		}
HXLINE( 626)		if ((Length <= (int)0)) {
HXLINE( 627)			Length = this->length;
            		}
HXLINE( 629)		return ::flixel::FlxG_obj::random->getObject_flixel_group_FlxTypedGroup_T(this->members,null(),StartIndex,Length);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,getRandom,return )

void FlxTypedGroup_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_637_clear)
HXLINE( 638)		this->length = (int)0;
HXLINE( 640)		if (hx::IsNotNull( this->_memberRemoved )) {
HXLINE( 642)			int _g = (int)0;
HXDLIN( 642)			::cpp::VirtualArray _g1 = this->members;
HXDLIN( 642)			while((_g < _g1->get_length())){
HXLINE( 642)				 ::Dynamic member = _g1->__get(_g);
HXDLIN( 642)				_g = (_g + (int)1);
HXLINE( 644)				if (hx::IsNotNull( member )) {
HXLINE( 645)					this->_memberRemoved->dispatch(member);
            				}
            			}
            		}
HXLINE( 649)		::flixel::util::FlxArrayUtil_obj::clearArray(this->members,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,clear,(void))

void FlxTypedGroup_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_657_kill)
HXLINE( 658)		int i = (int)0;
HXLINE( 659)		 ::flixel::FlxBasic basic = null();
HXLINE( 661)		while((i < this->length)){
HXLINE( 663)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 663)			i = (i + (int)1);
HXDLIN( 663)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 665)			bool _hx_tmp;
HXDLIN( 665)			if (hx::IsNotNull( basic )) {
HXLINE( 665)				_hx_tmp = basic->exists;
            			}
            			else {
HXLINE( 665)				_hx_tmp = false;
            			}
HXDLIN( 665)			if (_hx_tmp) {
HXLINE( 666)				basic->kill();
            			}
            		}
HXLINE( 669)		this->super::kill();
            	}


void FlxTypedGroup_obj::revive(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_676_revive)
HXLINE( 677)		int i = (int)0;
HXLINE( 678)		 ::flixel::FlxBasic basic = null();
HXLINE( 680)		while((i < this->length)){
HXLINE( 682)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 682)			i = (i + (int)1);
HXDLIN( 682)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 684)			bool _hx_tmp;
HXDLIN( 684)			if (hx::IsNotNull( basic )) {
HXLINE( 684)				_hx_tmp = !(basic->exists);
            			}
            			else {
HXLINE( 684)				_hx_tmp = false;
            			}
HXDLIN( 684)			if (_hx_tmp) {
HXLINE( 685)				basic->revive();
            			}
            		}
HXLINE( 688)		this->super::revive();
            	}


 ::flixel::group::FlxTypedGroupIterator FlxTypedGroup_obj::iterator( ::Dynamic filter){
            	HX_GC_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_696_iterator)
HXDLIN( 696)		return  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->members,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,iterator,return )

void FlxTypedGroup_obj::forEach( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_706_forEach)
HXLINE( 707)		int i = (int)0;
HXLINE( 708)		 ::flixel::FlxBasic basic = null();
HXLINE( 710)		while((i < this->length)){
HXLINE( 712)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 712)			i = (i + (int)1);
HXDLIN( 712)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 714)			if (hx::IsNotNull( basic )) {
HXLINE( 716)				if (Recurse) {
HXLINE( 718)					 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 719)					if (hx::IsNotNull( group )) {
HXLINE( 720)						group->forEach(Function,Recurse);
            					}
            				}
HXLINE( 723)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEach,(void))

void FlxTypedGroup_obj::forEachAlive( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_735_forEachAlive)
HXLINE( 736)		int i = (int)0;
HXLINE( 737)		 ::flixel::FlxBasic basic = null();
HXLINE( 739)		while((i < this->length)){
HXLINE( 741)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 741)			i = (i + (int)1);
HXDLIN( 741)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 743)			bool _hx_tmp;
HXDLIN( 743)			bool _hx_tmp1;
HXDLIN( 743)			if (hx::IsNotNull( basic )) {
HXLINE( 743)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 743)				_hx_tmp1 = false;
            			}
HXDLIN( 743)			if (_hx_tmp1) {
HXLINE( 743)				_hx_tmp = basic->alive;
            			}
            			else {
HXLINE( 743)				_hx_tmp = false;
            			}
HXDLIN( 743)			if (_hx_tmp) {
HXLINE( 745)				if (Recurse) {
HXLINE( 747)					 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 748)					if (hx::IsNotNull( group )) {
HXLINE( 749)						group->forEachAlive(Function,Recurse);
            					}
            				}
HXLINE( 752)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachAlive,(void))

void FlxTypedGroup_obj::forEachDead( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_764_forEachDead)
HXLINE( 765)		int i = (int)0;
HXLINE( 766)		 ::flixel::FlxBasic basic = null();
HXLINE( 768)		while((i < this->length)){
HXLINE( 770)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 770)			i = (i + (int)1);
HXDLIN( 770)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 772)			bool _hx_tmp;
HXDLIN( 772)			if (hx::IsNotNull( basic )) {
HXLINE( 772)				_hx_tmp = !(basic->alive);
            			}
            			else {
HXLINE( 772)				_hx_tmp = false;
            			}
HXDLIN( 772)			if (_hx_tmp) {
HXLINE( 774)				if (Recurse) {
HXLINE( 776)					 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 777)					if (hx::IsNotNull( group )) {
HXLINE( 778)						group->forEachDead(Function,Recurse);
            					}
            				}
HXLINE( 781)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachDead,(void))

void FlxTypedGroup_obj::forEachExists( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_793_forEachExists)
HXLINE( 794)		int i = (int)0;
HXLINE( 795)		 ::flixel::FlxBasic basic = null();
HXLINE( 797)		while((i < this->length)){
HXLINE( 799)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 799)			i = (i + (int)1);
HXDLIN( 799)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 801)			bool _hx_tmp;
HXDLIN( 801)			if (hx::IsNotNull( basic )) {
HXLINE( 801)				_hx_tmp = basic->exists;
            			}
            			else {
HXLINE( 801)				_hx_tmp = false;
            			}
HXDLIN( 801)			if (_hx_tmp) {
HXLINE( 803)				if (Recurse) {
HXLINE( 805)					 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 806)					if (hx::IsNotNull( group )) {
HXLINE( 807)						group->forEachExists(Function,Recurse);
            					}
            				}
HXLINE( 810)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachExists,(void))

void FlxTypedGroup_obj::forEachOfType(hx::Class ObjectClass, ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_823_forEachOfType)
HXLINE( 824)		int i = (int)0;
HXLINE( 825)		 ::flixel::FlxBasic basic = null();
HXLINE( 827)		while((i < this->length)){
HXLINE( 829)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 829)			i = (i + (int)1);
HXDLIN( 829)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 831)			if (hx::IsNotNull( basic )) {
HXLINE( 833)				if (Recurse) {
HXLINE( 835)					 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 836)					if (hx::IsNotNull( group )) {
HXLINE( 837)						group->forEachOfType(ObjectClass,Function,Recurse);
            					}
            				}
HXLINE( 840)				if (::Std_obj::is(basic,ObjectClass)) {
HXLINE( 841)					Function(basic);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedGroup_obj,forEachOfType,(void))

int FlxTypedGroup_obj::set_maxSize(int Size){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_848_set_maxSize)
HXLINE( 849)		this->maxSize = ::Std_obj::_hx_int(::Math_obj::abs(Size));
HXLINE( 851)		if ((this->_marker >= this->maxSize)) {
HXLINE( 852)			this->_marker = (int)0;
            		}
HXLINE( 854)		bool _hx_tmp;
HXDLIN( 854)		bool _hx_tmp1;
HXDLIN( 854)		if ((this->maxSize != (int)0)) {
HXLINE( 854)			_hx_tmp1 = hx::IsNull( this->members );
            		}
            		else {
HXLINE( 854)			_hx_tmp1 = true;
            		}
HXDLIN( 854)		if (!(_hx_tmp1)) {
HXLINE( 854)			_hx_tmp = (this->maxSize >= this->length);
            		}
            		else {
HXLINE( 854)			_hx_tmp = true;
            		}
HXDLIN( 854)		if (_hx_tmp) {
HXLINE( 855)			return this->maxSize;
            		}
HXLINE( 858)		int i = this->maxSize;
HXLINE( 859)		int l = this->length;
HXLINE( 860)		 ::flixel::FlxBasic basic = null();
HXLINE( 862)		while((i < l)){
HXLINE( 864)			::cpp::VirtualArray basic1 = this->members;
HXDLIN( 864)			i = (i + (int)1);
HXDLIN( 864)			basic = ( ( ::flixel::FlxBasic)(basic1->__get((i - (int)1))) );
HXLINE( 866)			if (hx::IsNotNull( basic )) {
HXLINE( 868)				if (hx::IsNotNull( this->_memberRemoved )) {
HXLINE( 869)					this->_memberRemoved->dispatch(basic);
            				}
HXLINE( 871)				basic->destroy();
            			}
            		}
HXLINE( 875)		::flixel::util::FlxArrayUtil_obj::setLength_flixel_group_FlxTypedGroup_T(this->members,this->maxSize);
HXLINE( 876)		this->length = this->members->get_length();
HXLINE( 878)		return this->maxSize;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,set_maxSize,return )

 ::flixel::util::_FlxSignal::FlxSignal1 FlxTypedGroup_obj::get_memberAdded(){
            	HX_GC_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_883_get_memberAdded)
HXLINE( 884)		if (hx::IsNull( this->_memberAdded )) {
HXLINE( 885)			this->_memberAdded =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
            		}
HXLINE( 887)		return this->_memberAdded;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,get_memberAdded,return )

 ::flixel::util::_FlxSignal::FlxSignal1 FlxTypedGroup_obj::get_memberRemoved(){
            	HX_GC_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_892_get_memberRemoved)
HXLINE( 893)		if (hx::IsNull( this->_memberRemoved )) {
HXLINE( 894)			this->_memberRemoved =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
            		}
HXLINE( 896)		return this->_memberRemoved;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,get_memberRemoved,return )

bool FlxTypedGroup_obj::overlaps( ::Dynamic Callback, ::flixel::group::FlxTypedGroup Group,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_26_overlaps)
HXLINE(  27)		bool result = false;
HXLINE(  28)		if (hx::IsNotNull( Group )) {
HXLINE(  30)			int i = (int)0;
HXLINE(  31)			int l = Group->length;
HXLINE(  32)			 ::flixel::FlxBasic basic;
HXLINE(  34)			while((i < l)){
HXLINE(  36)				::Array< ::Dynamic> Group1 = Group->members;
HXDLIN(  36)				i = (i + (int)1);
HXDLIN(  36)				basic = Group1->__get((i - (int)1)).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  38)				bool _hx_tmp;
HXDLIN(  38)				if (hx::IsNotNull( basic )) {
HXLINE(  38)					_hx_tmp = ( (bool)(Callback(basic,X,Y,InScreenSpace,Camera)) );
            				}
            				else {
HXLINE(  38)					_hx_tmp = false;
            				}
HXDLIN(  38)				if (_hx_tmp) {
HXLINE(  40)					result = true;
HXLINE(  41)					goto _hx_goto_51;
            				}
            			}
            			_hx_goto_51:;
            		}
HXLINE(  45)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxTypedGroup_obj,overlaps,return )

 ::flixel::group::FlxTypedGroup FlxTypedGroup_obj::resolveGroup( ::flixel::FlxBasic ObjectOrGroup){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_50_resolveGroup)
HXLINE(  51)		 ::flixel::group::FlxTypedGroup group = null();
HXLINE(  52)		if (hx::IsNotNull( ObjectOrGroup )) {
HXLINE(  54)			if ((ObjectOrGroup->flixelType == (int)2)) {
HXLINE(  56)				group = ( ( ::flixel::group::FlxTypedGroup)(ObjectOrGroup) );
            			}
            			else {
HXLINE(  58)				if ((ObjectOrGroup->flixelType == (int)4)) {
HXLINE(  60)					 ::flixel::group::FlxTypedSpriteGroup spriteGroup = ( ( ::flixel::group::FlxTypedSpriteGroup)(ObjectOrGroup) );
HXLINE(  61)					group = spriteGroup->group;
            				}
            			}
            		}
HXLINE(  64)		return group;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,resolveGroup,return )


hx::ObjectPtr< FlxTypedGroup_obj > FlxTypedGroup_obj::__new(hx::Null< int >  __o_MaxSize) {
	hx::ObjectPtr< FlxTypedGroup_obj > __this = new FlxTypedGroup_obj();
	__this->__construct(__o_MaxSize);
	return __this;
}

hx::ObjectPtr< FlxTypedGroup_obj > FlxTypedGroup_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_MaxSize) {
	FlxTypedGroup_obj *__this = (FlxTypedGroup_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedGroup_obj), true, "flixel.group.FlxTypedGroup"));
	*(void **)__this = FlxTypedGroup_obj::_hx_vtable;
	__this->__construct(__o_MaxSize);
	return __this;
}

FlxTypedGroup_obj::FlxTypedGroup_obj()
{
}

void FlxTypedGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedGroup);
	HX_MARK_MEMBER_NAME(members,"members");
	HX_MARK_MEMBER_NAME(maxSize,"maxSize");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(_memberAdded,"_memberAdded");
	HX_MARK_MEMBER_NAME(_memberRemoved,"_memberRemoved");
	HX_MARK_MEMBER_NAME(_marker,"_marker");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(members,"members");
	HX_VISIT_MEMBER_NAME(maxSize,"maxSize");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(_memberAdded,"_memberAdded");
	HX_VISIT_MEMBER_NAME(_memberRemoved,"_memberRemoved");
	HX_VISIT_MEMBER_NAME(_marker,"_marker");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn() ); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { return hx::Val( members ); }
		if (HX_FIELD_EQ(inName,"maxSize") ) { return hx::Val( maxSize ); }
		if (HX_FIELD_EQ(inName,"_marker") ) { return hx::Val( _marker ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"recycle") ) { return hx::Val( recycle_dyn() ); }
		if (HX_FIELD_EQ(inName,"replace") ) { return hx::Val( replace_dyn() ); }
		if (HX_FIELD_EQ(inName,"forEach") ) { return hx::Val( forEach_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"countDead") ) { return hx::Val( countDead_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRandom") ) { return hx::Val( getRandom_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"memberAdded") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_memberAdded() ); }
		if (HX_FIELD_EQ(inName,"countLiving") ) { return hx::Val( countLiving_dyn() ); }
		if (HX_FIELD_EQ(inName,"forEachDead") ) { return hx::Val( forEachDead_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxSize") ) { return hx::Val( set_maxSize_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_memberAdded") ) { return hx::Val( _memberAdded ); }
		if (HX_FIELD_EQ(inName,"getFirstNull") ) { return hx::Val( getFirstNull_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFirstDead") ) { return hx::Val( getFirstDead_dyn() ); }
		if (HX_FIELD_EQ(inName,"forEachAlive") ) { return hx::Val( forEachAlive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"memberRemoved") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_memberRemoved() ); }
		if (HX_FIELD_EQ(inName,"getFirstAlive") ) { return hx::Val( getFirstAlive_dyn() ); }
		if (HX_FIELD_EQ(inName,"forEachExists") ) { return hx::Val( forEachExists_dyn() ); }
		if (HX_FIELD_EQ(inName,"forEachOfType") ) { return hx::Val( forEachOfType_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_memberRemoved") ) { return hx::Val( _memberRemoved ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_memberAdded") ) { return hx::Val( get_memberAdded_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getFirstExisting") ) { return hx::Val( getFirstExisting_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getFirstAvailable") ) { return hx::Val( getFirstAvailable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_memberRemoved") ) { return hx::Val( get_memberRemoved_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"recycleCreateObject") ) { return hx::Val( recycleCreateObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTypedGroup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"overlaps") ) { outValue = overlaps_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveGroup") ) { outValue = resolveGroup_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTypedGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { members=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxSize(inValue.Cast< int >()) );maxSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_marker") ) { _marker=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_memberAdded") ) { _memberAdded=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_memberRemoved") ) { _memberRemoved=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"));
	outFields->push(HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("memberAdded","\x06","\x9c","\x46","\x1e"));
	outFields->push(HX_HCSTRING("memberRemoved","\x66","\xc4","\xb7","\x90"));
	outFields->push(HX_HCSTRING("_memberAdded","\x07","\x4a","\x50","\x84"));
	outFields->push(HX_HCSTRING("_memberRemoved","\xa7","\xb4","\x09","\xcf"));
	outFields->push(HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedGroup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxTypedGroup_obj,members),HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,maxSize),HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsObject /*::flixel::util::_FlxSignal::FlxSignal1*/ ,(int)offsetof(FlxTypedGroup_obj,_memberAdded),HX_HCSTRING("_memberAdded","\x07","\x4a","\x50","\x84")},
	{hx::fsObject /*::flixel::util::_FlxSignal::FlxSignal1*/ ,(int)offsetof(FlxTypedGroup_obj,_memberRemoved),HX_HCSTRING("_memberRemoved","\xa7","\xb4","\x09","\xcf")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,_marker),HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedGroup_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedGroup_obj_sMemberFields[] = {
	HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"),
	HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("_memberAdded","\x07","\x4a","\x50","\x84"),
	HX_HCSTRING("_memberRemoved","\xa7","\xb4","\x09","\xcf"),
	HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	HX_HCSTRING("recycleCreateObject","\x8e","\x6b","\x54","\x8e"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("getFirstAvailable","\xaf","\xea","\xb3","\x05"),
	HX_HCSTRING("getFirstNull","\x61","\xb7","\x33","\x0f"),
	HX_HCSTRING("getFirstExisting","\x65","\xa4","\x6c","\xee"),
	HX_HCSTRING("getFirstAlive","\xb3","\x09","\xe2","\xbb"),
	HX_HCSTRING("getFirstDead","\x7e","\x67","\x8b","\x08"),
	HX_HCSTRING("countLiving","\x58","\xd9","\x8a","\x30"),
	HX_HCSTRING("countDead","\x13","\xd3","\x86","\x54"),
	HX_HCSTRING("getRandom","\x39","\xab","\xe5","\x33"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("forEach","\xaa","\x29","\xbe","\xc4"),
	HX_HCSTRING("forEachAlive","\xc3","\x61","\xb7","\x99"),
	HX_HCSTRING("forEachDead","\x6e","\xc1","\xe4","\x78"),
	HX_HCSTRING("forEachExists","\x26","\x57","\xf8","\x68"),
	HX_HCSTRING("forEachOfType","\xbb","\x90","\x76","\xfd"),
	HX_HCSTRING("set_maxSize","\xa8","\x60","\xeb","\x5c"),
	HX_HCSTRING("get_memberAdded","\x9d","\x53","\x28","\xdf"),
	HX_HCSTRING("get_memberRemoved","\xbd","\xcf","\x27","\x97"),
	::String(null()) };

static void FlxTypedGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedGroup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedGroup_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedGroup_obj::__mClass;

static ::String FlxTypedGroup_obj_sStaticFields[] = {
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("resolveGroup","\xb3","\xf8","\x79","\xd2"),
	::String(null())
};

void FlxTypedGroup_obj::__register()
{
	hx::Object *dummy = new FlxTypedGroup_obj;
	FlxTypedGroup_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.group.FlxTypedGroup","\xe6","\xb8","\x51","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTypedGroup_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTypedGroup_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace group
